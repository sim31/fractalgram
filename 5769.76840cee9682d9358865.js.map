{"version":3,"file":"5769.76840cee9682d9358865.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectBot, selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  const bot = botId && selectBot(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\n\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getMessageOriginalId, isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      if (global.openedStickerSetShortName === stickerSetShortName) {\n        setGlobal({\n          ...global,\n          openedStickerSetShortName: undefined,\n        });\n      }\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash!, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if (global.openedStickerSetShortName === stickerSetShortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { sticker } = payload;\n\n  if (!selectStickerSet(global, sticker.stickerSetId)) {\n    if (!sticker.stickerSetAccessHash) {\n      actions.showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n      return;\n    }\n\n    await loadStickers(sticker.stickerSetId, sticker.stickerSetAccessHash);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, sticker.stickerSetId);\n  if (!set?.shortName) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      if (url.match(RE_TME_LINK) || url.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url });\n      } else {\n        actions.toggleSafeLinkModal({ url });\n      }\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      actions.getPaymentForm({ chat, messageId });\n      actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n      actions.openPaymentModal({ chatId: chat.id, messageId });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const bot = selectBot(global, chatId);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, bot, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      if (!message.viaBotId && !message.senderId) {\n        return;\n      }\n      const bot = selectBot(global, message.viaBotId! || message.senderId!);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        bot,\n        peer: chat,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, bot, theme, buttonText,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, bot, peer, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    bot, peer, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const bot = selectChatBot(global, botId);\n  if (!chat || !bot) {\n    return undefined;\n  }\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        bot,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peer: chat,\n    bot,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { bot, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId: bot.id, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, toggleSafeLinkModal, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      toggleSafeLinkModal({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      if (phoneCall) return undefined;\n\n      const { call } = update;\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  BETA_DISCUSSION_CHAT_EN,\n  BETA_DISCUSSION_CHAT_RU,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Meta+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleSelectPasscode = useCallback(() => {\n    requestNextSettingsScreen(\n      hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n    );\n  }, [hasPasscode, requestNextSettingsScreen]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank');\n  }, []);\n\n  const handleRuDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_RU });\n  }, [openChatByUsername]);\n\n  const handleEnDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_EN });\n  }, [openChatByUsername]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n  }, []);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"lock\"\n            onClick={handleSelectPasscode}\n          >\n            {lang('Passcode')}\n            <span className=\"menu-item-badge\">{lang('New')}</span>\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <>\n              <MenuItem\n                icon=\"permissions\"\n                onClick={handleChangelogClick}\n              >\n                Beta Changelog\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleRuDiscussionClick}\n              >\n                Beta Discussion (ru)\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleEnDiscussionClick}\n              >\n                Beta Discussion (en)\n              </MenuItem>\n            </>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n              <span className=\"menu-item-badge\">{lang('New')}</span>\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: activeChatFolder !== 0,\n    onBack: () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  useHotkeys({\n    'mod+shift+F': handleHotkeySearch,\n    'mod+shift+S': handleHotkeySavedMessages,\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n    } = global;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      activeChatFolder,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Meta+F': handleHotkeySearchClick,\n  });\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n    photoWidth,\n    photoHeight,\n  } = invoice!;\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const photoStyle = photoHeight && photoWidth ? `aspect-ratio: ${photoWidth / photoHeight};` : undefined;\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            style={photoStyle}\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {['buy', 'receipt'].includes(button.type) && <i className=\"icon-card\" />}\n              {button.type === 'url' && !RE_TME_LINK.test(button.url) && <i className=\"icon-arrow-right\" />}\n              {button.type === 'switchBotInline' && <i className=\"icon-share-filled\" />}\n              {['webView', 'simpleWebView'].includes(button.type) && <i className=\"icon-webapp\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message, highlight, isEmojiOnlyMessage(customShape), undefined, undefined, isProtected,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botInfo?.description || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Meta+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-ScrollDownButton-module__root\",\"button\":\"src-components-middle-ScrollDownButton-module__button\",\"icon\":\"src-components-middle-ScrollDownButton-module__icon\",\"unread-count\":\"src-components-middle-ScrollDownButton-module__unread-count\",\"unreadCount\":\"src-components-middle-ScrollDownButton-module__unread-count\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-FloatingActionButtons-module__root\",\"unread\":\"src-components-middle-FloatingActionButtons-module__unread\",\"revealed\":\"src-components-middle-FloatingActionButtons-module__revealed\",\"no-composer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"noComposer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"no-extra-shift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"noExtraShift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"only-reactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"onlyReactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"is-symbol-menu-open\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\",\"isSymbolMenuOpen\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__root\",\"compact\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__compact\",\"image\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__image\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  isPrivateChat?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  isScheduled,\n  isPrivateChat,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && isPrivateChat && Object.values(attachMenuBots).map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    isPrivateChat?: boolean;\n    theme: ISettings['theme'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  isPrivateChat,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {isChatWithBot && isBotMenuButtonCommands && botCommands !== false && !activeVoiceRecording\n            && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            isPrivateChat={isPrivateChat}\n            attachMenuBots={attachMenuBots}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isPrivateChat = Boolean(selectUser(global, chatId));\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n        && threadId === currentMessageList?.threadId\n        && messageListType === currentMessageList?.type;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isPrivateChat,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      theme: selectTheme(global),\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"src-components-middle-MiddleColumn-module__background\",\"customBgImage\":\"src-components-middle-MiddleColumn-module__customBgImage\",\"customBgColor\":\"src-components-middle-MiddleColumn-module__customBgColor\",\"withTransition\":\"src-components-middle-MiddleColumn-module__withTransition\",\"blurred\":\"src-components-middle-MiddleColumn-module__blurred\",\"withRightColumn\":\"src-components-middle-MiddleColumn-module__withRightColumn\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport type { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { fastRaf } from '../../util/schedulers';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botAttachRequest?: GlobalState['botAttachRequest'];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botAttachRequest,\n  webApp,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n    loadContactList,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n      loadContactList();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots, loadContactList,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequest?.bot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequest?.bot} />\n      <MessageListHistoryHandler />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest: global.botTrustRequest,\n      botAttachRequest: global.botAttachRequest,\n      webApp: global.webApp,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { transitionClassNames, shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.container, transitionClassNames)}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"src-components-main-LockScreen-module__container\",\"wrapper\":\"src-components-main-LockScreen-module__wrapper\",\"icon\":\"src-components-main-LockScreen-module__icon\",\"help\":\"src-components-main-LockScreen-module__help\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","isOpen","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","added","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","bot","selectBot","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetId","accessHash","stickerSetShortName","stickerSet","getActions","openedStickerSetShortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","addedSetIds","cached","setsById","pause","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","shortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","open","blur","location","href","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","isEnabled","loadAttachMenuBots","attachMenu","bots","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","toggleSafeLinkModal","openGame","alert","isError","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","openPollModal","receiptMessageId","getReceipt","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","openChatWithText","queryId","resultId","scheduleDate","param","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","isBlocked","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","isCallPanelVisible","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","hostname","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleSelectPasscode","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleRuDiscussionClick","BETA_DISCUSSION_CHAT_RU","handleEnDiscussionClick","BETA_DISCUSSION_CHAT_EN","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","handleOpenTipsChat","handleLockScreen","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","hasEffect","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","AnimatedIconFromSticker","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","photoWidth","photoHeight","photoStyle","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","isPending","handleUnfreeze","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","getDocumentMediaHash","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","isPrivateChat","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","ratingPhoneCall","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","langCode","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}