{"version":3,"file":"888.3bcf93fb3c92294b2737.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/AnimatedSticker.tsx","webpack://telegram-t/./src/components/common/Avatar.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/ConfirmDialog.tsx","webpack://telegram-t/./src/components/ui/InfiniteScroll.tsx","webpack://telegram-t/./src/components/ui/Modal.tsx","webpack://telegram-t/./src/util/trapFocus.ts","webpack://telegram-t/./src/components/ui/Portal.ts","webpack://telegram-t/./src/hooks/useBackgroundMode.ts","webpack://telegram-t/./src/hooks/useCurrentOrPrev.ts","webpack://telegram-t/./src/hooks/useInfiniteScroll.ts","webpack://telegram-t/./src/hooks/useMedia.ts","webpack://telegram-t/./src/util/forceReflow.ts","webpack://telegram-t/./src/util/resetScroll.ts","webpack://telegram-t/./src/util/safePlay.ts"],"sourcesContent":["import React, {\n  FC, useEffect, useRef, memo, useCallback, useState,\n} from '../../lib/teact/teact';\n\nimport { fastRaf } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useHeavyAnimationCheck from '../../hooks/useHeavyAnimationCheck';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\ntype OwnProps = {\n  className?: string;\n  id: string;\n  animationData?: string;\n  play?: boolean | string;\n  playSegment?: [number, number];\n  speed?: number;\n  noLoop?: boolean;\n  size: number;\n  quality?: number;\n  isLowPriority?: boolean;\n  onLoad?: NoneToVoidFunction;\n  forceOnHeavyAnimation?: boolean;\n  color?: [number, number, number];\n  onEnded?: NoneToVoidFunction;\n};\n\ntype RLottieClass = typeof import('../../lib/rlottie/RLottie').default;\ntype RLottieInstance = import('../../lib/rlottie/RLottie').default;\nlet lottiePromise: Promise<RLottieClass>;\nlet RLottie: RLottieClass;\n\n// Time for the main interface to completely load\nconst LOTTIE_LOAD_DELAY = 3000;\n\nasync function ensureLottie() {\n  if (!lottiePromise) {\n    lottiePromise = import('../../lib/rlottie/RLottie') as unknown as Promise<RLottieClass>;\n    RLottie = (await lottiePromise as any).default;\n  }\n\n  return lottiePromise;\n}\n\nsetTimeout(ensureLottie, LOTTIE_LOAD_DELAY);\n\nconst AnimatedSticker: FC<OwnProps> = ({\n  className,\n  id,\n  animationData,\n  play,\n  playSegment,\n  speed,\n  noLoop,\n  size,\n  quality,\n  isLowPriority,\n  color,\n  forceOnHeavyAnimation,\n  onLoad,\n  onEnded,\n}) => {\n  const [animation, setAnimation] = useState<RLottieInstance>();\n  // eslint-disable-next-line no-null/no-null\n  const container = useRef<HTMLDivElement>(null);\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n  const isFirstRender = useRef(true);\n\n  const playRef = useRef();\n  playRef.current = play;\n  const playSegmentRef = useRef<[number, number]>();\n  playSegmentRef.current = playSegment;\n\n  useEffect(() => {\n    if (animation || !animationData) {\n      return;\n    }\n\n    const exec = () => {\n      if (!container.current) {\n        return;\n      }\n\n      const newAnimation = new RLottie(\n        id,\n        container.current,\n        animationData,\n        {\n          noLoop,\n          size,\n          quality,\n          isLowPriority,\n        },\n        onLoad,\n        color,\n        onEnded,\n      );\n\n      if (speed) {\n        newAnimation.setSpeed(speed);\n      }\n\n      setAnimation(newAnimation);\n    };\n\n    if (RLottie) {\n      exec();\n    } else {\n      ensureLottie().then(() => {\n        fastRaf(() => {\n          if (container.current) {\n            exec();\n          }\n        });\n      });\n    }\n  }, [color, animation, animationData, id, isLowPriority, noLoop, onLoad, quality, size, speed, onEnded]);\n\n  useEffect(() => {\n    if (!animation) return;\n\n    animation.setColor(color);\n  }, [color, animation]);\n\n  useEffect(() => {\n    return () => {\n      if (animation) {\n        animation.destroy();\n      }\n    };\n  }, [animation]);\n\n  const playAnimation = useCallback((shouldRestart = false) => {\n    if (animation && (playRef.current || playSegmentRef.current)) {\n      if (playSegmentRef.current) {\n        animation.playSegment(playSegmentRef.current);\n      } else if (shouldRestart) {\n        animation.goToAndPlay(0);\n      } else {\n        animation.play();\n      }\n    }\n  }, [animation]);\n\n  const pauseAnimation = useCallback(() => {\n    if (!animation) {\n      return;\n    }\n\n    animation.pause();\n  }, [animation]);\n\n  const freezeAnimation = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!animation) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = animation.isPlaying();\n    }\n\n    pauseAnimation();\n  }, [animation, pauseAnimation]);\n\n  const unfreezeAnimation = useCallback(() => {\n    if (wasPlaying.current) {\n      playAnimation();\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [playAnimation]);\n\n  const unfreezeAnimationOnRaf = useCallback(() => {\n    fastRaf(unfreezeAnimation);\n  }, [unfreezeAnimation]);\n\n  useEffect(() => {\n    if (!animation) {\n      return;\n    }\n\n    if (play || playSegment) {\n      if (isFrozen.current) {\n        wasPlaying.current = true;\n      } else {\n        playAnimation(noLoop);\n      }\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (isFrozen.current) {\n        wasPlaying.current = false;\n      } else {\n        pauseAnimation();\n      }\n    }\n  }, [animation, play, playSegment, noLoop, playAnimation, pauseAnimation]);\n\n  useEffect(() => {\n    if (animation) {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n      } else if (animationData) {\n        animation.changeData(animationData);\n        playAnimation();\n      }\n    }\n  }, [playAnimation, animation, animationData]);\n\n  useHeavyAnimationCheck(freezeAnimation, unfreezeAnimation, forceOnHeavyAnimation);\n  // Pausing frame may not happen in background\n  // so we need to make sure it happens right after focusing,\n  // then we can play again.\n  useBackgroundMode(freezeAnimation, unfreezeAnimationOnRaf);\n\n  const fullClassName = buildClassName('AnimatedSticker', className);\n\n  const style = size ? `width: ${size}px; height: ${size}px;` : undefined;\n\n  return (\n    <div\n      ref={container}\n      className={fullClassName}\n      style={style}\n    />\n  );\n};\n\nexport default memo(AnimatedSticker);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser, ApiUserStatus,\n} from '../../api/types';\n\nimport { IS_TEST } from '../../config';\nimport {\n  getChatAvatarHash,\n  getChatTitle,\n  getUserColorKey,\n  getUserFullName,\n  isUserId,\n  isChatWithRepliesBot,\n  isDeletedUser,\n  isUserOnline,\n} from '../../global/helpers';\nimport { getFirstLetters } from '../../util/textFormat';\nimport buildClassName, { createClassNameBuilder } from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport './Avatar.scss';\n\nconst cn = createClassNameBuilder('Avatar');\ncn.img = cn('img');\ncn.icon = cn('icon');\n\ntype OwnProps = {\n  className?: string;\n  size?: 'micro' | 'tiny' | 'small' | 'medium' | 'large' | 'jumbo';\n  chat?: ApiChat;\n  user?: ApiUser;\n  photo?: ApiPhoto;\n  userStatus?: ApiUserStatus;\n  text?: string;\n  isSavedMessages?: boolean;\n  lastSyncTime?: number;\n  onClick?: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>, hasPhoto: boolean) => void;\n};\n\nconst Avatar: FC<OwnProps> = ({\n  className,\n  size = 'large',\n  chat,\n  user,\n  photo,\n  userStatus,\n  text,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const isDeleted = user && isDeletedUser(user);\n  const isReplies = user && isChatWithRepliesBot(user.id);\n  let imageHash: string | undefined;\n\n  if (!isSavedMessages && !isDeleted) {\n    if (user) {\n      imageHash = getChatAvatarHash(user);\n    } else if (chat) {\n      imageHash = getChatAvatarHash(chat);\n    } else if (photo) {\n      imageHash = `photo${photo.id}?size=m`;\n    }\n  }\n\n  const blobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const hasBlobUrl = Boolean(blobUrl);\n  const { transitionClassNames } = useShowTransition(hasBlobUrl, undefined, hasBlobUrl, 'slow');\n\n  const lang = useLang();\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-saved-messages')} />;\n  } else if (isDeleted) {\n    content = <i className={buildClassName(cn.icon, 'icon-avatar-deleted-account')} />;\n  } else if (isReplies) {\n    content = <i className={buildClassName(cn.icon, 'icon-reply-filled')} />;\n  } else if (blobUrl) {\n    content = (\n      <img\n        src={blobUrl}\n        className={buildClassName(cn.img, 'avatar-media', transitionClassNames)}\n        alt=\"\"\n        decoding=\"async\"\n      />\n    );\n  } else if (user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isUserId(chat.id) ? 2 : 1);\n  } else if (text) {\n    content = getFirstLetters(text, 2);\n  }\n\n  const isOnline = !isSavedMessages && user && userStatus && isUserOnline(user, userStatus);\n  const fullClassName = buildClassName(\n    `Avatar size-${size}`,\n    className,\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    isReplies && 'replies-bot-account',\n    isOnline && 'online',\n    onClick && 'interactive',\n    (!isSavedMessages && !blobUrl) && 'no-photo',\n  );\n\n  const hasImage = Boolean(isSavedMessages || blobUrl);\n  const handleClick = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (onClick) {\n      onClick(e, hasImage);\n    }\n  }, [onClick, hasImage]);\n\n  const senderId = (user || chat) && (user || chat)!.id;\n\n  return (\n    <div className={fullClassName} onClick={handleClick} data-test-sender-id={IS_TEST ? senderId : undefined}>\n      {typeof content === 'string' ? renderText(content, [size === 'jumbo' ? 'hq_emoji' : 'emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(Avatar);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport MonkeyIdle from '../../../assets/tgs/monkeys/TwoFactorSetupMonkeyIdle.tgs';\nimport MonkeyTracking from '../../../assets/tgs/monkeys/TwoFactorSetupMonkeyTracking.tgs';\nimport MonkeyClose from '../../../assets/tgs/monkeys/TwoFactorSetupMonkeyClose.tgs';\nimport MonkeyPeek from '../../../assets/tgs/monkeys/TwoFactorSetupMonkeyPeek.tgs';\n\nimport FoldersAll from '../../../assets/tgs/settings/FoldersAll.tgs';\nimport FoldersNew from '../../../assets/tgs/settings/FoldersNew.tgs';\nimport DiscussionGroups from '../../../assets/tgs/settings/DiscussionGroupsDucks.tgs';\n\nimport CameraFlip from '../../../assets/tgs/calls/CameraFlip.tgs';\nimport HandFilled from '../../../assets/tgs/calls/HandFilled.tgs';\nimport HandOutline from '../../../assets/tgs/calls/HandOutline.tgs';\nimport Speaker from '../../../assets/tgs/calls/Speaker.tgs';\nimport VoiceAllowTalk from '../../../assets/tgs/calls/VoiceAllowTalk.tgs';\nimport VoiceMini from '../../../assets/tgs/calls/VoiceMini.tgs';\nimport VoiceMuted from '../../../assets/tgs/calls/VoiceMuted.tgs';\nimport VoiceOutlined from '../../../assets/tgs/calls/VoiceOutlined.tgs';\n\nimport Peach from '../../../assets/tgs/animatedEmojis/Peach.tgs';\nimport Eggplant from '../../../assets/tgs/animatedEmojis/Eggplant.tgs';\nimport Cumshot from '../../../assets/tgs/animatedEmojis/Cumshot.tgs';\n\nimport JoinRequest from '../../../assets/tgs/invites/Requests.tgs';\nimport Invite from '../../../assets/tgs/invites/Invite.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n  CameraFlip,\n  HandFilled,\n  HandOutline,\n  Speaker,\n  VoiceAllowTalk,\n  VoiceMini,\n  VoiceMuted,\n  VoiceOutlined,\n  Peach,\n  Eggplant,\n  Cumshot,\n  JoinRequest,\n  Invite,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Modal from './Modal';\nimport Button from './Button';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  title?: string;\n  header?: FC;\n  textParts?: TextPart[];\n  text?: string;\n  confirmLabel?: string;\n  confirmHandler: () => void;\n  confirmIsDestructive?: boolean;\n  isButtonsInOneRow?: boolean;\n  children?: React.ReactNode;\n};\n\nconst ConfirmDialog: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onCloseAnimationEnd,\n  title,\n  header,\n  text,\n  textParts,\n  confirmLabel = 'Confirm',\n  confirmHandler,\n  confirmIsDestructive,\n  isButtonsInOneRow,\n  children,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className=\"confirm\"\n      title={title}\n      header={header}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {text && text.split('\\\\n').map((textPart) => (\n        <p>{textPart}</p>\n      ))}\n      {textParts || children}\n      <div className={isButtonsInOneRow ? 'dialog-buttons mt-2' : ''} ref={containerRef} onKeyDown={handleKeyDown}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color={confirmIsDestructive ? 'danger' : 'primary'}\n        >\n          {confirmLabel}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ConfirmDialog);\n","import { RefObject, UIEvent } from 'react';\nimport { LoadMoreDirection } from '../../types';\n\nimport React, {\n  FC, useCallback, useEffect, useLayoutEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport resetScroll from '../../util/resetScroll';\nimport { IS_ANDROID } from '../../util/environment';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLDivElement>;\n  className?: string;\n  onLoadMore?: ({ direction }: { direction: LoadMoreDirection; noScroll?: boolean }) => void;\n  onScroll?: (e: UIEvent<HTMLDivElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<any>) => void;\n  items?: any[];\n  itemSelector?: string;\n  preloadBackwards?: number;\n  sensitiveArea?: number;\n  withAbsolutePositioning?: boolean;\n  maxHeight?: number;\n  noScrollRestore?: boolean;\n  noScrollRestoreOnTop?: boolean;\n  noFastList?: boolean;\n  cacheBuster?: any;\n  children: React.ReactNode;\n};\n\nconst DEFAULT_LIST_SELECTOR = '.ListItem';\nconst DEFAULT_PRELOAD_BACKWARDS = 20;\nconst DEFAULT_SENSITIVE_AREA = 800;\n\nconst InfiniteScroll: FC<OwnProps> = ({\n  ref,\n  className,\n  onLoadMore,\n  onScroll,\n  onKeyDown,\n  items,\n  itemSelector = DEFAULT_LIST_SELECTOR,\n  preloadBackwards = DEFAULT_PRELOAD_BACKWARDS,\n  sensitiveArea = DEFAULT_SENSITIVE_AREA,\n  withAbsolutePositioning,\n  maxHeight,\n  // Used to turn off restoring scroll position (e.g. for frequently re-ordered chat or user lists)\n  noScrollRestore = false,\n  noScrollRestoreOnTop = false,\n  noFastList,\n  // Used to re-query `listItemElements` if rendering is delayed by transition\n  cacheBuster,\n  children,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  let containerRef = useRef<HTMLDivElement>(null);\n  if (ref) {\n    containerRef = ref;\n  }\n\n  const stateRef = useRef<{\n    listItemElements?: NodeListOf<HTMLDivElement>;\n    isScrollTopJustUpdated?: boolean;\n    currentAnchor?: HTMLDivElement | undefined;\n    currentAnchorTop?: number;\n  }>({});\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(() => {\n    if (!onLoadMore) {\n      return [];\n    }\n\n    return [\n      debounce((noScroll = false) => {\n        onLoadMore({ direction: LoadMoreDirection.Backwards, noScroll });\n      }, 1000, true, false),\n      debounce(() => {\n        onLoadMore({ direction: LoadMoreDirection.Forwards });\n      }, 1000, true, false),\n    ];\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onLoadMore, items]);\n\n  // Initial preload\n  useEffect(() => {\n    if (!loadMoreBackwards) {\n      return;\n    }\n\n    if (preloadBackwards > 0 && (!items || items.length < preloadBackwards)) {\n      loadMoreBackwards(true);\n      return;\n    }\n\n    const { scrollHeight, clientHeight } = containerRef.current!;\n    if (clientHeight && scrollHeight <= clientHeight) {\n      loadMoreBackwards();\n    }\n  }, [items, loadMoreBackwards, preloadBackwards]);\n\n  // Restore `scrollTop` after adding items\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    const state = stateRef.current;\n\n    state.listItemElements = container.querySelectorAll<HTMLDivElement>(itemSelector);\n\n    let newScrollTop;\n\n    if (state.currentAnchor && Array.from(state.listItemElements).includes(state.currentAnchor)) {\n      const { scrollTop } = container;\n      const newAnchorTop = state.currentAnchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - state.currentAnchorTop!);\n    } else {\n      const nextAnchor = state.listItemElements[0];\n      if (nextAnchor) {\n        state.currentAnchor = nextAnchor;\n        state.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n      }\n    }\n\n    if (withAbsolutePositioning || noScrollRestore) {\n      return;\n    }\n\n    if (noScrollRestoreOnTop && container.scrollTop === 0) {\n      return;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    state.isScrollTopJustUpdated = true;\n  }, [items, itemSelector, noScrollRestore, noScrollRestoreOnTop, cacheBuster, withAbsolutePositioning]);\n\n  const handleScroll = useCallback((e: UIEvent<HTMLDivElement>) => {\n    if (loadMoreForwards && loadMoreBackwards) {\n      const {\n        isScrollTopJustUpdated, currentAnchor, currentAnchorTop,\n      } = stateRef.current;\n      const listItemElements = stateRef.current.listItemElements!;\n\n      if (isScrollTopJustUpdated) {\n        stateRef.current.isScrollTopJustUpdated = false;\n        return;\n      }\n\n      const listLength = listItemElements.length;\n      const container = containerRef.current!;\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const top = listLength ? listItemElements[0].offsetTop : 0;\n      const isNearTop = scrollTop <= top + sensitiveArea;\n      const bottom = listLength\n        ? listItemElements[listLength - 1].offsetTop + listItemElements[listLength - 1].offsetHeight\n        : scrollHeight;\n      const isNearBottom = bottom - (scrollTop + offsetHeight) <= sensitiveArea;\n      let isUpdated = false;\n\n      if (isNearTop) {\n        const nextAnchor = listItemElements[0];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingUp = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop > currentAnchorTop\n          );\n\n          if (isMovingUp) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreForwards();\n          }\n        }\n      }\n\n      if (isNearBottom) {\n        const nextAnchor = listItemElements[listLength - 1];\n        if (nextAnchor) {\n          const nextAnchorTop = nextAnchor.getBoundingClientRect().top;\n          const newAnchorTop = currentAnchor?.offsetParent && currentAnchor !== nextAnchor\n            ? currentAnchor.getBoundingClientRect().top\n            : nextAnchorTop;\n          const isMovingDown = (\n            currentAnchor && currentAnchorTop !== undefined && newAnchorTop < currentAnchorTop\n          );\n\n          if (isMovingDown) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchorTop;\n            isUpdated = true;\n            loadMoreBackwards();\n          }\n        }\n      }\n\n      if (!isUpdated) {\n        if (currentAnchor?.offsetParent) {\n          stateRef.current.currentAnchorTop = currentAnchor.getBoundingClientRect().top;\n        } else {\n          const nextAnchor = listItemElements[0];\n\n          if (nextAnchor) {\n            stateRef.current.currentAnchor = nextAnchor;\n            stateRef.current.currentAnchorTop = nextAnchor.getBoundingClientRect().top;\n          }\n        }\n      }\n    }\n\n    if (onScroll) {\n      onScroll(e);\n    }\n  }, [loadMoreBackwards, loadMoreForwards, onScroll, sensitiveArea]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      teactFastList={!noFastList && !withAbsolutePositioning}\n      onKeyDown={onKeyDown}\n    >\n      {withAbsolutePositioning && items?.length ? (\n        <div\n          teactFastList={!noFastList}\n          style={`position: relative;${IS_ANDROID ? ` height: ${maxHeight}px;` : undefined}`}\n        >\n          {children}\n        </div>\n      ) : children}\n    </div>\n  );\n};\n\nexport default InfiniteScroll;\n","import { RefObject } from 'react';\nimport React, {\n  FC, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport { TextPart } from '../common/helpers/renderMessageText';\n\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport trapFocus from '../../util/trapFocus';\nimport buildClassName from '../../util/buildClassName';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from './Button';\nimport Portal from './Portal';\n\nimport './Modal.scss';\n\nconst ANIMATION_DURATION = 200;\n\ntype OwnProps = {\n  title?: string | TextPart[];\n  className?: string;\n  isOpen?: boolean;\n  header?: any;\n  hasCloseButton?: boolean;\n  noBackdrop?: boolean;\n  children: React.ReactNode;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onEnter?: () => void;\n  dialogRef?: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst Modal: FC<OwnProps & StateProps> = ({\n  dialogRef,\n  title,\n  className,\n  isOpen,\n  header,\n  hasCloseButton,\n  noBackdrop,\n  children,\n  onClose,\n  onCloseAnimationEnd,\n  onEnter,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(\n    isOpen, onCloseAnimationEnd, shouldSkipHistoryAnimations, undefined, shouldSkipHistoryAnimations,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => (isOpen\n    ? captureKeyboardListeners({ onEsc: onClose, onEnter })\n    : undefined), [isOpen, onClose, onEnter]);\n  useEffect(() => (isOpen && modalRef.current ? trapFocus(modalRef.current) : undefined), [isOpen]);\n\n  const { forceClose } = useHistoryBack(isOpen, onClose);\n\n  // For modals that are closed by unmounting without changing `isOpen` to `false`\n  useEffect(() => {\n    return () => {\n      if (isOpen) {\n        forceClose();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    document.body.classList.toggle('has-open-dialog', isOpen);\n    if (isOpen || (!isOpen && prevIsOpen !== undefined)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION);\n    }\n\n    return () => {\n      document.body.classList.remove('has-open-dialog');\n    };\n  }, [isOpen]);\n\n  const lang = useLang();\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    if (header) {\n      return header;\n    }\n\n    if (!title) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        {hasCloseButton && (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <div className=\"modal-title\">{title}</div>\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'Modal',\n    className,\n    transitionClassNames,\n    noBackdrop && 'transparent-backdrop',\n  );\n\n  return (\n    <Portal>\n      <div\n        ref={modalRef}\n        className={fullClassName}\n        tabIndex={-1}\n        role=\"dialog\"\n      >\n        <div className=\"modal-container\">\n          <div className=\"modal-backdrop\" onClick={onClose} />\n          <div className=\"modal-dialog\" ref={dialogRef}>\n            {renderHeader()}\n            <div className=\"modal-content custom-scroll\">\n              {children}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Portal>\n  );\n};\n\nexport default Modal;\n","export default function trapFocus(element: HTMLElement) {\n  function handleKeyDown(e: KeyboardEvent) {\n    if (e.key !== 'Tab') {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n\n    const focusableElements = Array.from(\n      element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'),\n    ) as HTMLElement[];\n    if (!focusableElements.length) {\n      return;\n    }\n\n    const currentFocusedIndex = focusableElements.findIndex((em) => em.isSameNode(document.activeElement));\n    let newFocusedIndex = 0;\n    if (currentFocusedIndex >= 0) {\n      if (e.shiftKey) {\n        newFocusedIndex = currentFocusedIndex > 0\n          ? currentFocusedIndex - 1\n          : focusableElements.length - 1;\n      } else {\n        newFocusedIndex = currentFocusedIndex < focusableElements.length - 1\n          ? currentFocusedIndex + 1\n          : 0;\n      }\n    }\n\n    focusableElements[newFocusedIndex].focus();\n  }\n\n  document.addEventListener('keydown', handleKeyDown, false);\n\n  return () => {\n    document.removeEventListener('keydown', handleKeyDown, false);\n  };\n}\n","import {\n  FC, useRef, useLayoutEffect, VirtualElement,\n} from '../../lib/teact/teact';\nimport TeactDOM from '../../lib/teact/teact-dom';\n\ntype OwnProps = {\n  containerId?: string;\n  className?: string;\n  children: React.ReactNode;\n};\n\nconst Portal: FC<OwnProps> = ({ containerId, className, children }) => {\n  const elementRef = useRef<HTMLDivElement>();\n  if (!elementRef.current) {\n    elementRef.current = document.createElement('div');\n  }\n\n  useLayoutEffect(() => {\n    const container = document.querySelector<HTMLDivElement>(containerId || '#portals');\n    if (!container) {\n      return undefined;\n    }\n\n    const element = elementRef.current!;\n    if (className) {\n      element.classList.add(className);\n    }\n\n    container.appendChild(element);\n\n    return () => {\n      TeactDOM.render(undefined, element);\n      container.removeChild(element);\n    };\n  }, [className, containerId]);\n\n  return TeactDOM.render(children as VirtualElement, elementRef.current);\n};\n\nexport default Portal;\n","import { useEffect } from '../lib/teact/teact';\n\nexport default function useBackgroundMode(\n  onBlur?: AnyToVoidFunction,\n  onFocus?: AnyToVoidFunction,\n) {\n  useEffect(() => {\n    if (onBlur && !document.hasFocus()) {\n      onBlur();\n    }\n\n    if (onBlur) {\n      window.addEventListener('blur', onBlur);\n    }\n\n    if (onFocus) {\n      window.addEventListener('focus', onFocus);\n    }\n\n    return () => {\n      if (onFocus) {\n        window.removeEventListener('focus', onFocus);\n      }\n\n      if (onBlur) {\n        window.removeEventListener('blur', onBlur);\n      }\n    };\n  }, [onBlur, onFocus]);\n}\n","import usePrevious from './usePrevious';\n\nexport default function useCurrentOrPrev<T extends any>(\n  current: T, shouldSkipUndefined = false, shouldForceCurrent = false,\n): T | undefined {\n  const prev = usePrevious(current, shouldSkipUndefined);\n\n  // eslint-disable-next-line no-null/no-null\n  return shouldForceCurrent || (current !== null && current !== undefined) ? current : prev;\n}\n","import { useCallback, useRef } from '../lib/teact/teact';\nimport { LoadMoreDirection } from '../types';\n\nimport { areSortedArraysEqual } from '../util/iteratees';\nimport useForceUpdate from './useForceUpdate';\nimport usePrevious from './usePrevious';\n\ntype GetMore = (args: { direction: LoadMoreDirection }) => void;\ntype LoadMoreBackwards = (args: { offsetId?: string | number }) => void;\n\nconst DEFAULT_LIST_SLICE = 30;\n\nconst useInfiniteScroll = <ListId extends string | number>(\n  loadMoreBackwards?: LoadMoreBackwards,\n  listIds?: ListId[],\n  isDisabled = false,\n  listSlice = DEFAULT_LIST_SLICE,\n): [ListId[]?, GetMore?] => {\n  const lastParamsRef = useRef<{\n    direction?: LoadMoreDirection;\n    offsetId?: ListId;\n  }>();\n\n  const viewportIdsRef = useRef<ListId[] | undefined>((() => {\n    // Only run once to initialize\n    if (!listIds || lastParamsRef.current) {\n      return undefined;\n    }\n\n    const { newViewportIds } = getViewportSlice(listIds, LoadMoreDirection.Forwards, listSlice, listIds[0]);\n    return newViewportIds;\n  })());\n\n  const forceUpdate = useForceUpdate();\n\n  if (isDisabled) {\n    lastParamsRef.current = {};\n  }\n\n  const prevListIds = usePrevious(listIds);\n  const prevIsDisabled = usePrevious(isDisabled);\n  if (listIds && !isDisabled && (listIds !== prevListIds || isDisabled !== prevIsDisabled)) {\n    const { offsetId = listIds[0], direction = LoadMoreDirection.Forwards } = lastParamsRef.current || {};\n    const { newViewportIds } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (!viewportIdsRef.current || !areSortedArraysEqual(viewportIdsRef.current, newViewportIds)) {\n      viewportIdsRef.current = newViewportIds;\n    }\n  }\n\n  const getMore: GetMore = useCallback(({\n    direction,\n    noScroll,\n  }: { direction: LoadMoreDirection; noScroll?: boolean }) => {\n    const viewportIds = viewportIdsRef.current;\n\n    const offsetId = viewportIds\n      ? direction === LoadMoreDirection.Backwards ? viewportIds[viewportIds.length - 1] : viewportIds[0]\n      : undefined;\n\n    if (!listIds) {\n      if (loadMoreBackwards) {\n        loadMoreBackwards({ offsetId });\n      }\n\n      return;\n    }\n\n    if (!noScroll) {\n      lastParamsRef.current = { ...lastParamsRef.current, direction, offsetId };\n    }\n\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(listIds, direction, listSlice, offsetId);\n\n    if (areSomeLocal && !(viewportIds && areSortedArraysEqual(viewportIds, newViewportIds))) {\n      viewportIdsRef.current = newViewportIds;\n      forceUpdate();\n    }\n\n    if (!areAllLocal && loadMoreBackwards) {\n      loadMoreBackwards({ offsetId });\n    }\n  }, [listIds, listSlice, loadMoreBackwards, forceUpdate]);\n\n  return isDisabled ? [listIds] : [viewportIdsRef.current, getMore];\n};\n\nfunction getViewportSlice<ListId extends string | number>(\n  sourceIds: ListId[],\n  direction: LoadMoreDirection,\n  listSlice: number,\n  offsetId?: ListId,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? sourceIds.indexOf(offsetId) : 0;\n  const isForwards = direction === LoadMoreDirection.Forwards;\n  const indexForDirection = isForwards ? index : (index + 1) || length;\n  const from = Math.max(0, indexForDirection - listSlice);\n  const to = indexForDirection + listSlice - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport default useInfiniteScroll;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { ApiMediaFormat } from '../api/types';\n\nimport * as mediaLoader from '../util/mediaLoader';\nimport useForceUpdate from './useForceUpdate';\n\nconst useMedia = (\n  mediaHash: string | false | undefined,\n  noLoad = false,\n  mediaFormat = ApiMediaFormat.BlobUrl,\n  cacheBuster?: number,\n  delay?: number | false,\n) => {\n  const mediaData = mediaHash ? mediaLoader.getFromMemory(mediaHash) : undefined;\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (!noLoad && mediaHash && !mediaData) {\n      const startedAt = Date.now();\n\n      mediaLoader.fetch(mediaHash, mediaFormat).then(() => {\n        const spentTime = Date.now() - startedAt;\n        if (!delay || spentTime >= delay) {\n          forceUpdate();\n        } else {\n          setTimeout(forceUpdate, delay - spentTime);\n        }\n      });\n    }\n  }, [noLoad, mediaHash, mediaData, mediaFormat, cacheBuster, forceUpdate, delay]);\n\n  return mediaData;\n};\n\nexport default useMedia;\n","// Used before applying CSS transition\nexport default function forceReflow(element: HTMLElement) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  element.offsetWidth;\n}\n","import { IS_IOS } from './environment';\nimport forceReflow from './forceReflow';\n\nconst resetScroll = (container: HTMLDivElement, scrollTop?: number) => {\n  if (IS_IOS) {\n    container.style.overflow = 'hidden';\n  }\n\n  if (scrollTop !== undefined) {\n    container.scrollTop = scrollTop;\n  }\n\n  if (IS_IOS) {\n    container.style.overflow = '';\n  }\n};\n\n// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1264266\nexport function patchChromiumScroll(element: HTMLElement) {\n  element.style.display = 'none';\n  forceReflow(element);\n  element.style.display = '';\n}\n\nexport default resetScroll;\n","import { DEBUG } from '../config';\n\nconst safePlay = (mediaEl: HTMLMediaElement) => {\n  mediaEl.play().catch((err) => {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(err, mediaEl);\n    }\n  });\n};\n\nexport default safePlay;\n"],"names":["lottiePromise","RLottie","async","ensureLottie","default","setTimeout","memo","className","id","animationData","play","playSegment","speed","noLoop","size","quality","isLowPriority","color","forceOnHeavyAnimation","onLoad","onEnded","animation","setAnimation","useState","container","useRef","wasPlaying","isFrozen","isFirstRender","playRef","current","playSegmentRef","useEffect","exec","newAnimation","setSpeed","then","fastRaf","setColor","destroy","playAnimation","useCallback","shouldRestart","goToAndPlay","pauseAnimation","pause","freezeAnimation","isPlaying","unfreezeAnimation","unfreezeAnimationOnRaf","changeData","useHeavyAnimationCheck","useBackgroundMode","fullClassName","buildClassName","style","undefined","ref","cn","createClassNameBuilder","img","icon","chat","user","photo","userStatus","text","isSavedMessages","lastSyncTime","onClick","isDeleted","isDeletedUser","isReplies","isChatWithRepliesBot","imageHash","getChatAvatarHash","blobUrl","useMedia","ApiMediaFormat","hasBlobUrl","Boolean","transitionClassNames","useShowTransition","lang","useLang","content","src","alt","decoding","userFullName","getUserFullName","getFirstLetters","title","getChatTitle","isUserId","isOnline","isUserOnline","getUserColorKey","hasImage","handleClick","e","senderId","IS_TEST","renderText","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","CameraFlip","HandFilled","HandOutline","Speaker","VoiceAllowTalk","VoiceMini","VoiceMuted","VoiceOutlined","Peach","Eggplant","Cumshot","JoinRequest","Invite","getAnimationData","name","path","replace","window","location","origin","mediaLoader","isOpen","onClose","onCloseAnimationEnd","header","textParts","confirmLabel","confirmHandler","confirmIsDestructive","isButtonsInOneRow","children","containerRef","handleSelectWithEnter","index","handleKeyDown","useKeyboardListNavigation","split","map","textPart","onKeyDown","isText","DEFAULT_LIST_SELECTOR","DEFAULT_PRELOAD_BACKWARDS","DEFAULT_SENSITIVE_AREA","onLoadMore","onScroll","items","itemSelector","preloadBackwards","sensitiveArea","withAbsolutePositioning","maxHeight","noScrollRestore","noScrollRestoreOnTop","noFastList","cacheBuster","stateRef","loadMoreBackwards","loadMoreForwards","useMemo","debounce","noScroll","direction","LoadMoreDirection","length","scrollHeight","clientHeight","useLayoutEffect","state","newScrollTop","listItemElements","querySelectorAll","currentAnchor","Array","from","includes","scrollTop","getBoundingClientRect","top","currentAnchorTop","nextAnchor","resetScroll","isScrollTopJustUpdated","handleScroll","listLength","offsetHeight","isNearTop","offsetTop","isNearBottom","isUpdated","nextAnchorTop","newAnchorTop","offsetParent","teactFastList","IS_ANDROID","dialogRef","hasCloseButton","noBackdrop","onEnter","shouldSkipHistoryAnimations","shouldRender","modalRef","captureKeyboardListeners","onEsc","element","key","preventDefault","stopPropagation","focusableElements","currentFocusedIndex","findIndex","em","isSameNode","document","activeElement","newFocusedIndex","shiftKey","focus","addEventListener","removeEventListener","trapFocus","forceClose","useHistoryBack","useEffectWithPrevDeps","prevIsOpen","body","classList","toggle","dispatchHeavyAnimationEvent","remove","Portal","tabIndex","role","Button","round","ariaLabel","containerId","elementRef","createElement","querySelector","add","appendChild","TeactDOM","removeChild","onBlur","onFocus","hasFocus","useCurrentOrPrev","shouldSkipUndefined","shouldForceCurrent","prev","usePrevious","getViewportSlice","sourceIds","listSlice","offsetId","indexOf","indexForDirection","Math","max","to","newViewportIds","slice","areSomeLocal","areAllLocal","listIds","isDisabled","lastParamsRef","viewportIdsRef","forceUpdate","useForceUpdate","prevListIds","prevIsDisabled","areSortedArraysEqual","getMore","viewportIds","mediaHash","noLoad","mediaFormat","delay","mediaData","startedAt","Date","now","spentTime","forceReflow","offsetWidth","patchChromiumScroll","display","IS_IOS","overflow","mediaEl","catch","err","DEBUG","console","warn"],"sourceRoot":""}