{"version":3,"file":"3779.41545ed2fac971ffd54c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.module.scss?a2dc","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewReactions.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }, [avatarOwner, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName('playback-rate-menu', !isFullscreenSupported && 'no-fullscreen')}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  isProtected,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList={isProtected ? 'nodownload' : undefined}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n  } = props;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    localBlobUrl,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n    pictogramBlobUrl,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(dimensions, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={localBlobUrl || fullMediaBlobUrl}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            volume={0}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isProtected={isProtected}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current.scale,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatMediaMessageIds,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    bestImageData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n    fullMediaBlobUrl,\n    previewBlobUrl,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) return;\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, mediaId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    close();\n  }) : undefined), [close, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={avatarOwner.id}\n        chatId={avatarOwner.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition id=\"MediaViewer\" isOpen={isOpen}>\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={Boolean(avatarOwner)}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={close}\n        selectMedia={selectMedia}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((filter && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n    resetSwitchBotInline();\n  }, [exitForwardMode, resetSwitchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachMenuBot, ApiChat, ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { TME_LINK_PREFIX } from '../../config';\nimport { selectCurrentChat, selectTheme, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachMenuBot?: ApiAttachMenuBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: GlobalState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachMenuBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleBotInAttachMenu,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen,\n  ]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot!.id,\n      isEnabled: !attachMenuBot,\n    });\n  }, [bot, attachMenuBot, toggleBotInAttachMenu]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachMenuBot && (\n            <MenuItem\n              icon={attachMenuBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachMenuBot)}\n            >\n              {lang(attachMenuBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachMenuBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachMenuBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachMenuBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = global.payment;\n\n    return {\n      attachMenuBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst BotAttachModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { closeBotAttachRequestModal, confirmBotAttachRequest } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={closeBotAttachRequestModal}\n      confirmHandler={confirmBotAttachRequest}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default BotAttachModal;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\nimport safePlay from '../../../../util/safePlay';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n\n    if (isActive) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isActive]);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <video\n          ref={videoRef}\n          className={buildClassName(\n            styles.video,\n            transitionClassNames,\n          )}\n          src={mediaData}\n          autoPlay={isActive}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lSI7Gb2It7nFGpBE4IFs\",\"sticker\":\"sbJjdz4IEwYhlti5MyPA\",\"effect-sticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\",\"effectSticker\":\"bIR5UZpxiCoHBe0ZmtIn sbJjdz4IEwYhlti5MyPA\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiAvailableReaction } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useInterval from '../../../../hooks/useInterval';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewReactions.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  availableReactions: GlobalState['availableReactions'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.2;\nconst EFFECT_SIZE_MULTIPLIER = 0.6;\nconst ROTATE_INTERVAL = 3000;\nconst CLICK_DELAY = 4000;\nconst MAX_EMOJIS = 15;\n\nconst AnimatedCircleReaction: FC<{\n  size: number;\n  realIndex: number;\n  reaction: ApiAvailableReaction;\n  index: number;\n  maxLength: number;\n  handleClick: (index: number) => void;\n  isActivated: boolean;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, isActivated, canPlay,\n  reaction, index, maxLength, handleClick,\n}) => {\n  const mediaData = useMedia(`document${reaction.activateAnimation?.id}`);\n  const mediaDataAround = useMedia(`document${reaction.aroundAnimation?.id}`);\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n  const [isEffectEnded, markEffectEnded, unmarkEffectEnded] = useFlag(false);\n\n  const circleSize = (size - size * EMOJI_SIZE_MULTIPLIER) / 2;\n\n  const t = index / maxLength;\n  const angle = t * (Math.PI * 2);\n  const totalAngle = angle - (Math.PI / 6) * Math.cos(angle);\n  const scaleNotFull = 0.2 + (0.7 * (Math.sin(totalAngle) + 1)) / 2;\n  const scale = scaleNotFull > 0.85 ? 1 : scaleNotFull;\n\n  const x = Math.cos(totalAngle) * circleSize;\n  const y = Math.sin(totalAngle) * circleSize * 0.6;\n\n  const handleClickEmoji = useCallback(() => {\n    handleClick(realIndex);\n  }, [handleClick, realIndex]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n      unmarkEffectEnded();\n    }\n  }, [isActivated, animate, unmarkEffectEnded]);\n\n  return (\n    <>\n      {isActivated && !isEffectEnded && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n          onEnded={markEffectEnded}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        onClick={handleClickEmoji}\n        play={isAnimated && canPlay}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --scale: ${scale};`}\n        onEnded={inanimate}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewReactions: FC<OwnProps & StateProps> = ({\n  availableReactions, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isIntervalPaused, pauseInterval, unpauseInterval] = useFlag();\n  const lastUnpauseTimeout = useRef<NodeJS.Timeout>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedReactions = availableReactions?.filter((l) => l.isPremium)?.slice(0, MAX_EMOJIS) || [];\n\n  useInterval(() => {\n    setOffset((current) => cycleRestrict(renderedReactions.length, current + 1));\n  }, isIntervalPaused || !isActive ? undefined : ROTATE_INTERVAL);\n\n  const handleClickEmoji = useCallback((i: number) => {\n    setOffset(i);\n    pauseInterval();\n    if (lastUnpauseTimeout.current) clearTimeout(lastUnpauseTimeout.current);\n    lastUnpauseTimeout.current = setTimeout(() => {\n      unpauseInterval();\n    }, CLICK_DELAY);\n  }, [pauseInterval, unpauseInterval]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedReactions.map((l, i) => {\n        return (\n          <AnimatedCircleReaction\n            size={size}\n            reaction={l}\n            realIndex={i}\n            index={(i - offset + renderedReactions.length / 4) % renderedReactions.length}\n            maxLength={renderedReactions.length}\n            handleClick={handleClickEmoji}\n            isActivated={offset === i}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      availableReactions: global.availableReactions,\n    };\n  },\n)(PremiumFeaturePreviewReactions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport PremiumFeaturePreviewReactions from './previews/PremiumFeaturePreviewReactions';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  unique_reactions: 'PremiumPreviewReactions',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  unique_reactions: 'PremiumPreviewReactionsDescription',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'unique_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          if (section === 'unique_reactions') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewReactions isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.unique_reactions)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.unique_reactions), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  unique_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(promo.monthlyAmount), promo.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    promo: global.premiumModal?.promo,\n    isClosing: global.premiumModal?.isClosing,\n    isSuccess: global.premiumModal?.isSuccess,\n    isGift: global.premiumModal?.isGift,\n    monthsAmount: global.premiumModal?.monthsAmount,\n    fromUser: global.premiumModal?.fromUserId ? selectUser(global, global.premiumModal.fromUserId) : undefined,\n    toUser: global.premiumModal?.toUserId ? selectUser(global, global.premiumModal.toUserId) : undefined,\n    initialSection: global.premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {discount && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen, user, gifts, monthlyCurrency, monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = global.giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description, ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isForwardModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  isForwardModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isForwardModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode, isForwardModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = global.forwardMessages.isModalShown;\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isForwardModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport PremiumIcon from '../common/PremiumIcon';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"small\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                      {user.isPremium && <PremiumIcon />}\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {privateChatUser?.isPremium && <PremiumIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? TME_LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    e.currentTarget.value = e.currentTarget.value.replace(/\\n/, '');\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  maxBioLength,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n      maxBioLength,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!state.orderedFolderIds) {\n      return undefined;\n    }\n\n    if (state.orderedFolderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return state.orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [state.orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !inRange(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {folder.title}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n\nfunction inRange(x: number, min: number, max: number) {\n  return x >= min && x <= max;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen, session, bot, onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" />\n      <h3 className={styles.title} dir=\"auto\">{getUserFullName(renderingBot)}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"date\":\"n6IYAeXnJBCHqpqItrnY\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{getUserFullName(bot)}</span>\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} noVideo />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isPremium?: boolean;\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  isPremium,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => (\n    !(l.isInactive || (!isPremium && l.isPremium))\n  )).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n      isPremium,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay disablePictureInPicture />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCoverAnimated from '../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  const preview = useMemo(() => {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }, [firstSticker, lang.isRtl, observeIntersection, stickerSet]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {preview}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  onReset,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <div ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady, isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isCurrentUserPremium && 'premium',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          className={cn('animated', [animatedClassNames])}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\nimport Button from '../../ui/Button';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n  canBuyPremium,\n  isCurrentUserPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive || (reaction.isPremium && !isCurrentUserPremium)\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            );\n          })}\n          {canBuyPremium && Boolean(\n            availableReactions\n              .filter((r) => r.isPremium && (!enabledReactions || enabledReactions.includes(r.reaction)))\n              .length,\n          ) && (\n            <Button\n              round\n              color=\"translucent\"\n              className={cn('blocked-button')}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openPremiumModal({\n                initialSection: 'unique_reactions',\n              })}\n            >\n              <i className=\"icon-lock-badge\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onSendReaction?: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction!(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                  noVideo\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList, selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID, TME_LINK_PREFIX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`${TME_LINK_PREFIX}${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !renderingStickerSet?.installedDate && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      renderingStickerSet.installedDate ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {renderingStickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={renderingStickerSet.installedDate ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot, selectIsPremiumPurchaseBlocked,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  captionLimit: number;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  const leftChars = (captionLimit - caption.length) <= 100 ? captionLimit - caption.length : undefined;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop disablePictureInPicture />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n            captionLimit={leftChars}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst EMOJI_PER_ROW_ON_DESKTOP = 8;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst EMOJI_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 10;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  isCurrentUserPremium,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isExpanded, expand] = useFlag(!stickerSet.isEmoji);\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const isEmoji = stickerSet.isEmoji;\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const isLocked = !isSavedMessages && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some((l) => !l.isFree);\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const itemsPerRow = isEmoji ? EMOJI_PER_ROW_ON_DESKTOP : STICKERS_PER_ROW_ON_DESKTOP;\n  const margin = isEmoji ? EMOJI_MARGIN : STICKER_MARGIN;\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (itemSize + margin))\n    : itemsPerRow;\n\n  const shouldCutSet = isEmoji && !isExpanded && !stickerSet.installedDate && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const itemsBeforeCutout = shouldCutSet ? stickersPerRow * 3 : Infinity;\n  const height = Math.ceil((\n    !shouldCutSet ? stickerSet.count : Math.min(itemsBeforeCutout, stickerSet.count))\n    / stickersPerRow) * (itemSize + margin);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">\n          {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n          {stickerSet.title}\n        </p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, !isExpanded ? (itemsBeforeCutout - 1) : stickerSet.stickers.length)\n          .map((sticker) => (\n            <StickerButton\n              key={sticker.id}\n              sticker={sticker}\n              size={itemSize}\n              observeIntersection={observeIntersection}\n              noAnimate={!loadAndPlay}\n              onClick={onStickerSelect}\n              clickArg={sticker}\n              onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n                ? onStickerUnfave : undefined}\n              onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n              onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              isSavedMessages={isSavedMessages}\n              canViewSet\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          ))}\n        {!isExpanded && stickerSet.count > itemsBeforeCutout - 1 && (\n          <Button className=\"StickerButton custom-emoji set-expand\" round color=\"translucent\" onClick={expand}>\n            +{stickerSet.count - itemsBeforeCutout + 1}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map((l) => l.stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" noVideo />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n          isCurrentUserPremium\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} noVideo />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(global.openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n  isChannelsPremiumLimitReached: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  isChannelsPremiumLimitReached,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n      isChannelsPremiumLimitReached: global.limitReachedModal?.limit === 'channels',\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n  maxPublicLinks,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId).filter((l) => l.isCreator && l.username);\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions || []);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter((l) => !l.isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableActiveReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableActiveReactions?.map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"checkout-info-item\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkoutInfoItem\":\"gLWXe4qIIINtZ3q9CmIX\",\"checkout-info-item-icon\":\"YqZr6__8x50n06_r2wD8\",\"checkoutInfoItemIcon\":\"YqZr6__8x50n06_r2wD8\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiWebDocument } from '../../api/types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photo?: ApiWebDocument;\n    isRecurring?: boolean;\n    recurringTermsUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  onAcceptTos?: (isAccepted: boolean) => void;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  onAcceptTos,\n}) => {\n  const lang = useLang();\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl,\n  } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text=\"\"\n          isRtl={isRtl}\n        >\n          {langStringSplit[1]}\n        </SafeLink>\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className={styles.checkoutInfoItem}>\n      <i className={buildClassName(icon, styles.checkoutInfoItemIcon)}> </i>\n      <div className={styles.checkoutInfoItemInfo}>\n        <div className={styles.checkoutInfoItemInfoTitle}>\n          {title}\n        </div>\n        <p className={styles.checkoutInfoItemInfoData}>\n          {data}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            tabIndex={0}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const { closePaymentModal, openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closePaymentModal();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [closePaymentModal, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiChat, ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        validateRequest();\n        break;\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.PaymentInfo);\n        break;\n      case PaymentStep.PaymentInfo:\n        sendCredentials();\n        break;\n      case PaymentStep.Checkout:\n        sendForm();\n        break;\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n  }, [paymentDispatch]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  const isSubmitDisabled = isLoading\n    || Boolean(step === PaymentStep.Checkout && invoiceContent?.isRecurring && !isTosAccepted);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoiceContent?.isRecurring && 'recurring')}\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n    } = global.payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photo,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","video","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","downloadProgress","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","muted","onPlay","onEnded","onTimeUpdate","join","square","ownProps","chatId","threadId","avatarOwnerId","mediaViewer","selectChatMessage","senderId","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","selectMedia","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","type","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","target","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","close","handleFooterClick","handleForward","fromChatId","messageIds","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","useHistoryBack","onBack","ShowTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","isShown","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","handleClose","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","action","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","webApp","attachMenuBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleBotInAttachMenu","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","buttonText","queryId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","err","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachMenuBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","closeBotAttachRequestModal","confirmBotAttachRequest","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","disablePictureInPicture","AnimatedCircleReaction","realIndex","isActivated","canPlay","reaction","maxLength","handleClick","activateAnimation","mediaDataAround","aroundAnimation","isAnimated","animate","inanimate","isEffectEnded","markEffectEnded","unmarkEffectEnded","circleSize","angle","PI","totalAngle","cos","scaleNotFull","sin","handleClickEmoji","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","availableReactions","isIntervalPaused","pauseInterval","unpauseInterval","lastUnpauseTimeout","setOffset","setSize","renderedReactions","l","isPremium","slice","cycleRestrict","clientWidth","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","sticker","stickers","premium","renderedStickers","PREMIUM_FEATURE_TITLES","double_limits","unique_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","then","handleSelectSlide","async","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","monthlyAmount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","startParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","option","fullMonthlyAmount","months","amount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","giftPremiumModal","gifts","fullInfo","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","reduce","acc","gift","selectedGift","find","botUrl","handlePremiumClick","getUserFirstOrLastName","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","isForwardModalOpen","forwardMessages","isModalShown","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","ReactionStaticEmoji","fullName","PremiumIcon","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","leftElement","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","textareaRef","labelText","fullClassName","textarea","htmlFor","ERROR_FIRST_NAME_MISSING","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","ZERO_POINT","children","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","draggedIndex","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","splice","handleDragEnd","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","isDragged","draggedTop","narrow","inactive","multiline","isStatic","secondaryIcon","handler","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","options","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","noVideo","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","selectedReaction","defaultReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","firstSticker","handleCardClick","preview","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","stickerSetInfo","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","values","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","r","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","noReactions","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","shortName","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","loadStickers","cancelPollVote","closePoll","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isEmoji","isButtonLocked","installedDate","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","openGiftPremiumModal","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","captionLimit","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","leftChars","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","EMOJI_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","expand","handleClearRecent","isLocked","isFree","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","itemsPerRow","stickersPerRow","shouldCutSet","itemsBeforeCutout","Infinity","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","premiumSet","recentStickers","premiumStickers","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","existingAddedSetIds","pickTruthy","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","PREMIUM_STICKER_SET_ID","fullSet","CHAT_STICKER_SET_ID","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isAdded","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleAddClick","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","isChannelsPremiumLimitReached","limitReachedModal","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","maxPublicLinks","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","radioGroup","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","availableActiveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","isRecurring","recurringTermsUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","forceAspectRatio","langStringSplit","renderTosLink","endsWith","formatCardExpiry","teactExperimentControlled","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","closePaymentModal","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","setIsTosAccepted","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","handleModalClose","isSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","labelClassName","accept"],"sourceRoot":""}