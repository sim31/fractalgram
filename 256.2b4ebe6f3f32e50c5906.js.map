{"version":3,"file":"256.2b4ebe6f3f32e50c5906.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/modules/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/UserReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../../global/types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddReducer('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddReducer('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] } ) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(getMessageSummaryText(lang, message, false, 0, undefined, true) + '\\n');\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateUserSearch } from '../../reducers';\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('requestNextManagementScreen', (global, actions, payload): GlobalState | undefined => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      const id = addedSetIds[i];\n      if (cached[id].stickers) {\n        continue; // Already loaded\n      }\n      actions.loadStickers({ stickerSetId: id });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddReducer('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddReducer('loadExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('fetchExportedChatInvites', {\n      peer, admin, isRevoked, limit,\n    });\n    if (!result) {\n      return;\n    }\n    const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n    setGlobal(updateManagement(getGlobal(), chatId, update));\n  })();\n});\n\naddReducer('editExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('editExportedChatInvite', {\n      peer,\n      link,\n      isRevoked,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    let invites = global.management.byChatId[chatId].invites || [];\n    const revokedInvites = global.management.byChatId[chatId].revokedInvites || [];\n    const { oldInvite, newInvite } = result;\n    invites = invites.filter((current) => current.link !== oldInvite.link);\n    if (newInvite.isRevoked) {\n      revokedInvites.unshift(newInvite);\n    } else {\n      invites.push(newInvite);\n    }\n    setGlobal(updateManagement(global, chatId, {\n      invites,\n      revokedInvites,\n    }));\n  })();\n});\n\naddReducer('exportChatInvite', (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('exportChatInvite', {\n      peer,\n      expireDate,\n      usageLimit,\n      isRequestNeeded,\n      title,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const invites = global.management.byChatId[chatId].invites || [];\n    setGlobal(updateManagement(global, chatId, {\n      invites: [...invites, result],\n    }));\n  })();\n});\n\naddReducer('deleteExportedChatInvite', (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('deleteExportedChatInvite', {\n      peer,\n      link,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const managementState = global.management.byChatId[chatId];\n    setGlobal(updateManagement(global, chatId, {\n      invites: managementState?.invites?.filter((invite) => invite.link !== link),\n      revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n    }));\n  })();\n});\n\naddReducer('deleteRevokedExportedChatInvites', (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  (async () => {\n    const result = await callApi('deleteRevokedExportedChatInvites', {\n      peer,\n      admin,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateManagement(global, chatId, {\n      revokedInvites: [],\n    }));\n  })();\n});\n\naddReducer('loadChatInviteImporters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        importers: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatInviteRequesters', (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      link,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n    if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) return;\n    setGlobal(updateManagement(global, chatId, {\n      inviteInfo: {\n        ...currentInviteInfo,\n        requesters: result,\n      },\n    }));\n  })();\n});\n\naddReducer('loadChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  (async () => {\n    const result = await callApi('fetchChatInviteImporters', {\n      peer,\n      offsetDate,\n      offsetUser,\n      limit,\n      isRequested: true,\n    });\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    setGlobal(updateChat(global, chatId, { joinRequests: result }));\n  })();\n});\n\naddReducer('hideChatJoinRequest', (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  (async () => {\n    const result = await callApi('hideChatJoinRequest', {\n      peer,\n      user,\n      isApproved,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n    }));\n  })();\n});\n\naddReducer('hideAllChatJoinRequests', (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  (async () => {\n    const result = await callApi('hideAllChatJoinRequests', {\n      peer,\n      isApproved,\n      link,\n    });\n\n    if (!result) return;\n    global = getGlobal();\n    const targetChat = selectChat(global, chatId);\n    if (!targetChat) return;\n\n    setGlobal(updateChat(global, chatId, {\n      joinRequests: [],\n      fullInfo: {\n        ...targetChat.fullInfo,\n        recentRequesterIds: [],\n        requestsPending: 0,\n      },\n    }));\n  })();\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddReducer('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getDispatch();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\naddReducer('reportSpam', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('reportSpam', user);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('startActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return global;\n\n  if (global.activeReactions[messageId]?.reaction === reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: {\n      ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n      ...(reaction && {\n        [messageId]: {\n          reaction,\n          messageId,\n        },\n      }),\n    },\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddReducer('loadStatistics', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchStatistics', { chat });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n\n    if (result?.recentTopMessages.length) {\n      const messages = selectChatMessages(global, chatId);\n\n      result.recentTopMessages = result.recentTopMessages\n        .map((message) => ({ ...message, ...messages[message.msgId] }));\n    }\n\n    global = updateStatistics(global, chatId, result);\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadStatisticsAsyncGraph', (global, actions, payload) => {\n  const { chatId, token, name, isPercentage } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  (async () => {\n    const dcId = chat.fullInfo!.statisticsDcId;\n    const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n  })();\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { getMessageRecentReaction } from '../../helpers';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { message } = update;\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      if (getMessageRecentReaction(message)) {\n        notifyAboutMessage({\n          chat,\n          message,\n        });\n      }\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (chat) {\n        global = updateChat(global, chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            requestsPending,\n            recentRequesterIds,\n          },\n        });\n        setGlobal(global);\n        actions.loadChatJoinRequests({ chatId });\n      }\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfReactionAdded } from '../../helpers/reactions';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText,\n} from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n      const currentReactions = message?.reactions;\n\n      // `updateMessageReactions` happens with an interval so we try to avoid redundant global state updates\n      if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n        return;\n      }\n\n      // Only notify about added reactions, not removed ones\n      const shouldNotify = checkIfReactionAdded(currentReactions, reactions, global.currentUserId);\n\n      global = updateChatMessage(global, chatId, id, { reactions: update.reactions });\n\n      if (shouldNotify) {\n        const newMessage = selectChatMessage(global, chatId, id);\n        if (!chat || !newMessage) return;\n        notifyAboutMessage({\n          chat,\n          message: newMessage,\n        });\n      }\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            Boolean(nextOffset) || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { clearPayment } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, DEBUG, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${DEBUG ? APP_REVISION : APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  }\n\n  function initResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(event: React.MouseEvent<HTMLElement, MouseEvent>) {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nconst useWindowSize = () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n\nexport default useWindowSize;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, { FC, memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getDispatch } from '../../lib/teact/teactn';\n\nimport { ApiUser } from '../../api/types';\n\nimport { selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName, getUserFullName } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './UserReportPanel.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst UserReportPanel: FC<OwnProps & StateProps> = ({ userId, user }) => {\n  const {\n    addContact,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    toggleChatArchived,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { settings, accessHash } = user || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId: userId });\n    }\n  }, [addContact, isAutoArchived, toggleChatArchived, userId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: userId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ userId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId: userId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, userId,\n  ]);\n\n  if (!settings) {\n    return;\n  }\n\n\n  return (\n    <div className=\"UserReportPanel\">\n      {canAddContact && (\n        <Button\n          isText\n          ripple\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          ripple\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', getUserFirstOrLastName(user))}\n        text={lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={handleConfirmBlock}\n      >\n        {canReportSpam && (\n          <Checkbox\n            label={lang('DeleteReportSpam')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n        <Checkbox\n          label={lang('DeleteThisChat')}\n          checked={shouldDeleteChat}\n          onCheck={setShouldDeleteChat}\n        />\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => ({ user: selectUser(global, userId) }),\n)(UserReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getPrivateChatUserId, getSenderTitle, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectUser,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport UserReportPanel from './UserReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldShowUserReportPanel?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldShowUserReportPanel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowUserReportPanel && <UserReportPanel key={chatId} userId={chatId} />}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const userId = chat && getPrivateChatUserId(chat);\n    const user = userId ? selectUser(global, userId) : undefined;\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      shouldShowUserReportPanel: Boolean(user?.settings?.canAddContact || user?.settings?.canBlockContact),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageHtmlId, getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          id={`sticker-thumb-${getMessageHtmlId(message.id)}`}\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          id={`sticker-${getMessageHtmlId(message.id)}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          id={`sticker-${getMessageHtmlId(message.id)}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'arts_entertainment': '#e56dd6',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'building': '#6e81b2',\n  'education': '#a57348',\n  'event': '#959595',\n  'food': '#f7943f',\n  'education/cafeteria': '#f7943f',\n  'nightlife': '#e56dd6',\n  'travel/hotel_bar': '#e56dd6',\n  'parks_outdoors': '#6cc039',\n  'shops': '#ffb300',\n  'travel': '#1c9fff',\n  'work': '#ad7854',\n  'home': '#00aeef',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return 156543.03392 * Math.cos(lat * Math.PI / 180) / Math.pow(2, zoom);\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) =>\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0, 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({ variant = 'rectangular', animation = 'wave', width, height, className }) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport { getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl } from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '/src/assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const { width, height, zoom, scale } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return <img\n      className=\"full-media map\"\n      src={mapBlobUrl}\n      alt=\"Location on a map\"\n      width={DEFAULT_MAP_CONFIG.width}\n      height={DEFAULT_MAP_CONFIG.height}\n    />;\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !isInSelectMode && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location,\n  } = getMessageContent(message);\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_MAC_OS } from '../util/environment';\nimport getKeyFromEvent from '../util/getKeyFromEvent';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  useEffect(() => {\n    function handleCopy(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && getKeyFromEvent(e) === 'c') {\n        const messageIds = getMessageIdsForSelectedText();\n\n        if (messageIds && messageIds.length > 0) {\n          e.preventDefault();\n          copyMessagesByIds({ messageIds });\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleCopy, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleCopy, false);\n    };\n  }, [copyMessagesByIds]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isButtonVisible, canAttachMedia, canAttachPolls, onFileSelect, onPollCreate,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={openAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n              {lang('AttachmentMenu.PhotoOrVideo')}\n            </MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUser,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSilentSend={handleSilentSend}\n        openCalendar={openCalendar}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useOnChange from '../../../../hooks/useOnChange';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  useOnChange(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    setHtml(getTextWithEntitiesAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml] as const);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation',\n    !activeEmojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  isUserFull?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  isUserFull,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    loadFullUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (isPrivate && !isUserFull && lastSyncTime) {\n      loadFullUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, isUserFull, lastSyncTime, loadFullUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      isUserFull: Boolean(user?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    addContact,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang('Statistics')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst CLOSE_ANIMATION_DURATION = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, CLOSE_ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack(isChatSelected && (\n    contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers\n  ), () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n      <UnreadCount isForAppBadge />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","versionNotification","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","isStatisticsShown","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","recentTopMessages","msgId","updateStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","Array","isArray","array1","array2","every","member1","object1","object2","key1","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutMessage","getMessageRecentReaction","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","currentReactions","shouldNotify","checkIfReactionAdded","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","theme","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_REVISION","MenuItem","icon","Switcher","label","checked","noAnimation","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","style","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","add","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","addContact","blockContact","reportSpam","deleteChat","toggleChatArchived","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","handleAddContact","handleConfirmBlock","contactId","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","getPrivateChatUserId","audioMessage","pinnedIds","state","isSelectModeActive","shouldShowUserReportPanel","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","VENUE_COLORS","entries","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","pow","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","open","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","CalendarModal","isButtonVisible","canAttachMedia","canAttachPolls","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","VOICE_RECORDING_FILENAME","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","canShowSendAs","sendMessageAction","useSendMessageAction","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","prevEditedMessage","getTextWithEntitiesAsHtml","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSilentSend","onFileAppend","onClear","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","isUserFull","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","loadFullUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","authState","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}