{"version":3,"file":"5769.4a267d75f1f27fe2ee49.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/selection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithText', (global, actions, payload) => {\n  const { chatId, text } = payload;\n\n  actions.openChat({ id: chatId });\n\n  return {\n    ...global,\n    openChatWithText: {\n      chatId,\n      text,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { APP_VERSION, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      [isCustomEmoji ? 'customEmoji' : 'added']: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => {\n      return response.text();\n    }).then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { getMessageOriginalId, getUserFullName, isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global, actions) => {\n  void loadStickerSets(global.stickers.added.hash);\n  void loadCustomEmojiSets(global.customEmojis.added.hash);\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadCustomEmojiSets(hash?: string) {\n  const addedCustomEmojis = await callApi('fetchCustomEmojiSets', { hash });\n  if (!addedCustomEmojis) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  ));\n}\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n\n  if (isUsernameAvailable === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        botId,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { botId, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat, ApiRequestInputInvoice } from '../../../api/types';\n\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) return;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) return;\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) return;\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n  if (!invoice) return;\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice) {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n  const { form, invoice } = result;\n  let global = setPaymentForm(getGlobal(), form);\n  let step = PaymentStep.PaymentInfo;\n  const {\n    shippingAddressRequested, nameRequested, phoneRequested, emailRequested,\n  } = global.payment.invoice || {};\n  if (shippingAddressRequested || nameRequested || phoneRequested || emailRequested) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return undefined;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  void sendPaymentForm(requestInputInvoice, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'pending',\n    },\n  };\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  inputInvoice: ApiRequestInputInvoice,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    let global = clearPayment(getGlobal());\n    global = {\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'paid',\n      },\n    };\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: result.promo.currency,\n      monthlyAmount: result.promo.monthlyAmount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        const lastNotification = global.serviceNotifications.sort((a, b) => b.id - a.id)?.[0];\n        const serviceNotifications = lastNotification ? [{\n          ...lastNotification,\n          isHidden: true,\n        }] : [];\n\n        setGlobal({\n          ...global,\n          serviceNotifications,\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      if (!IS_PRODUCTION_HOST) {\n        global = clearPayment(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(HeaderActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForAnimation?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  observeIntersectionForAnimation,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForAnimation);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// eslint-disable-next-line max-len\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const {\n    isLottie, stickerSetInfo, isVideo, hasEffect,\n  } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useThumbnail(sticker);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !shouldLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  useEffect(() => {\n    if (hasEffect && shouldPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, shouldPlayEffect, onPlayEffect, shouldPlay, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? handleClick : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          disablePictureInPicture\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      {hasEffect && shouldLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport DotAnimation from '../../common/DotAnimation';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReaction) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message,\n    highlight,\n    isEmojiOnlyMessage(customShape),\n    undefined,\n    undefined,\n    isProtected,\n    observeIntersectionForAnimatedStickers,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n    const isAvatarPremium = avatarUser?.isPremium;\n\n    return (\n      <>\n        <Avatar\n          size=\"small\"\n          user={avatarUser}\n          chat={avatarChat}\n          text={hiddenName}\n          lastSyncTime={lastSyncTime}\n          onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n          observeIntersection={observeIntersectionForMedia}\n          animationLevel={animationLevel}\n          withVideo\n        />\n        {isAvatarPremium && <PremiumIcon className=\"chat-avatar-premium\" />}\n      </>\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            observeIntersectionForAnimation={observeIntersectionForAnimatedStickers}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <video\n                  src={botInfoGifUrl}\n                  loop\n                  autoPlay\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JDpb9xn3FmOzR6pVNK6n\",\"compact\":\"kq_1N12wqP7sbQ3EhVqO\",\"image\":\"Bo8mxv82IZ6uf0lrclLq\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachMenuBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bot' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachMenuBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    const textEntities = message?.content.text?.entities;\n    if (!message || !isForwarding || !textEntities?.length || !noAuthors || isCurrentUserPremium) return message;\n\n    const filteredEntities = textEntities.filter((entity) => entity.type !== ApiMessageEntityTypes.CustomEmoji);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: {\n          text: message.content.text!.text,\n          entities: filteredEntities,\n        },\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectAttachMenuPeerType,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments && newAttachments.some((l) => l.size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, handleSetAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachMenuBots={attachMenuBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      attachMenuPeerType: selectAttachMenuPeerType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  botAttachRequestBot?: ApiUser;\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  botAttachRequestBot,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n    loadContactList,\n    loadCustomEmojis,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots, loadContactList,\n    loadPremiumGifts, checkAppVersion,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequestBot} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      botAttachRequest,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      openedCustomEmojiSetIds: global.openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      botAttachRequestBot: botAttachRequest && selectUser(global, botAttachRequest.botId),\n      webApp: global.webApp,\n      currentUser,\n      urlAuth: global.urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","openChatWithText","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","isCustomEmoji","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","customEmojis","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","status","payment","clearPayment","closeInvoice","error","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","user","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","added","addedCustomEmojis","loadCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","loadFeaturedStickers","premiumGifts","cachedSet","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","bot","isEnabled","loadAttachMenuBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","getPaymentForm","form","invoice","setPaymentForm","step","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestInputInvoice","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","lastNotification","isHidden","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","r","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersection","observeIntersectionForAnimation","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","role","months","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","activeReaction","isInMeta","stopActiveReaction","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","isLottie","isVideo","hasEffect","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","isPlayingEffect","startPlayingEffect","stopPlayingEffect","shouldLoad","mediaHash","mediaHashEffect","previewMediaHash","previewUrl","getMessageMediaFormat","effectBlobUrl","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","handleEffectEnded","safePlay","openModal","actionText","autoPlay","playsInline","disablePictureInPicture","loop","muted","isLowPriority","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoAutoPause","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","amount","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","isAvatarPremium","PremiumIcon","renderAvatar","textContentClass","senderColor","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useBackgroundMode","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","peerTypes","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","textEntities","filteredEntities","entity","ApiMessageEntityTypes","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectAttachMenuPeerType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertHtmlAndUpdateCursor","newHtml","EDITABLE_INPUT_ID","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","insertTextAndUpdateCursor","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","downloadWindow","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","buildStyle","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","botAttachRequestBot","isPremiumModalOpen","limitReached","isReceiptModalOpen","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}