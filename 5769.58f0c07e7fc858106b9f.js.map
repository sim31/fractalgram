{"version":3,"file":"5769.58f0c07e7fc858106b9f.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text, files } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions) => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', async (global) => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global) => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global) => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        global = getGlobal();\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(\n  global: GlobalState, message: ApiMessage, userReactions: ApiReaction[],\n) {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload) => {\n  const { chatId, reaction } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(global.activeReactions, [messageId]) : {\n      ...global.activeReactions,\n      [messageId]: [\n        ...(global.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = {\n      ...global,\n      activeReactions: newActiveReactions,\n    };\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (!global.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = global.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...global.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(global.activeReactions, [messageId]);\n\n  return {\n    ...global,\n    activeReactions: newActiveReactions,\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((active) => active.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 320;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else if (noAnimation) {\n      // The second RAF is necessary because teact must update the state and render the async component\n      requestAnimationFrame(() => {\n        requestAnimationFrame(setFocusInSearchInput);\n      });\n    } else {\n      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [noAnimation, openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = global.settings.byKey.animationLevel === ANIMATION_LEVEL_MIN;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n  searchInput?.focus();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 1.875 * REM;\nconst EFFECT_SIZE = 6.25 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 2 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      genericEffects: global.genericEmojiEffects,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatGroup, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{lang(isChannel ? 'Channel.TitleInfo' : (userId ? 'UserInfo.Title' : 'GroupInfo.Title'))}</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","threadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","threadInfo","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","oldOrder","newOrder","reorderStickerSets","loadStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","ANIMATION_LEVEL_MIN","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","requestAnimationFrame","setFocusInSearchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","entries","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","forceOpen","onHide","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","getReactionUniqueKey","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","reactionMessage","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","shouldUpdateStickerSetsOrder","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","pinnedIds","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldLoadFullChat","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}