{"version":3,"file":"5769.ba1a15dad80bb5beb8d5.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectBot, selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: order,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  const bot = botId && selectBot(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getMessageOriginalId, isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  if (!shouldSkipModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      if (global.openedStickerSetShortName === stickerSetShortName) {\n        setGlobal({\n          ...global,\n          openedStickerSetShortName: undefined,\n        });\n      }\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash!, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if (global.openedStickerSetShortName === stickerSetShortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { sticker } = payload;\n\n  if (!selectStickerSet(global, sticker.stickerSetId)) {\n    if (!sticker.stickerSetAccessHash) {\n      actions.showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n      return;\n    }\n\n    await loadStickers(sticker.stickerSetId, sticker.stickerSetAccessHash);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, sticker.stickerSetId);\n  if (!set?.shortName) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectBot,\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      actions.getPaymentForm({ chat, messageId });\n      actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n      actions.openPaymentModal({ chatId: chat.id, messageId });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const bot = selectBot(global, chatId);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, bot, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      if (!message.viaBotId && !message.senderId) {\n        return;\n      }\n      const bot = selectBot(global, message.viaBotId! || message.senderId!);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        bot,\n        peer: chat,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, bot, theme, buttonText,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, bot, peer, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    bot, peer, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const bot = selectChatBot(global, botId);\n  if (!chat || !bot) {\n    return undefined;\n  }\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        bot,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peer: chat,\n    bot,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { bot, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId: bot.id, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport type { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport type { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport type { ApiAppConfig } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      if (phoneCall) return undefined;\n\n      const { call } = update;\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  BETA_DISCUSSION_CHAT_EN,\n  BETA_DISCUSSION_CHAT_RU,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Meta+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleSelectPasscode = useCallback(() => {\n    requestNextSettingsScreen(\n      hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n    );\n  }, [hasPasscode, requestNextSettingsScreen]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleRuDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_RU });\n  }, [openChatByUsername]);\n\n  const handleEnDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_EN });\n  }, [openChatByUsername]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"lock\"\n            onClick={handleSelectPasscode}\n          >\n            {lang('Passcode')}\n            <span className=\"menu-item-badge\">{lang('New')}</span>\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <>\n              <MenuItem\n                icon=\"permissions\"\n                onClick={handleChangelogClick}\n              >\n                Beta Changelog\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleRuDiscussionClick}\n              >\n                Beta Discussion (ru)\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleEnDiscussionClick}\n              >\n                Beta Discussion (en)\n              </MenuItem>\n            </>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n              <span className=\"menu-item-badge\">{lang('New')}</span>\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: activeChatFolder !== 0,\n    onBack: () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  useHotkeys({\n    'mod+shift+F': handleHotkeySearch,\n    'mod+shift+S': handleHotkeySavedMessages,\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n    } = global;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      activeChatFolder,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Meta+F': handleHotkeySearchClick,\n  });\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            tgsUrl={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          tgsUrl={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport safePlay from '../../../util/safePlay';\nimport { getActions } from '../../../global';\nimport useMedia from '../../../hooks/useMedia';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\n\nconst SIZE = 104;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const style = `width: ${SIZE}px; height: ${SIZE}px;`;\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: SIZE,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: SIZE,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction,\n  ]);\n\n  return {\n    ref,\n    size: SIZE,\n    style,\n    handleClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n    photoWidth,\n    photoHeight,\n  } = invoice!;\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const photoStyle = photoHeight && photoWidth ? `aspect-ratio: ${photoWidth / photoHeight};` : undefined;\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            style={photoStyle}\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank', 'noopener')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(\n    message, highlight, isEmojiOnlyMessage(customShape), undefined, undefined, isProtected,\n  );\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botInfo?.description || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Meta+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-ScrollDownButton-module__root\",\"button\":\"src-components-middle-ScrollDownButton-module__button\",\"icon\":\"src-components-middle-ScrollDownButton-module__icon\",\"unread-count\":\"src-components-middle-ScrollDownButton-module__unread-count\",\"unreadCount\":\"src-components-middle-ScrollDownButton-module__unread-count\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-FloatingActionButtons-module__root\",\"unread\":\"src-components-middle-FloatingActionButtons-module__unread\",\"revealed\":\"src-components-middle-FloatingActionButtons-module__revealed\",\"no-composer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"noComposer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"no-extra-shift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"noExtraShift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"only-reactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"onlyReactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"is-symbol-menu-open\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\",\"isSymbolMenuOpen\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__root\",\"compact\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__compact\",\"image\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__image\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  isPrivateChat?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  isScheduled,\n  isPrivateChat,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && isPrivateChat && Object.values(attachMenuBots).map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    isPrivateChat?: boolean;\n    theme: ISettings['theme'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  isPrivateChat,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {isChatWithBot && isBotMenuButtonCommands && botCommands !== false && !activeVoiceRecording\n            && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            isPrivateChat={isPrivateChat}\n            attachMenuBots={attachMenuBots}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isPrivateChat = Boolean(selectUser(global, chatId));\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n        && threadId === currentMessageList?.threadId\n        && messageListType === currentMessageList?.type;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isPrivateChat,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      theme: selectTheme(global),\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"src-components-middle-MiddleColumn-module__background\",\"customBgImage\":\"src-components-middle-MiddleColumn-module__customBgImage\",\"customBgColor\":\"src-components-middle-MiddleColumn-module__customBgColor\",\"withTransition\":\"src-components-middle-MiddleColumn-module__withTransition\",\"blurred\":\"src-components-middle-MiddleColumn-module__blurred\",\"withRightColumn\":\"src-components-middle-MiddleColumn-module__withRightColumn\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport {\n  NewChatMembersProgress, MediaViewerOrigin, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport type { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { fastRaf } from '../../util/schedulers';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\nimport UrlAuthModal from './UrlAuthModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botAttachRequest?: GlobalState['botAttachRequest'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botAttachRequest,\n  webApp,\n  currentUser,\n  urlAuth,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n    loadContactList,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n      loadContactList();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots, loadContactList,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequest?.bot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequest?.bot} />\n      <MessageListHistoryHandler />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest: global.botTrustRequest,\n      botAttachRequest: global.botAttachRequest,\n      webApp: global.webApp,\n      currentUser,\n      urlAuth: global.urlAuth,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { transitionClassNames, shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.container, transitionClassNames)}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"src-components-main-LockScreen-module__container\",\"wrapper\":\"src-components-main-LockScreen-module__wrapper\",\"icon\":\"src-components-main-LockScreen-module__icon\",\"help\":\"src-components-main-LockScreen-module__help\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","isOpen","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","order","added","setIds","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","bot","selectBot","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","toggleSafeLinkModal","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetId","accessHash","stickerSetShortName","stickerSet","getActions","openedStickerSetShortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","updateGifSearch","addedStickers","updateStickerSets","sets","loadStickerSets","addedSetIds","cached","setsById","pause","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","selectStickerSet","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","shortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","isEnabled","loadAttachMenuBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","openUrl","openGame","alert","isError","button","openPollModal","receiptMessageId","getReceipt","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","openChatWithText","queryId","resultId","scheduleDate","param","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","isBlocked","addBlockedContact","reorderStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","isCallPanelVisible","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleSelectPasscode","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleRuDiscussionClick","BETA_DISCUSSION_CHAT_RU","handleEnDiscussionClick","BETA_DISCUSSION_CHAT_EN","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","tgsUrl","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","soundId","selectAnimatedEmojiSound","forceLoadPreview","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","hasEffect","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","Audio","once","performance","interactionMessageId","useAnimatedEmoji","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","AnimatedIconFromSticker","noLoad","forcePreview","LIKE_STICKER_ID","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","photoWidth","photoHeight","photoStyle","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","renderIcon","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","animatedEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","isPending","handleUnfreeze","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","getDocumentMediaHash","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","isPrivateChat","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","UrlAuthModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","currentUser","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","ratingPhoneCall","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","langCode","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}