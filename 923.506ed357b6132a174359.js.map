{"version":3,"file":"923.506ed357b6132a174359.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/chats.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventIosPinchZoom.ts","webpack://telegram-t/./src/components/ui/Switcher.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/hooks/useThrottle.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/util/routing.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/helpers/preventMessageInputBlur.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack://telegram-t/./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/ui/CheckboxGroup.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/hooks/useDebounce.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/common/CalendarModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/ProfilePhoto.tsx","webpack://telegram-t/./src/components/right/ProfileInfo.tsx","webpack://telegram-t/./src/components/right/hooks/usePhotosPreload.ts","webpack://telegram-t/./src/components/right/ChatExtra.tsx","webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/util/deeplink.ts","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n  LOCALIZED_TIPS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions, payload) => {\n  const { langCode } = payload;\n\n  const usernamePostfix = langCode === 'pt-br'\n    ? 'BR'\n    : LOCALIZED_TIPS.includes(langCode) ? (langCode as string).toUpperCase() : '';\n\n  actions.openChatByUsername({ username: `${TIPS_USERNAME}${usernamePostfix}` });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : { chatId: number; userId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : { chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const chatOrChannelPostId = match[2] ? Number(match[2]) : undefined;\n    const messageId = match[3] ? Number(match[3]) : undefined;\n\n    // Open message in private chat\n    if (username === 'c' && chatOrChannelPostId && messageId) {\n      actions.focusMessage({ chatId: -chatOrChannelPostId, messageId });\n    } else {\n      void openChatByUsername(actions, username, chatOrChannelPostId);\n    }\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi('fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start');\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { serverTimeOffset } = global;\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && Date.now() + serverTimeOffset - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: Date.now(),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', ((global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n}));\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n} : {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread, selectNotifySettings,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n\n      const { hasWebNotifications } = selectNotifySettings(global);\n      if (hasWebNotifications) {\n        showNewMessageNotification({\n          chat,\n          message,\n          isActiveChat,\n        });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread && thread.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\nexport default function usePreventIosPinchZoom(isDisabled = false) {\n  // Disable viewport zooming on iOS Safari\n  useEffect(() => {\n    if (!IS_IOS || isDisabled) {\n      return undefined;\n    }\n\n    document.addEventListener('gesturestart', preventEvent);\n\n    return () => {\n      document.removeEventListener('gesturestart', preventEvent);\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  foldersDispatch,\n  onScreenSelect,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, dependencies.concat([isFrozen]));\n\n  return value;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number, noFirst = false) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms, !noFirst);\n  }, [ms, noFirst]);\n};\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                foldersState={foldersState}\n                foldersDispatch={foldersDispatch}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                foldersDispatch={foldersDispatch}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { MessageList, MessageListType } from '../global/types';\nimport { MAIN_THREAD_ID } from '../api/types';\n\nexport const createMessageHash = (messageList: MessageList): string => (\n  messageList.chatId.toString()\n  + (messageList.type !== 'thread' ? `_${messageList.type}`\n    : (messageList.threadId !== -1 ? `_${messageList.threadId}` : ''))\n);\n\nexport const parseMessageHash = (value: string): MessageList => {\n  const [chatId, typeOrThreadId] = value.split('_');\n  const isType = ['thread', 'pinned', 'scheduled'].includes(typeOrThreadId);\n\n  return {\n    chatId: Number(chatId),\n    type: !!typeOrThreadId && isType ? (typeOrThreadId as MessageListType) : 'thread',\n    threadId: !!typeOrThreadId && !isType ? Number(typeOrThreadId) : MAIN_THREAD_ID,\n  };\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch' | 'restartBot'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n  restartBot,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleRestartBot}\n        >\n          {lang('BotRestart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch', 'restartBot',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'openPreviousChat' | 'loadPinnedMessages' |\n  'toggleLeftColumn' | 'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  openPreviousChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openPreviousChat();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'openPreviousChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById && usersById[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current && videoRef.current.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n  usePauseOnInactive(videoRef, isPlayAllowed);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {!previewBlobUrl && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n        />\n      )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n      {isInline && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {(isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner) && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo, selectThreadOriginChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n  shouldRequestThreadUpdate: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat' | 'requestThreadInfoUpdate'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled,\n  threadInfo,\n  usersById,\n  chatsById,\n  shouldRequestThreadUpdate,\n  openChat,\n  requestThreadInfoUpdate,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (shouldRequestThreadUpdate) {\n      requestThreadInfoUpdate({ chatId, threadId });\n    }\n  }, [chatId, requestThreadInfoUpdate, shouldRequestThreadUpdate, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const chat = selectThreadOriginChat(global, chatId, threadId);\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n      shouldRequestThreadUpdate: !!chat && !threadInfo.topMessageId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'requestThreadInfoUpdate',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  noAvatars?: boolean;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint' | 'showNotification'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n  showNotification,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (isLocal) {\n      return;\n    }\n\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [isLocal, isAlbum, album, messageId, toggleMessageSelection]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, showNotification, lang, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: message.replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => { onContextMenu(e); }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    } else {\n      onContextMenu(e);\n    }\n  }, [onContextMenu]);\n\n  const handleContextMenu = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (IS_ANDROID) {\n      handleMessageSelect(e);\n    } else {\n      onContextMenu(e);\n    }\n  }, [onContextMenu, handleMessageSelect]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n    const textContentClass = buildClassName(\n      'text-content',\n      shouldInlineMeta && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode && !isLocal ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat && chat.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isFocused,\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n    'showNotification',\n  ]),\n)(Message));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  openHistoryCalendar: Function;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  openHistoryCalendar,\n}) => {\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useCallback, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../config';\nimport resetScroll from '../../../util/resetScroll';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, isUnread, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: number;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGreetingStickers' | 'sendMessage' | 'markMessageListRead'>;\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps & DispatchProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  loadGreetingStickers,\n  sendMessage,\n  markMessageListRead,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const sticker = stickers && stickers.length ? stickers[userId % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGreetingStickers', 'sendMessage', 'markMessageListRead',\n  ]),\n\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: number;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiAction, ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport { isChatChannel, isChatGroup, isChatPrivate } from '../../modules/helpers';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  hasFocusHighlight?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadViewportMessages' | 'setScrollOffset' | 'openHistoryCalendar'>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  hasFocusHighlight,\n  isSelectModeActive,\n  loadViewportMessages,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isChatPrivate(chatId) && !isChatWithSelf && !isBot\n    && ((\n      !messageGroups && !lastMessage && messageIds\n      // Used to avoid flickering when deleting a greeting that has just been sent\n      && (!listItemElementsRef.current || listItemElementsRef.current.length === 0))\n      || checkSingleMessageActionByType('contactSignUp', messageGroups)\n      || (lastMessage && lastMessage.content.action && lastMessage.content.action.type === 'contactSignUp')\n    );\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && checkSingleMessageActionByType('chatCreate', messageGroups);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    hasFocusHighlight && 'has-focus-highlight',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoFirstUnreadIdRef={memoUnreadDividerBeforeIdRef}\n          threadId={threadId}\n          type={type}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          openHistoryCalendar={openHistoryCalendar}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction checkSingleMessageActionByType(type: ApiAction['type'], messageGroups?: MessageDateGroup[]) {\n  return messageGroups\n  && messageGroups.length === 1\n  && messageGroups[0].senderGroups.length === 1\n  && messageGroups[0].senderGroups[0].length === 1\n  && 'content' in messageGroups[0].senderGroups[0][0]\n  && messageGroups[0].senderGroups[0][0].content.action\n  && messageGroups[0].senderGroups[0][0].content.action.type === type;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n    const hasFocusHighlight = focusingId ? !global.focusedMessage!.noHighlight : undefined;\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const bot = selectChatBot(global, chatId);\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isBot: Boolean(bot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      hasFocusHighlight,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = inlineBots && inlineBots[usernameLowered];\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results && results.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('clickInlineButton')>;\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, message, onClose, clickInlineButton,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'clickInlineButton',\n  ]),\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n  selectChatMessage,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport windowSize from '../../../util/windowSize';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  botKeyboardPlaceholder?: string;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(() => {\n            resetComposer();\n          });\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              faded\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage ? keyboardMessage.keyboardPlaceholder : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      topInlineBotIds: global.topInlineBots && global.topInlineBots.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType, MessageList as GlobalMessageList } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { createMessageHash } from '../../util/routing';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, true);\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists ? messageLists.map(createMessageHash) : []);\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat && chat.currentUserBannedRights,\n      defaultBannedRights: chat && chat.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.photo-wrapper');\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {username && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${username}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(username)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {(canInviteUsers || !username) && link && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat && chat.fullInfo ? chat.fullInfo.members : undefined,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\nimport { LangCode } from '../../types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventIosPinchZoom from '../../hooks/usePreventIosPinchZoom';\nimport { processDeepLink } from '../../util/deeplink';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  language?: LangCode;\n  openedStickerSetShortName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots' | 'loadEmojiKeywords' | 'openStickerSetShortName'\n)>;\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  language,\n  openedStickerSetShortName,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n  loadEmojiKeywords,\n  openStickerSetShortName,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots, loadEmojiKeywords, language,\n  ]);\n\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventIosPinchZoom(isMediaViewerOpen);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      language: global.settings.byKey.language,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots', 'loadEmojiKeywords', 'openStickerSetShortName',\n  ]),\n)(Main));\n","import { getDispatch } from '../lib/teact/teactn';\n\nexport const processDeepLink = (url: string) => {\n  const { protocol, searchParams, pathname } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const { openChatByUsername, openStickerSetShortName } = getDispatch();\n\n  const method = pathname.replace(/^\\/\\//, '');\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain,\n      } = params;\n\n      if (domain !== 'telegrampassport') {\n        openChatByUsername({\n          username: domain,\n        });\n      }\n      break;\n    }\n    case 'privatepost':\n\n      break;\n    case 'bg':\n\n      break;\n    case 'join':\n\n      break;\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'msg':\n\n      break;\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","langCode","usernamePostfix","LOCALIZED_TIPS","toUpperCase","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","createdChannel","channelId","accessHash","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","RE_TME_LINK","chatOrChannelPostId","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","runDebouncedForSearch","sendBotCommand","command","button","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","hasWebNotifications","selectNotifySettings","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateListedAndViewportIds","firstMessageId","selectThreadByMessage","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","selectFirstUnreadId","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","unique","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","settings","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","preventEvent","preventDefault","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","animationLevel","byKey","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","usersById","orderedFolderIds","notifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","noFirst","useThrottle","setValue","useState","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","current","captureEvents","onSwipe","SwipeDirection","min","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","shouldSkipHistoryAnimations","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","setSize","windowSize","handleResize","MAX_MESSAGES_LIST_WIDTH","createMessageHash","messageList","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","restartBot","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","fileName","renderAudio","subtitle","renderVoice","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","selectIsChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","windowWidth","useWindowSize","isLeftColumnHideable","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","onMouseDown","onContextMenu","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","shouldAutoLoad","isInSelectMode","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","inSelectMode","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","isPlayAllowed","wasPlaying","freezePlaying","paused","unfreezePlaying","contains","unfreezePlayingOnRaf","fastRaf","hasFocus","useBackgroundMode","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","shouldRequestThreadUpdate","recentReplierIds","recentRepliers","hasUnread","GROUP_MESSAGE_HOVER_ATTRIBUTE","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","chatUsername","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","handleAudioPlay","handleAlbumMediaClick","albumMessageId","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","messageGroups","isViewportNewest","isUnread","withUsers","anchorIdRef","memoFirstUnreadIdRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","observe","useIntersectionObserver","rootRef","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","triggerEntry","resetScroll","observeIntersectionForFab","freezeForFab","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","lastUnreadMessageId","loadGreetingStickers","debounceMs","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","checkSingleMessageActionByType","selectCurrentMessageIds","restrictionReason","focusingId","hasFocusHighlight","withLastMessageWhenPreloading","botDescription","chatBot","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","isCreator","isBot","threadFirstMessageId","selectFirstMessageId","hasTools","canPost","setScrollOffset","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","shouldRunLast","container","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","isAnimatingScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","buildAttachment","filename","blob","isQuick","URL","createObjectURL","mimeType","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","requestAnimationFrame","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","parseMessageInput","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","ReceiptModal","MainButtonState","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","sendInlineBotResult","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","markIsOpen","unmarkIsOpen","replace","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevQuery","prevUsername","botId","useInlineBotTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","onSelectResult","canAttachEmbedLinks","faded","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","leftColumnWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","handleLoadMore","messageIdsRef","getMessageContentIds","reverse","getMore","useInfiniteScroll","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","selectPreviousMedia","selectNextMedia","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","handleNotificationChange","copy","entity","copyTextToClipboard","formattedNumber","getChatLink","bio","getChatDescription","ListItem","multiline","narrow","isStatic","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","MEMBERS_SLICE","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","contextActions","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","contactId","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","close","shouldScrollUp","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","openStickerSetShortName","LOCATION_HASH","protocol","searchParams","pathname","domain","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","stopEvent","usePreventIosPinchZoom","onDrop","onDragOver","initApi"],"sourceRoot":""}