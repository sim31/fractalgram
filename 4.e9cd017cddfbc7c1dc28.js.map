{"version":3,"sources":["webpack:///./src/modules/actions/ui/localSearch.ts","webpack:///./src/modules/actions/ui/chats.ts","webpack:///./src/modules/actions/ui/messages.ts","webpack:///./src/modules/actions/ui/globalSearch.ts","webpack:///./src/modules/actions/ui/stickerSearch.ts","webpack:///./src/modules/actions/ui/users.ts","webpack:///./src/modules/actions/ui/settings.ts","webpack:///./src/modules/actions/ui/misc.ts","webpack:///./src/modules/actions/ui/payments.ts","webpack:///./src/modules/actions/api/chats.ts","webpack:///./src/modules/actions/api/messages.ts","webpack:///./src/modules/actions/api/symbols.ts","webpack:///./src/modules/actions/api/globalSearch.ts","webpack:///./src/modules/actions/api/sync.ts","webpack:///./src/modules/actions/api/localSearch.ts","webpack:///./src/modules/actions/api/management.ts","webpack:///./src/modules/actions/api/users.ts","webpack:///./src/modules/reducers/bots.ts","webpack:///./src/modules/actions/api/bots.ts","webpack:///./src/modules/actions/api/settings.ts","webpack:///./src/modules/actions/api/twoFaSettings.ts","webpack:///./src/modules/actions/api/payments.ts","webpack:///./src/util/requestQuery.ts","webpack:///./src/modules/actions/apiUpdaters/chats.ts","webpack:///./src/modules/actions/apiUpdaters/messages.ts","webpack:///./src/modules/actions/apiUpdaters/users.ts","webpack:///./src/modules/actions/apiUpdaters/symbols.ts","webpack:///./src/modules/actions/apiUpdaters/misc.ts","webpack:///./src/modules/actions/apiUpdaters/settings.ts","webpack:///./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack:///./src/hooks/useBeforeUnload.ts","webpack:///./src/components/ui/Switcher.tsx","webpack:///./src/components/left/main/LeftMainHeader.tsx","webpack:///./src/components/left/ConnectionState.tsx","webpack:///./src/hooks/useThrottledMemo.ts","webpack:///./src/hooks/useThrottle.ts","webpack:///./src/components/left/main/ChatFolders.tsx","webpack:///./src/components/left/search/LeftSearch.async.tsx","webpack:///./src/components/left/main/ContactList.async.tsx","webpack:///./src/components/left/NewChatButton.tsx","webpack:///./src/components/left/main/LeftMain.tsx","webpack:///./src/hooks/useBrowserOnline.ts","webpack:///./src/components/left/settings/Settings.async.tsx","webpack:///./src/components/left/newChat/NewChat.async.tsx","webpack:///./src/components/left/ArchivedChats.async.tsx","webpack:///./src/components/left/LeftColumn.tsx","webpack:///./src/hooks/useWindowSize.ts","webpack:///./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack:///./src/components/middle/HeaderMenuContainer.async.tsx","webpack:///./src/components/middle/HeaderActions.tsx","webpack:///./src/hooks/useWebpThumbnail.ts","webpack:///./src/components/middle/PinnedMessageNavigation.tsx","webpack:///./src/components/middle/HeaderPinnedMessage.tsx","webpack:///./src/components/middle/AudioPlayer.tsx","webpack:///./src/components/middle/MiddleHeader.tsx","webpack:///./src/components/middle/helpers/groupMessages.ts","webpack:///./src/components/middle/helpers/preventMessageInputBlur.ts","webpack:///./src/components/middle/hooks/useStickyDates.ts","webpack:///./src/hooks/useDebounce.ts","webpack:///./src/components/middle/MessageScroll.tsx","webpack:///./src/components/middle/message/helpers/buildContentClassName.ts","webpack:///./src/components/middle/message/helpers/mediaDimensions.ts","webpack:///./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack:///./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack:///./src/components/middle/message/hooks/useFocusMessage.ts","webpack:///./src/components/middle/message/ContextMenuContainer.async.tsx","webpack:///./src/components/middle/ActionMessage.tsx","webpack:///./src/components/common/EmbeddedMessage.tsx","webpack:///./src/components/middle/message/MessageMeta.tsx","webpack:///./src/components/middle/message/Sticker.tsx","webpack:///./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack:///./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack:///./src/components/middle/message/Photo.tsx","webpack:///./src/hooks/useHeavyAnimationCheckForVideo.ts","webpack:///./src/components/middle/message/hooks/usePauseOnInactive.ts","webpack:///./src/components/middle/message/Video.tsx","webpack:///./src/components/middle/message/Contact.tsx","webpack:///./src/components/ui/CheckboxGroup.tsx","webpack:///./src/components/middle/message/PollOption.tsx","webpack:///./src/components/middle/message/Poll.tsx","webpack:///./src/components/middle/message/WebPage.tsx","webpack:///./src/components/middle/message/Invoice.tsx","webpack:///./src/components/middle/message/hocs/withSelectControl.tsx","webpack:///./src/components/middle/message/Album.tsx","webpack:///./src/components/middle/message/RoundVideo.tsx","webpack:///./src/components/middle/message/InlineButtons.tsx","webpack:///./src/components/middle/message/CommentButton.tsx","webpack:///./src/components/middle/message/Message.tsx","webpack:///./src/components/middle/MessageList.tsx","webpack:///./src/components/middle/ScrollDownButton.tsx","webpack:///./src/components/middle/composer/helpers/buildAttachment.ts","webpack:///./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack:///./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack:///./src/util/voiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack:///./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack:///./src/components/middle/composer/hooks/useDraft.ts","webpack:///./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack:///./src/components/common/DeleteMessageModal.async.tsx","webpack:///./src/components/ui/ResponsiveHoverButton.tsx","webpack:///./src/components/middle/composer/AttachMenu.async.tsx","webpack:///./src/components/middle/composer/SymbolMenu.async.tsx","webpack:///./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack:///./src/components/middle/composer/MentionTooltip.async.tsx","webpack:///./src/components/middle/composer/CustomSendMenu.async.tsx","webpack:///./src/components/middle/composer/StickerTooltip.async.tsx","webpack:///./src/components/middle/composer/BotKeyboardMenu.async.tsx","webpack:///./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack:///./src/components/middle/composer/AttachmentModal.async.tsx","webpack:///./src/components/middle/composer/PollModal.async.tsx","webpack:///./src/components/middle/composer/DropArea.async.tsx","webpack:///./src/components/middle/composer/WebPagePreview.tsx","webpack:///./src/components/common/CalendarModal.async.tsx","webpack:///./src/components/payment/PaymentModal.async.tsx","webpack:///./src/components/payment/ReceiptModal.async.tsx","webpack:///./src/components/middle/composer/Composer.tsx","webpack:///./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack:///./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack:///./src/util/insertHtmlInSelection.ts","webpack:///./src/util/deleteLastCharacterOutsideSelection.ts","webpack:///./src/components/middle/composer/hooks/useEditing.ts","webpack:///./src/components/middle/MobileSearch.async.tsx","webpack:///./src/components/middle/MessageSelectToolbar.async.tsx","webpack:///./src/components/common/UnpinAllMessagesModal.async.tsx","webpack:///./src/components/middle/MiddleColumn.tsx","webpack:///./src/hooks/useCustomBackground.ts","webpack:///./src/components/right/RightHeader.tsx","webpack:///./src/components/right/hooks/useProfileViewportIds.ts","webpack:///./src/components/right/hooks/useProfileState.ts","webpack:///./src/components/right/ProfilePhoto.tsx","webpack:///./src/components/right/ProfileInfo.tsx","webpack:///./src/components/right/hooks/usePhotosPreload.ts","webpack:///./src/components/right/ChatExtra.tsx","webpack:///./src/components/right/DeleteMemberModal.tsx","webpack:///./src/components/right/Profile.tsx","webpack:///./src/components/right/hooks/useTransitionFixes.ts","webpack:///./src/hooks/useCacheBuster.ts","webpack:///./src/components/right/RightSearch.async.tsx","webpack:///./src/components/right/management/Management.async.tsx","webpack:///./src/components/right/StickerSearch.async.tsx","webpack:///./src/components/right/GifSearch.async.tsx","webpack:///./src/components/right/PollResults.async.tsx","webpack:///./src/components/right/AddChatMembers.tsx","webpack:///./src/components/right/RightColumn.tsx","webpack:///./src/components/mediaViewer/MediaViewer.async.tsx","webpack:///./src/components/main/Notifications.async.tsx","webpack:///./src/components/main/Dialogs.async.tsx","webpack:///./src/components/main/ForwardPicker.async.tsx","webpack:///./src/components/main/SafeLinkModal.async.tsx","webpack:///./src/components/main/HistoryCalendar.async.tsx","webpack:///./src/components/main/Main.tsx","webpack:///./src/bundles/main.ts"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","includes","direction","Down","Up","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","message","IS_TOUCH_ENV","isPollModalOpen","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","filter","unshift","content","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","replaceSettings","theme","settings","replaceThemeSettings","management","byChatId","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","runThrottledForLoadChats","throttle","cb","runThrottledForLoadTopChats","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetDate","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","orderedPinnedIds","serverTimeOffset","chatIds","shift","addUsers","buildCollectionByKey","users","updateChats","updateChatListIds","updateChatListSecondaryInfo","draftsById","map","forEach","replyingToById","isFullyLoaded","loadFullChat","fullInfo","updateChat","openChatByUsername","username","channelPostId","localChat","selectChatByUsername","isMin","previousChat","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","byId","listIds","active","currentChatId","pinnedChats","otherChats","prepareChatList","chatToPreload","find","currentUserId","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","user","selectUser","selectThreadTopMessageId","requestThreadInfoUpdate","selectSupportChat","TIPS_USERNAME","oldestChat","selectIsChatPinned","sort","chat1","chat2","date","force","isMuted","title","about","photo","memberIds","progress","ChatCreationProgress","InProgress","createdChannel","channelId","accessHash","Complete","Error","getDispatch","createChannel","userId","activeChat","activeChannel","createdChat","createGroupChat","folderId","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","emoticon","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","apply","deleteChatFolder","unreadCount","match","RE_TME_INVITE_LINK","exec","RE_TME_LINK","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","linkedChatId","activeChatFolder","offset","setNewChatMembersDialogState","NewChatMembersProgress","Loading","Closed","uploadProgressCallbacks","Map","runThrottledForMarkRead","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","Backwards","Around","round","MESSAGE_LIST_SLICE","Forwards","selectThreadOriginChat","threadInfos","addChatMessagesById","updateOutlyingIds","updateListedIds","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","localId","progressCallback","attachment","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","delete","isRestricted","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","scheduledAt","clearWebPagePreview","value","noWebPage","selectNoWebPage","isSingle","attachments","isGrouped","restParams","text","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","apiUpdate","draft","replyToMsgId","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","reason","peer","webPagePreview","loadWebPagePreview","options","option","shouldResetVoters","v","a","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","b","scheduledMessages","historyHash","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","copyTextToClipboard","link","searchThrottled","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","featured","featuredStickers","loadFeaturedStickers","stickerSetAccessHash","stickerSet","selectStickerSet","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","setsById","searchWords","searchStickers","updateStickersForEmoji","loadStickersForEmoji","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","loadAndReplaceArchivedChats","updateUsers","replaceChatListIds","loadAndUpdateUsers","userIds","contactIds","contactList","updatedUsers","loadTopMessages","lastReadInboxMessageId","localChats","localUsers","globalChats","globalUsers","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","searchMessagesByDate","updateManagement","isUsernameAvailable","afterSyncCallback","DEBUG","console","log","savedUsers","savedPrivateChatIds","savedChats","selectedChat","isChatPrivate","selectedChatUser","replaceChats","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","acc","newCurrentChatId","currentMessageListInfo","threadsById","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","Array","prototype","concat","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","topPeers","lastRequestedAt","usersHash","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","updateChatMutedState","phone","phoneNumber","updateUser","updateContact","deleteUser","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","buildInputPrivacyRules","visibility","allowedIds","deniedIds","usersById","chatsById","rules","collectUsers","collectChats","allowedUsers","allowedChats","blockedUsers","blockedChats","button","sendBotCommand","command","openTelegramLink","toggleSafeLinkModal","alert","isError","showDialog","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","topInlineBots","newHash","inlineBotData","inlineBot","switchPm","canLoadMore","bot","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","bio","profileEdit","ProfileEditProgress","currentUser","Idle","loadedWallpapers","wallpapers","file","previewBlobUrl","URL","createObjectURL","slug","UPLOADING_WALLPAPER_SLUG","document","fileName","size","mimeType","wallpaper","firstWallpaper","withLocalMedia","blocked","blockedIds","contactId","addBlockedContact","removeBlockedContact","activeSessions","session","isCurrent","addNotifyExceptions","peerType","shouldShowPreviews","updateNotifySettings","hasContactJoinedNotifications","languages","phoneNumberSettings","lastSeenSettings","profilePhotoSettings","forwardsSettings","chatInviteSettings","privacy","lastSeen","profilePhoto","forwards","chatInvite","privacyKey","allowUserIds","allowChatIds","blockUserIds","blockChatIds","isAllowList","contactsIds","isSensitiveEnabled","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","error","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","PaymentInfo","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","ShippingInfo","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","Checkout","sendStipeCredentials","shippingOptionId","saveCredentials","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","selectCountNotMutedUnread","updateAppBadge","isNotJoined","listId","typingStatus","senderId","isFromScheduled","isActiveChat","hasUnreadMention","unreadMentionsCount","showNewMessageNotification","messageUpdate","selectCommonBoxChatId","targetChat","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","updateChatListType","chatFoldersById","newChatFoldersById","pick","newOrderedIds","orderedId","folders","replacedMembers","addedMember","deletedMemberId","shouldUpdate","some","deleteIndex","isOwner","isAdmin","membersCount","formattedText","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","updateScheduledMessage","updateListedAndViewportIds","firstUnreadId","selectFirstUnreadId","addViewportId","firstMessageId","selectThreadByMessage","isMessageLocal","updateChatLastMessage","currentLastMessage","findLastMessage","isDeleting","deleteMessages","newLastMessage","threadIdsToUpdate","unique","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","updateThreadInfo","newMessage","isMessageInCurrentMessageList","isOutgoing","scheduledIds","selectScheduledIds","selectScheduledMessages","deleteChatScheduledMessages","currentPinnedIds","selectPinnedIds","newTheadInfo","messagesById","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","poll","updatedPoll","updatedResults","isChosen","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","key","addNotifyException","twoFaSettings","useBeforeUnload","callback","useEffect","onBeforeUnload","memo","name","label","checked","disabled","inactive","noAnimation","onChange","onCheck","handleChange","useCallback","currentTarget","className","buildClassName","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","animationLevel","byKey","globalSearchChatId","searchDate","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","setGlobalSearchChatId","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","lang","useLang","hasMenu","LeftColumnContent","ChatList","clearedDateSearchParam","clearedChatSearchParam","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","color","onClick","ariaLabel","handleSearchFocus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","APP_VERSION","MenuItem","icon","toLowerCase","href","FEEDBACK_URL","localStorage","setItem","JSON","stringify","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","resolverFn","ms","dependencies","valueRef","useRef","runThrottled","useThrottle","forceUpdate","useForceUpdate","useOnChange","isSync","current","orderedFolderIds","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","setActiveChatFolder","transitionRef","displayedFolders","folderCountersById","useThrottledMemo","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","folderTabs","handleSwitchTab","captureEvents","onSwipe","SwipeDirection","Left","min","Right","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","metaKey","startsWith","digit","preventDefault","addEventListener","removeEventListener","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","folderType","noChatsText","TabList","tabs","activeTab","onSwitchTab","Transition","ref","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Extra","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","connectionState","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isOnline","setIsOnline","navigator","onLine","useBrowserOnline","isMouseInside","handleSelectSettings","Settings","handleSelectContacts","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","handleSelectArchived","Archived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","NewChat","ContentType","ArchivedChats","RENDER_COUNT","shouldSkipHistoryAnimations","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","SettingsScreens","Main","setContactsFilter","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","EditProfile","Folders","General","Notifications","Privacy","Language","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyForwarding","PrivacyGroupChats","PrivacyActiveSessions","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","handleSearchQuery","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","setSize","windowSize","handleResize","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","HeaderMenuContainer","isChatChannel","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canMute","canSelect","selectIsInSelectMode","canLeave","joinChannel","openLocalTextSearch","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","x","right","y","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleSearchClick","querySelector","focus","searchInput","anchor","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","width","height","radius","count","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","style","transform","svg","div","defs","innerHTML","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","sender","selectSender","noUi","senderName","getSenderTitle","mediaData","mediaLoader","playPause","isPlaying","useAudioPlayer","getMessageKey","getMediaDuration","handleClick","handleClose","audio","getMessageAudio","performer","renderAudio","subtitle","renderVoice","audioMessage","originChat","messagesCount","pinnedIds","state","isSelectModeActive","originChatId","isChatWithBot","selectIsChatWithBot","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","toggleLeftColumn","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","getChatTitle","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","handleBackClick","messageInput","EDITABLE_INPUT_ID","currentChat","selectIsChatMuted","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessageTitle","canRevealTools","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","unreadCountInfo","formatIntegerCompact","componentEl","add","remove","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","preventMessageInputBlur","activeElement","target","useStickyDates","isScrolled","markIsScrolled","runDebounced","shouldRunFirst","shouldRunLast","updateStickyDates","container","hasTools","contains","fastRaf","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","scrollTop","el","offsetTop","offsetHeight","top","findStuckDate","MessageScroll","loadMoreForwards","loadMoreBackwards","isViewportNewest","onFabToggle","onNotchToggle","children","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","scrollHeight","scrollBottom","isAtBottom","observe","observeIntersection","useIntersectionObserver","rootRef","margin","MESSAGE_LIST_SENSITIVE_AREA","entries","triggerEntry","isIntersecting","resetScroll","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","teactFastList","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","AlbumRectPart","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","album","ratios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","createElement","font","whiteSpace","left","opacity","appendChild","offsetWidth","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isEmbedded","appearanceOrder","isLastInList","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isContextMenuShown","data-message-id","onMouseDown","onContextMenu","EmbeddedMessage","customText","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","outgoingStatus","signature","views","isEdited","formatTime","MessageOutgoingStatus","Sticker","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","shouldPlay","mediaHash","getMessageMediaFormat","isMediaLoaded","isAnimationLoaded","markAnimationLoaded","isMediaReady","shouldRenderFullMedia","useTransitionForMedia","getStickerDimensions","thumbClassName","stickerClassName","AnimatedSticker","animationData","play","noLoop","onLoad","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_BACKGROUND","getCustomAppendixBg","inSelectMode","isSelected","img","Image","onload","canvas","ctx","getContext","drawImage","getImageData","getAppendixColorFromImage","Photo","shouldAutoLoad","isInSelectMode","uploadProgress","nonInteractive","shouldAffectAppendix","onCancelUpload","localBlobUrl","isDownloadAllowed","setIsDownloadAllowed","shouldDownload","downloadProgress","useMediaWithDownloadProgress","thumbRef","isUploading","isTransferring","transferProgress","getMediaTransferState","wasDownloadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderThumb","isAllowed","contentEl","appendixBg","setProperty","setAttribute","ProgressSpinner","useHeavyAnimationCheckForVideo","playerRef","shouldPlayRef","safePlay","useHeavyAnimationCheck","isPlayAllowed","wasPlaying","isFrozen","freezePlaying","paused","unfreezePlaying","unfreezePlayingOnRaf","hasFocus","useBackgroundMode","Video","shouldAutoPlay","videoRef","getMessageWebPageVideo","setIsPlayAllowed","isInline","isBuffered","bufferingHandlers","useBuffering","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","usePauseOnInactive","useVideoCleanup","videoClassName","shouldRenderInlineVideo","shouldRenderPlayButton","shouldRenderDownloadButton","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","openUserInfo","Avatar","formatPhoneNumberWithCode","selected","loadingOptions","setValues","event","newValues","Checkbox","subLabel","getPercentage","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","r","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","floor","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","data-initial","SafeLink","getMessageInvoice","photoUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","shiftKey","newProps","PhotoWithSelect","VideoWithSelect","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","currentOnRelease","RoundVideo","playingProgressRef","shouldSpinnerRender","isActivated","setIsActivated","setProgress","playerEl","playingProgressEl","stopPlaying","requestAnimationFrame","capturePlaying","onRelease","ROUND_VIDEO_DIMENSIONS","onEnded","InlineButtons","recentReplierIds","recentRepliers","hasUnread","data-cnt","handleDocumentGroupMouseEnter","lastGroupElement","getLastElementInDocumentGroup","handleDocumentGroupMouseLeave","removeAttribute","nextElementSibling","withSenderName","withAvatar","viaBotId","forceSenderName","isAnonymousOwnMessage","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectOutgoingStatus","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","shouldAutoLoadMedia","selectShouldAutoLoadMedia","shouldAutoPlayMedia","selectShouldAutoPlayMedia","shouldLoopStickers","selectShouldLoopStickers","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","clickInlineButton","bottomMarkerRef","appendixRef","isLocal","hasReply","isReplyMessage","hasThread","asForwarded","isLinkedChannelPost","isInDocumentGroup","voice","getMessageCustomShape","textParts","renderMessageText","adminTitle","metaSafeAuthorWidth","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","avatarPeer","senderPeer","containerClassName","contentClassName","hasComments","classNames","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withCommentButton","withAppendix","handleGroupDocumentMessagesSelect","handleContainerDoubleClick","handleContentDoubleClick","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","MediaViewerOrigin","ScheduledInline","Inline","handleAudioPlay","handleAlbumMediaClick","albumMessageId","ScheduledAlbum","Album","IS_ANDROID","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","calculatedWidth","noMediaCorners","extraPadding","onDoubleClick","data-last-message-id","data-has-unread-mention","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","shouldInlineMeta","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","forceLoadPreview","Audio","isSelectable","onPlay","onReadMedia","Document","renderContent","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","botDescription","chatBot","selectChatBot","isChatLoaded","isChannelChat","threadFirstMessageId","selectFirstMessageId","hasLinkedChat","markMessageListRead","setScrollOffset","openHistoryCalendar","scrollOffsetRef","selectScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","hasFocusing","setHasFocusing","onTickEnd","throttleMs","observeIntersectionForReading","freezeForReading","unfreezeForReading","mentionIds","entry","dataset","messageGroups","listedMessages","orderBy","loadMoreAround","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","shouldForceScroll","lastItemElement","lastItemHeight","newScrollTop","hasFirstMessageChanged","hasLastMessageChanged","isAlreadyFocusing","isResized","unreadDivider","isAnimatingScroll","dispatchHeavyAnimationEvent","withUsers","onScroll","currentAnchorIdRef","isSchedule","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","SCHEDULED_WHEN_ONLINE","formatHumanDate","renderMessages","focusNextReply","messageElements","lastMessageElement","buildAttachment","filename","blob","isQuick","quick","preloadImage","newBlob","toBlob","squeezeImage","revokeObjectURL","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","startedAt","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","volume","subscribeToAnalyzer","stop","reject","onstop","Blob","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","tempEl","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","useInlineBotTooltip","html","markIsOpen","unmarkIsOpen","botSettings","setBotSettings","replace","innerText","getPlainText","queryInlineBot","resetInlineBot","canShowHelp","parseStartWithUsernameString","usernameLowered","prevUsername","loadMore","closeTooltip","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltipAsync","StickerTooltip","BotKeyboardMenu","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","AttachmentModal","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","parseMessageInput","linkEntity","ApiMessageEntityTypes","TextUrl","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","CalendarModal","PaymentModal","MainButtonState","ReceiptModal","chatUser","selectChatUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","editingMessage","canScheduleUntilOnline","wasOnline","withScheduledButton","shouldSchedule","botKeyboardMessageId","stickersForEmoji","groupChatMembers","topInlineBotIds","isReceiptModalOpen","shouldSuggestStickers","isInlineBotLoading","dropAreaState","onDropHide","editMessage","saveDraft","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","closePaymentModal","clearReceipt","addRecentEmoji","loadEmojiKeywords","sendInlineBotResult","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","htmlRef","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","voiceRecording","tickVolume","boxShadow","useVoiceRecording","mainButtonState","Edit","IS_VOICE_RECORDING_SUPPORTED","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","mentionFilter","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeInlineBotTooltip","inlineBotHelp","loadMoreForInlineBot","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","prevChatId","handleEditComplete","editedMessage","hasMessageMedia","useEditing","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","EDITABLE_INPUT_MODAL_ID","items","media","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleStickerSelect","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","None","withQuick","QuickFile","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","onInsertUserName","filteredUsers","canAttachEmbedLinks","faded","MessageInput","forcedPlaceholder","shouldSetFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","botId","onSelectResult","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","CLOSE_ANIMATION_DURATION","canBeQuicklyUploaded","kind","CONTENT_TYPES_FOR_QUICK_UPLOAD","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioMessage","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","setIsReady","ANIMATION_LEVEL_MIN","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanPost","renderingHasTools","renderingIsFabShown","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","footerClassName","closeChat","isDiscussion","onTransitionEnd","propertyName","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onUnpin","runDebouncedForSearch","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canManage","isCreator","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","shouldSkipAnimation","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","GroupMembers","ManageGroupMembers","renderingContentKey","renderHeaderContent","isBackButton","buttonClassName","useProfileViewportIds","loadMoreMembers","searchMessages","tabType","mediaSearchType","resultType","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","currentResultType","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","isOnTop","useInfiniteScrollForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","noProfileInfo","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","isFirstPhoto","isSavedMessages","isDeleted","isDeletedUser","getMediaHash","forceAvatar","getChatAvatarHash","imageHash","ApiMediaFormat","BlobUrl","avatarThumbnailData","useBlurSync","dataUri","imageSrc","prevImageSrc","decoding","userFullName","getUserFullName","getFirstLetters","fullClassName","forceShowSelf","loadFullUser","fullName","slideAnimation","currentPhotoIndex","setCurrentPhotoIndex","isFirst","isLast","profile","currentIndex","usePhotosPreload","handleProfilePhotoClick","ProfileAvatar","selectPreviousMedia","selectNextMedia","excludedClosestSelector","renderPhoto","isVerifiedIconShown","isVerified","renderPhotoTabs","aria-label","VerifiedIcon","isUserOnline","getUserStatus","canInviteUsers","isUserRightBanned","getHasAdminRight","handleNotificationChange","copy","entity","formattedNumber","getChatLink","getChatDescription","ListItem","multiline","narrow","isStatic","contactName","getUserFirstOrLastName","deleteChatMember","handleDeleteChatMember","Modal","onEnter","TABS","buildInfiniteScrollItemSelector","isGroup","isChatGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","canDeleteMembers","resolvedUserId","onProfileStateChange","setLocalMediaSearchType","searchMediaMessagesLocal","loadProfilePhotos","setActiveTab","deletingUserId","setDeletingUserId","useEffectWithPrevDeps","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","getMemberContextAction","handler","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","teactOrderKey","contextActions","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","renderProfileInfo","shouldRestoreHeight","onStart","onStop","big","FloatingActionButton","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","sortChatIds","foundContactIds","isUserBot","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","UserInfo","isOverlaying","close","shouldScrollUp","GroupType","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","rightColumnAnimationTimeout","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","middleColumnTransitionClassNames","rightColumnTransitionClassNames","initialUnread","clearInterval","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","stopEvent","onDrop","onDragOver","initApi"],"mappings":"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","file":"4.e9cd017cddfbc7c1dc28.js","sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread',\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport { ANIMATION_END_DELAY, FAST_SMOOTH_MAX_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo ? threadInfo.lastMessageId : undefined;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {},\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat && chat.lastMessage ? chat.lastMessage.id : undefined;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo ? threadInfo.lastMessageId : undefined;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids && ids.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport { ISettings, IThemeSettings, ThemeKey } from '../../../types';\nimport { replaceSettings, replaceThemeSettings } from '../../reducers';\n\naddReducer('setSettingOption', (global, actions, payload?: Partial<ISettings>) => {\n  return replaceSettings(global, payload);\n});\n\naddReducer('setThemeSettings', (global, actions, payload: { theme: ThemeKey } & Partial<IThemeSettings>) => {\n  const { theme, ...settings } = payload;\n\n  return replaceThemeSettings(global, theme, settings);\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { ApiError } from '../../../api/types';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  const { id } = payload!;\n\n  return {\n    ...global,\n    isLeftColumnShown: id === undefined,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: 0,\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global) => {\n  const newNotifications = [...global.notifications];\n\n  newNotifications.pop();\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\nimport {\n  clearPayment, closeInvoice,\n} from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiChatFolder, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TME_INVITE_LINK,\n  RE_TME_LINK,\n  TIPS_USERNAME,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChat,\n  selectUser,\n  selectChatListType,\n  selectIsChatPinned,\n  selectChatFolder,\n  selectSupportChat,\n  selectChatByUsername,\n  selectThreadTopMessageId,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, prepareChatList, isChatBasicGroup,\n} from '../../helpers';\n\nconst TOP_CHATS_PRELOAD_PAUSE = 100;\n// We expect this ID does not exist\nconst TMP_CHAT_ID = -1;\n\nconst runThrottledForLoadChats = throttle((cb) => cb(), 1000, true);\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddReducer('preloadTopChatMessages', (global, actions) => {\n  (async () => {\n    const preloadedChatIds: number[] = [];\n\n    for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n      await pause(TOP_CHATS_PRELOAD_PAUSE);\n\n      const {\n        byId,\n        listIds: { active: listIds },\n        orderedPinnedIds: { active: orderedPinnedIds },\n      } = getGlobal().chats;\n      if (!listIds) {\n        return;\n      }\n\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n      const { pinnedChats, otherChats } = prepareChatList(byId, listIds, orderedPinnedIds);\n      const topChats = [...pinnedChats, ...otherChats];\n      const chatToPreload = topChats.find(({ id }) => id !== currentChatId && !preloadedChatIds.includes(id));\n      if (!chatToPreload) {\n        return;\n      }\n\n      preloadedChatIds.push(chatToPreload.id);\n\n      actions.loadViewportMessages({ chatId: chatToPreload.id, threadId: MAIN_THREAD_ID });\n    }\n  })();\n});\n\naddReducer('openChat', (global, actions, payload) => {\n  const { id, threadId } = payload!;\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat && chat.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddReducer('openSupportChat', (global, actions) => {\n  const chat = selectSupportChat(global);\n\n  actions.openChat({ id: chat ? chat.id : TMP_CHAT_ID });\n\n  if (chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchChat', { type: 'support' });\n    if (result) {\n      actions.openChat({ id: result.chatId });\n    }\n  })();\n});\n\naddReducer('openTipsChat', (global, actions) => {\n  actions.openChatByUsername({ username: TIPS_USERNAME });\n});\n\naddReducer('loadMoreChats', (global, actions, payload) => {\n  const { listType = 'active' } = payload!;\n  const listIds = global.chats.listIds[listType as ('active' | 'archived')];\n  const isFullyLoaded = global.chats.isFullyLoaded[listType as ('active' | 'archived')];\n\n  if (isFullyLoaded) {\n    return;\n  }\n\n  const oldestChat = listIds\n    ? listIds\n      .map((id) => global.chats.byId[id])\n      .filter((chat) => Boolean(chat && chat.lastMessage) && !selectIsChatPinned(global, chat.id))\n      .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n    : undefined;\n\n  if (oldestChat) {\n    runThrottledForLoadChats(() => loadChats(listType, oldestChat.id, oldestChat.lastMessage!.date));\n  } else {\n    runThrottledForLoadChats(() => loadChats(listType));\n  }\n});\n\naddReducer('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddReducer('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddReducer('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n  });\n});\n\naddReducer('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddReducer('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddReducer('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (channelId && accessHash) {\n    void callApi('joinChannel', { channelId, accessHash });\n  }\n});\n\naddReducer('deleteChatUser', (global, actions, payload) => {\n  (async () => {\n    const { chatId, userId } : {chatId: number; userId: number} = payload!;\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, userId);\n    if (!chat || !user) {\n      return;\n    }\n    await callApi('deleteChatUser', { chat, user });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId && global.currentUserId === userId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChat', (global, actions, payload) => {\n  (async () => {\n    const { chatId } : {chatId: number } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n    await callApi('deleteChat', { chatId: chat.id });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('leaveChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('leaveChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('deleteChannel', (global, actions, payload) => {\n  (async () => {\n    const { chatId } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const { id: channelId, accessHash } = chat;\n\n    if (channelId && accessHash) {\n      await callApi('deleteChannel', { channelId, accessHash });\n    }\n\n    const activeChannel = selectCurrentMessageList(global);\n    if (activeChannel && activeChannel.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as number[])\n    .map((id: number) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddReducer('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddReducer('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddReducer('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddReducer('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddReducer('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddReducer('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds } = global.chatFolders;\n  const maxId = orderedIds && orderedIds.length ? Math.max.apply(Math.max, orderedIds) : ARCHIVED_FOLDER_ID;\n\n  void createChatFolder(folder, maxId);\n});\n\naddReducer('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddReducer('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddReducer('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n  let match = RE_TME_INVITE_LINK.exec(url);\n\n  if (match) {\n    const hash = match[1];\n\n    (async () => {\n      const result = await callApi('openChatByInvite', hash);\n      if (!result) {\n        return;\n      }\n\n      actions.openChat({ id: result.chatId });\n    })();\n  } else {\n    match = RE_TME_LINK.exec(url)!;\n\n    const username = match[1];\n    const channelPostId = match[2] ? Number(match[2]) : undefined;\n\n    void openChatByUsername(actions, username, channelPostId);\n  }\n});\n\naddReducer('acceptInviteConfirmation', (global, actions, payload) => {\n  const { hash } = payload!;\n  (async () => {\n    const result = await callApi('importChatInvite', { hash });\n    if (!result) {\n      return;\n    }\n\n    actions.openChat({ id: result.id });\n  })();\n});\n\naddReducer('openChatByUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  void openChatByUsername(actions, username);\n});\n\naddReducer('togglePreHistoryHidden', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  let chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    void callApi('togglePreHistoryHidden', { chat, isEnabled });\n  })();\n});\n\naddReducer('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddReducer('updateChatMemberBannedRights', (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n    const isBanned = !!bannedRights.viewMessages;\n    const isUnblocked = !Object.keys(bannedRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(members && isBanned && {\n          members: members.filter((m) => m.userId !== userId),\n        }),\n        ...(members && !isBanned && {\n          members: members.map((m) => (\n            m.userId === userId\n              ? { ...m, bannedRights }\n              : m\n          )),\n        }),\n        ...(isUnblocked && kickedMembers && {\n          kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChatAdmin', (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    await callApi('updateChatAdmin', {\n      chat, user, adminRights, customTitle,\n    });\n\n    const newGlobal = getGlobal();\n    const chatAfterUpdate = selectChat(newGlobal, chatId);\n\n    if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n      return;\n    }\n\n    const { adminMembers } = chatAfterUpdate.fullInfo;\n\n    const isDismissed = !Object.keys(adminRights).length;\n\n    setGlobal(updateChat(newGlobal, chatId, {\n      fullInfo: {\n        ...chatAfterUpdate.fullInfo,\n        ...(adminMembers && isDismissed && {\n          adminMembers: adminMembers.filter((m) => m.userId !== userId),\n        }),\n        ...(adminMembers && !isDismissed && {\n          adminMembers: adminMembers.map((m) => (\n            m.userId === userId\n              ? { ...m, adminRights, customTitle }\n              : m\n          )),\n        }),\n      },\n    }));\n  })();\n});\n\naddReducer('updateChat', (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n    await Promise.all([\n      chat.title !== title\n        ? callApi('updateChatTitle', chat, title)\n        : undefined,\n      chat.fullInfo && chat.fullInfo.about !== about\n        ? callApi('updateChatAbout', chat, about)\n        : undefined,\n      photo\n        ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n        : undefined,\n    ]);\n\n    setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n  })();\n});\n\naddReducer('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddReducer('loadGroupsForDiscussion', () => {\n  (async () => {\n    const groups = await callApi('fetchGroupsForDiscussion');\n    if (!groups) {\n      return;\n    }\n\n    const addedById = groups.reduce((result, group) => {\n      if (group) {\n        result[group.id] = group;\n      }\n\n      return result;\n    }, {} as Record<number, ApiChat>);\n\n    const global = addChats(getGlobal(), addedById);\n    setGlobal({\n      ...global,\n      chats: {\n        ...global.chats,\n        forDiscussionIds: Object.keys(addedById).map(Number),\n      },\n    });\n  })();\n});\n\naddReducer('linkDiscussionGroup', (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  (async () => {\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    let { fullInfo } = chat;\n    if (!fullInfo) {\n      const fullChat = await callApi('fetchFullChat', chat);\n      if (!fullChat) {\n        return;\n      }\n\n      fullInfo = fullChat.fullInfo;\n    }\n\n    if (fullInfo.isPreHistoryHidden) {\n      await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n    }\n\n    void callApi('setDiscussionGroup', { channel, chat });\n  })();\n});\n\naddReducer('unlinkDiscussionGroup', (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo && channel.fullInfo.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  (async () => {\n    await callApi('setDiscussionGroup', { channel });\n    if (chat) {\n      loadFullChat(chat);\n    }\n  })();\n});\n\n\naddReducer('setActiveChatFolder', (global, actions, payload) => {\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddReducer('loadMoreMembers', (global) => {\n  (async () => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (!chat || isChatBasicGroup(chat)) {\n      return;\n    }\n\n    const offset = (chat.fullInfo && chat.fullInfo.members && chat.fullInfo.members.length) || undefined;\n    const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n    if (!result) {\n      return;\n    }\n\n    const { members, users } = result;\n    if (!members || !members.length) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        members: [\n          ...((chat.fullInfo || {}).members || []),\n          ...(members || []),\n        ],\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('addChatMembers', (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as number[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  (async () => {\n    await callApi('addChatMembers', chat, users);\n    actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n    loadFullChat(chat);\n  })();\n});\n\naddReducer('deleteChatMember', (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  (async () => {\n    await callApi('deleteChatMember', chat, user);\n    loadFullChat(chat);\n  })();\n});\n\nasync function loadChats(listType: 'active' | 'archived', offsetId?: number, offsetDate?: number) {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: getGlobal().chats.orderedPinnedIds[listType] === undefined,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChatListIds(global, listType, chatIds);\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nasync function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return;\n  }\n\n  const { users, fullInfo } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateChat(global, chat.id, { fullInfo });\n\n  setGlobal(global);\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChannel = await callApi('createChannel', { title, about, users });\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: channelId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  const createdChat = await callApi('createGroupChat', { title, users });\n  if (!createdChat) {\n    return;\n  }\n\n  const { id: chatId } = createdChat;\n\n  let global = getGlobal();\n  global = updateChat(global, chatId, createdChat);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getDispatch().openChat({ id: chatId });\n\n  if (chatId && photo) {\n    await callApi('editChatPhoto', { chatId, photo });\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    if (channelPostId) {\n      actions.focusMessage({ chatId: localChat.id, messageId: channelPostId });\n    } else {\n      actions.openChat({ id: localChat.id });\n    }\n    return;\n  }\n\n  const previousChat = selectCurrentChat(global);\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    if (previousChat) {\n      actions.openChat({ id: previousChat.id });\n    }\n\n    actions.showNotification({ message: 'User does not exist' });\n\n    return;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else {\n    actions.openChat({ id: chat.id });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MAX_MEDIA_FILES_FOR_ALBUM, MESSAGE_LIST_SLICE } from '../../../config';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { areSortedArraysIntersecting, buildCollectionByKey, split } from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n} from '../../selectors';\nimport { rafPromise, throttle } from '../../../util/schedulers';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_IOS } from '../../../util/environment';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runThrottledForMarkRead = throttle((cb) => cb(), 1000, true);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const { chatId, messageId, replyOriginForId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void loadMessage(chat, messageId, replyOriginForId);\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n  };\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage && chat.lastMessage.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const { maxId } = payload!;\n\n  runThrottledForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (fromChat && toChat && messages && messages.length) {\n    void forwardMessages(fromChat, toChat, messages);\n  }\n});\n\naddReducer('loadScheduledHistory', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { hash } = global.scheduledMessages.byChatId[chat.id] || {};\n\n  void loadScheduledHistory(chat, hash);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text: string;\n  entities: ApiMessageEntity[];\n  replyingTo: number;\n  attachment: ApiAttachment;\n  sticker: ApiSticker;\n  gif: ApiVideo;\n  poll: ApiNewPoll;\n  serverTimeOffset?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nfunction forwardMessages(\n  fromChat: ApiChat,\n  toChat: ApiChat,\n  messages: ApiMessage[],\n) {\n  callApi('forwardMessages', {\n    fromChat,\n    toChat,\n    messages,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const isUnique = (v: number, i: number, a: number[]) => a.indexOf(v) === i;\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: [\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ].filter(isUnique),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadMessageLink', (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchMessageLink', { chat, message });\n\n    if (result) {\n      copyTextToClipboard(result.link);\n    }\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat, historyHash?: number) {\n  const result = await callApi('fetchScheduledHistory', { chat, hash: historyHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId, hash);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 500;\nconst ADDED_SETS_THROTTLE_CHUNK = 50;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords && currentEmojiKeywords.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords && currentEmojiKeywords.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash = 0) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash = 0) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash = 0) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash = 0) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string) {\n  const stickerSet = await callApi('fetchStickers', { stickerSetId, accessHash });\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\nasync function searchStickers(query: string, hash = 0) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash = 0) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash = 0) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const { nextOffsetId } = (resultsByType && resultsByType[type as ApiGlobalMessageSearchType]) || {};\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalUsers.map(({ id }) => id),\n      userIds: globalChats.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  updateUsers,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectUser, selectChat, selectCurrentMessageList, selectDraft, selectChatMessage, selectThreadInfo,\n} from '../../selectors';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', (global, actions) => {\n  void afterSync(actions);\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync(actions: GlobalActions) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  actions.loadFavoriteStickers();\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n  if (!result) {\n    return undefined;\n  }\n\n  let global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isChatPrivate(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n    },\n  };\n\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId).map(Number);\n  const draftsByChatId = draftChatIds.reduce<Record<number, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    return draft ? { ...acc, [chatId]: draft } : acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const byId = buildCollectionByKey(result.messages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {\n            [currentChatId]: {\n              byId,\n              threadsById: {\n                [MAIN_THREAD_ID]: {\n                  ...(currentMessageListInfo && currentMessageListInfo.threadsById[MAIN_THREAD_ID]),\n                  listedIds,\n                  viewportIds: listedIds,\n                  outlyingIds: undefined,\n                },\n              },\n            },\n          },\n        },\n      };\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin)\n            .map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin && currentMessageListInfoOrigin.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo && currentMessageListInfo.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).map(Number).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const updatedUsers = await callApi('fetchUsers', { users });\n  if (!updatedUsers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results ? results.nextOffsetId : undefined;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo ? threadInfo.topMessageId : undefined;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults ? currentResults.nextOffsetId : undefined;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const updatedUsers = await callApi('fetchUsers', { users: [user] });\n    if (!updatedUsers) {\n      return;\n    }\n\n    global = getGlobal();\n    global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const {\n    serverTimeOffset,\n    topPeers: {\n      hash, lastRequestedAt,\n    },\n  } = global;\n\n  if (!lastRequestedAt || Date.now() / 1000 + serverTimeOffset - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers(hash);\n  }\n});\n\naddReducer('loadContactList', (global) => {\n  const { hash } = global.contactList || {};\n  void loadContactList(hash);\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteUser', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteUser(userId);\n});\n\nasync function loadTopUsers(usersHash?: number) {\n  const result = await callApi('fetchTopUsers', { hash: usersHash });\n  if (!result) {\n    return;\n  }\n\n  const { hash, ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      hash,\n      userIds: ids,\n      lastRequestedAt: Date.now() / 1000 + global.serverTimeOffset,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList(hash?: number) {\n  const contactList = await callApi('fetchContactList', { hash });\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      hash: contactList.hash,\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: number,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  const result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteUser(userId: number) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteUser', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isChatPrivate(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport { RE_TME_INVITE_LINK, RE_TME_LINK } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectReplyingToId, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60000; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_INVITE_LINK) || button.value.match(RE_TME_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  if (!currentUserId || !chat) {\n    return;\n  }\n\n  void sendBotCommand(chat, currentUserId, command);\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { serverTimeOffset } = global;\n  const { hash, lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && Date.now() + serverTimeOffset - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots', { hash });\n    if (!result) {\n      return;\n    }\n\n    const { hash: newHash, ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        hash: newHash,\n        userIds: ids,\n        lastRequestedAt: Date.now(),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runThrottledForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n  });\n});\n\naddReducer('resetInlineBot', ((global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n}));\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n} : {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: number;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(inlineBotData && inlineBotData.query !== query && { offset: undefined }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    isGallery: result.isGallery,\n    switchPm: result.switchPm,\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(chat: ApiChat, currentUserId: number, command: string) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result || !result.message) {\n    return;\n  }\n\n  const { message, alert: isError } = result;\n\n  if (isError) {\n    getDispatch().showDialog({ data: { message } });\n  } else {\n    getDispatch().showNotification({ message });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport {\n  ApiPrivacyKey, PrivacyVisibility, ProfileEditProgress, IInputPrivacyRules, IInputPrivacyContact,\n  UPLOADING_WALLPAPER_SLUG,\n} from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { selectUser } from '../../selectors';\nimport {\n  addUsers, addBlockedContact, updateChats, updateUser, removeBlockedContact, replaceSettings, updateNotifySettings,\n  addNotifyExceptions,\n} from '../../reducers';\nimport { isChatPrivate } from '../../helpers';\n\naddReducer('updateProfile', (global, actions, payload) => {\n  const {\n    photo, firstName, lastName, bio: about, username,\n  } = payload!;\n\n  (async () => {\n    const { currentUserId } = global;\n    if (!currentUserId) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.InProgress,\n      },\n    });\n\n    if (photo) {\n      await callApi('updateProfilePhoto', photo);\n    }\n\n    if (firstName || lastName || about) {\n      const result = await callApi('updateProfile', { firstName, lastName, about });\n      if (result) {\n        global = getGlobal();\n        const currentUser = currentUserId && selectUser(global, currentUserId);\n\n        if (currentUser) {\n          setGlobal(updateUser(\n            global,\n            currentUser.id,\n            {\n              firstName,\n              lastName,\n              fullInfo: {\n                ...currentUser.fullInfo,\n                bio: about,\n              },\n            },\n          ));\n        }\n      }\n    }\n\n    if (username) {\n      const result = await callApi('updateUsername', username);\n      if (result && currentUserId) {\n        setGlobal(updateUser(getGlobal(), currentUserId, { username }));\n      }\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      profileEdit: {\n        progress: ProfileEditProgress.Complete,\n      },\n    });\n  })();\n});\n\naddReducer('checkUsername', (global, actions, payload) => {\n  const { username } = payload!;\n\n  (async () => {\n    // No need to check the username if profile update is already in progress\n    if (global.profileEdit && global.profileEdit.progress === ProfileEditProgress.InProgress) {\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      profileEdit: {\n        progress: global.profileEdit ? global.profileEdit.progress : ProfileEditProgress.Idle,\n        isUsernameAvailable: undefined,\n      },\n    });\n\n    const isUsernameAvailable = await callApi('checkUsername', username);\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      profileEdit: {\n        ...global.profileEdit!,\n        isUsernameAvailable,\n      },\n    });\n  })();\n});\n\naddReducer('loadWallpapers', () => {\n  (async () => {\n    const result = await callApi('fetchWallpapers', 0);\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: result.wallpapers,\n      },\n    });\n  })();\n});\n\naddReducer('uploadWallpaper', (global, actions, payload) => {\n  const file = payload;\n  const previewBlobUrl = URL.createObjectURL(file);\n\n  setGlobal({\n    ...global,\n    settings: {\n      ...global.settings,\n      loadedWallpapers: [\n        {\n          slug: UPLOADING_WALLPAPER_SLUG,\n          document: {\n            fileName: '',\n            size: file.size,\n            mimeType: file.type,\n            previewBlobUrl,\n          },\n        },\n        ...(global.settings.loadedWallpapers || []),\n      ],\n    },\n  });\n\n  (async () => {\n    const result = await callApi('uploadWallpaper', file);\n    if (!result) {\n      return;\n    }\n\n    const { wallpaper } = result;\n\n    global = getGlobal();\n    if (!global.settings.loadedWallpapers) {\n      return;\n    }\n\n    const firstWallpaper = global.settings.loadedWallpapers[0];\n    if (!firstWallpaper || firstWallpaper.slug !== UPLOADING_WALLPAPER_SLUG) {\n      return;\n    }\n\n    const withLocalMedia = {\n      ...wallpaper,\n      document: {\n        ...wallpaper.document,\n        previewBlobUrl,\n      },\n    };\n\n    setGlobal({\n      ...global,\n      settings: {\n        ...global.settings,\n        loadedWallpapers: [\n          withLocalMedia,\n          ...global.settings.loadedWallpapers.slice(1),\n        ],\n      },\n    });\n  })();\n});\n\naddReducer('loadBlockedContacts', () => {\n  (async () => {\n    const result = await callApi('fetchBlockedContacts');\n\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n\n    if (result.users && result.users.length) {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    }\n    if (result.chats && result.chats.length) {\n      newGlobal = updateChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n    }\n\n    newGlobal = {\n      ...newGlobal,\n      blocked: {\n        ...newGlobal.blocked,\n        ids: [...(newGlobal.blocked.ids || []), ...result.blockedIds],\n        totalCount: result.totalCount,\n      },\n    };\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('blockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n\n  (async () => {\n    const result = await callApi('blockContact', contactId);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(addBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('unblockContact', (global, actions, payload) => {\n  const { contactId } = payload!;\n  let accessHash: string | undefined;\n  const isPrivate = isChatPrivate(contactId);\n\n  if (isPrivate) {\n    const user = selectUser(global, contactId);\n    if (!user) {\n      return;\n    }\n\n    accessHash = user.accessHash;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', contactId, accessHash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal(removeBlockedContact(newGlobal, contactId));\n  })();\n});\n\naddReducer('loadAuthorizations', () => {\n  (async () => {\n    const result = await callApi('fetchAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    setGlobal({\n      ...getGlobal(),\n      activeSessions: result,\n    });\n  })();\n});\n\naddReducer('terminateAuthorization', (global, actions, payload) => {\n  const { hash } = payload!;\n\n  (async () => {\n    const result = await callApi('terminateAuthorization', hash);\n    if (!result) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      activeSessions: newGlobal.activeSessions.filter((session) => session.hash !== hash),\n    });\n  })();\n});\n\naddReducer('terminateAllAuthorizations', () => {\n  (async () => {\n    const result = await callApi('terminateAllAuthorizations');\n    if (!result) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      activeSessions: global.activeSessions.filter((session) => session.isCurrent),\n    });\n  })();\n});\n\naddReducer('loadNotificationExceptions', (global) => {\n  const { serverTimeOffset } = global;\n\n  (async () => {\n    const result = await callApi('fetchNotificationExceptions', { serverTimeOffset });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(addNotifyExceptions(getGlobal(), result));\n  })();\n});\n\naddReducer('loadNotificationSettings', (global) => {\n  const { serverTimeOffset } = global;\n  (async () => {\n    const result = await callApi('fetchNotificationSettings', {\n      serverTimeOffset,\n    });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateNotificationSettings', (global, actions, payload) => {\n  const { peerType, isSilent, shouldShowPreviews } = payload!;\n\n  (async () => {\n    const result = await callApi('updateNotificationSettings', peerType, { isSilent, shouldShowPreviews });\n\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateNotifySettings(getGlobal(), peerType, isSilent, shouldShowPreviews));\n  })();\n});\n\naddReducer('updateContactSignUpNotification', (global, actions, payload) => {\n  const { isSilent } = payload!;\n\n  (async () => {\n    const result = await callApi('updateContactSignUpNotification', isSilent);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { hasContactJoinedNotifications: !isSilent }));\n  })();\n});\n\naddReducer('loadLanguages', () => {\n  (async () => {\n    const result = await callApi('fetchLanguages');\n    if (!result) {\n      return;\n    }\n\n    setGlobal(replaceSettings(getGlobal(), { languages: result }));\n  })();\n});\n\naddReducer('loadPrivacySettings', () => {\n  (async () => {\n    const [\n      phoneNumberSettings, lastSeenSettings, profilePhotoSettings, forwardsSettings, chatInviteSettings,\n    ] = await Promise.all([\n      callApi('fetchPrivacySettings', 'phoneNumber'),\n      callApi('fetchPrivacySettings', 'lastSeen'),\n      callApi('fetchPrivacySettings', 'profilePhoto'),\n      callApi('fetchPrivacySettings', 'forwards'),\n      callApi('fetchPrivacySettings', 'chatInvite'),\n    ]);\n\n    if (\n      !phoneNumberSettings || !lastSeenSettings || !profilePhotoSettings || !forwardsSettings || !chatInviteSettings\n    ) {\n      return;\n    }\n\n    const global = getGlobal();\n\n    global.settings.privacy.phoneNumber = phoneNumberSettings;\n    global.settings.privacy.lastSeen = lastSeenSettings;\n    global.settings.privacy.profilePhoto = profilePhotoSettings;\n    global.settings.privacy.forwards = forwardsSettings;\n    global.settings.privacy.chatInvite = chatInviteSettings;\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('setPrivacyVisibility', (global, actions, payload) => {\n  const { privacyKey, visibility } = payload!;\n\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility,\n    allowedIds: [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\naddReducer('setPrivacySettings', (global, actions, payload) => {\n  const { privacyKey, isAllowList, contactsIds } = payload!;\n  const {\n    privacy: { [privacyKey as ApiPrivacyKey]: settings },\n  } = global.settings;\n\n  if (!settings) {\n    return;\n  }\n\n  const rules = buildInputPrivacyRules(global, {\n    visibility: settings.visibility,\n    allowedIds: isAllowList ? contactsIds : [...settings.allowUserIds, ...settings.allowChatIds],\n    deniedIds: !isAllowList ? contactsIds : [...settings.blockUserIds, ...settings.blockChatIds],\n  });\n\n  (async () => {\n    const result = await callApi('setPrivacySettings', privacyKey, rules);\n\n    if (result) {\n      const newGlobal = getGlobal();\n\n      newGlobal.settings.privacy[privacyKey as ApiPrivacyKey] = result;\n\n      setGlobal(newGlobal);\n    }\n  })();\n});\n\nfunction buildInputPrivacyRules(global: GlobalState, {\n  visibility,\n  allowedIds,\n  deniedIds,\n}: {\n  visibility: PrivacyVisibility;\n  allowedIds: number[];\n  deniedIds: number[];\n}): IInputPrivacyRules {\n  const {\n    users: { byId: usersById },\n    chats: { byId: chatsById },\n  } = global;\n\n  const rules: IInputPrivacyRules = {\n    visibility,\n  };\n  let users: IInputPrivacyContact[];\n  let chats: IInputPrivacyContact[];\n\n  const collectUsers = (userId: number) => {\n    if (!isChatPrivate(userId)) {\n      return undefined;\n    }\n    const { id, accessHash } = usersById[userId] || {};\n    if (!id) {\n      return undefined;\n    }\n\n    return { id, accessHash };\n  };\n\n  const collectChats = (userId: number) => {\n    if (isChatPrivate(userId)) {\n      return undefined;\n    }\n    const chat = chatsById[userId];\n\n    return chat ? { id: chat.id } : undefined;\n  };\n\n  if (visibility === 'contacts' || visibility === 'nobody') {\n    users = allowedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = allowedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.allowedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.allowedChats = chats;\n    }\n  }\n\n  if (visibility === 'everybody' || visibility === 'contacts') {\n    users = deniedIds.map(collectUsers).filter(Boolean) as IInputPrivacyContact[];\n    chats = deniedIds.map(collectChats).filter(Boolean) as IInputPrivacyContact[];\n\n    if (users.length > 0) {\n      rules.blockedUsers = users;\n    }\n    if (chats.length > 0) {\n      rules.blockedChats = chats;\n    }\n  }\n\n  return rules;\n}\n\naddReducer('updateIsOnline', (global, actions, payload) => {\n  callApi('updateIsOnline', payload);\n});\n\naddReducer('loadContentSettings', () => {\n  (async () => {\n    const result = await callApi('fetchContentSettings');\n    if (!result) return;\n\n    setGlobal(replaceSettings(getGlobal(), result));\n  })();\n});\n\naddReducer('updateContentSettings', (global, actions, payload) => {\n  (async () => {\n    setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: payload }));\n\n    const result = await callApi('updateContentSettings', payload);\n    if (!result) {\n      setGlobal(replaceSettings(getGlobal(), { isSensitiveEnabled: !payload }));\n    }\n  })();\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types/index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n} from '../../selectors';\n\nimport { getStripeError } from '../../helpers/payments';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const messageId = selectPaymentMessageId(global);\n  if (!messageId) {\n    return;\n  }\n  validateRequestedInfo(messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', { messageId, requestInfo, shouldSave });\n  if (!result) {\n    return;\n  }\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { messageId } = payload;\n  if (!messageId) {\n    return;\n  }\n  getPaymentForm(messageId);\n});\n\n\nasync function getPaymentForm(messageId: number) {\n  const result = await callApi('getPaymentForm', { messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  if (!messageId || !receiptMessageId || !chatId) {\n    return;\n  }\n  getReceipt(messageId, receiptMessageId, chatId);\n});\n\nasync function getReceipt(messageId: number, receiptMessageId: number, chatId: number) {\n  const result = await callApi('getReceipt', receiptMessageId);\n  if (!result) {\n    return;\n  }\n  let global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  sendStipeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const messageId = selectPaymentMessageId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!messageId || !publishableKey) {\n    return;\n  }\n  sendPaymentForm(messageId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStipeCredentials(data: {\n  cardNumber: string;\n  cardholder?: string;\n  expiryMonth: string;\n  expiryYear: string;\n  cvv: string;\n  country: string;\n  zip: string;\n},\npublishableKey: string) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  messageId: number,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    messageId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { showNewMessageNotification } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  replaceChatListIds,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1000;\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), CURRENT_CHAT_UNREAD_DELAY, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      const unreadCount = selectCountNotMutedUnread(newGlobal);\n      runThrottledForUpdateAppBadge(() => updateAppBadge(unreadCount));\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      const { [listType]: listIds } = global.chats.listIds;\n\n      if (listIds) {\n        global = replaceChatListIds(global, listType, listIds.filter((listId) => listId !== update.id));\n      }\n\n      global = updateChat(global, update.id, { isNotJoined: true });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      const unreadCount = selectCountNotMutedUnread(getGlobal());\n      updateAppBadge(unreadCount);\n      showNewMessageNotification({ chat, message, isActiveChat });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = 'channelId' in update ? update.channelId : selectCommonBoxChatId(global, id);\n        const chat = selectChat(global, chatId);\n        if (chat && chat.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo && targetChat.fullInfo.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat && chat.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n} from '../../reducers';\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n} from '../../selectors';\nimport { getMessageContent, isChatPrivate, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { chatId, id, message } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content && message.content.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isChatPrivate(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message && message.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: number, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat && chat.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first uread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!firstMessageId && isMessageLocal(message)) {\n    return global;\n  }\n\n  if (threadInfo) {\n    global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n    if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n      global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n      if (!firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n      }\n\n      if (!threadInfo.lastMessageId) {\n        global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n          ...threadInfo,\n          lastMessageId: message.id,\n        });\n      }\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: number,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId] && chats.byId[chatId].lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: number) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    unique(threadIdsToUpdate).forEach((threadId) => {\n      actions.requestThreadInfoUpdate({ chatId, threadId });\n    });\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: number[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: number | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteUser, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: [number, ApiUserStatus][] = [];\n\nfunction scheduleStatusUpdate(userId: number, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates.push([userId, statusUpdate]);\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n  pendingStatusUpdates.forEach(([userId, statusUpdate]) => {\n    global = updateUser(global, userId, {\n      status: statusUpdate,\n    });\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = [];\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteUser': {\n      return deleteUser(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          hash: 0,\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { ChangeEvent } from 'react';\nimport React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Switcher.scss';\n\ntype OwnProps = {\n  id?: string;\n  name?: string;\n  value?: string;\n  label: string;\n  checked?: boolean;\n  disabled?: boolean;\n  inactive?: boolean;\n  noAnimation?: boolean;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  onCheck?: (isChecked: boolean) => void;\n};\n\nconst Switcher: FC<OwnProps> = ({\n  id,\n  name,\n  value,\n  label,\n  checked = false,\n  disabled,\n  inactive,\n  noAnimation,\n  onChange,\n  onCheck,\n}) => {\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) {\n      onChange(e);\n    }\n\n    if (onCheck) {\n      onCheck(e.currentTarget.checked);\n    }\n  }, [onChange, onCheck]);\n\n  const className = buildClassName(\n    'Switcher',\n    disabled && 'disabled',\n    inactive && 'inactive',\n    noAnimation && 'no-animation',\n  );\n\n  return (\n    <label className={className} title={label}>\n      <input\n        type=\"checkbox\"\n        id={id}\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={handleChange}\n      />\n      <span className=\"widget\" />\n    </label>\n  );\n};\n\nexport default memo(Switcher);\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { isChatArchived } from '../../../modules/helpers';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { selectTheme } from '../../../modules/selectors';\nimport switchTheme from '../../../util/switchTheme';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: number;\n  globalSearchChatId?: number;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'openTipsChat' | 'setGlobalSearchDate' | 'setGlobalSearchChatId' | 'setSettingOption'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\nconst PERMANENT_VERSION_KEY = 'kz_version';\n\nconst LeftMainHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  setGlobalSearchChatId,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  openChat,\n  openTipsChat,\n  setGlobalSearchDate,\n  setSettingOption,\n}) => {\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify('K'));\n    disableHistoryBack();\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} alpha ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={openTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'openTipsChat',\n    'setGlobalSearchDate',\n    'setGlobalSearchChatId',\n    'setSettingOption',\n  ]),\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import { useRef } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useForceUpdate from './useForceUpdate';\n\nexport default <R extends any, D extends any[]>(resolverFn: () => R, ms: number, dependencies: D) => {\n  const valueRef = useRef<R>();\n  const runThrottled = useThrottle(ms);\n  const forceUpdate = useForceUpdate();\n\n  useOnChange(() => {\n    let isSync = true;\n    runThrottled(() => {\n      valueRef.current = resolverFn();\n\n      if (!isSync) {\n        forceUpdate();\n      }\n    });\n    isSync = false;\n  }, dependencies);\n\n  return valueRef.current;\n};\n","import { useMemo } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\n\nexport default (ms: number) => {\n  return useMemo(() => {\n    return throttle((cb) => cb(), ms);\n  }, [ms]);\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { NotifyException, NotifySettings } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: number;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadChatFolders' | 'setActiveChatFolder' | 'openChat'>;\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<StateProps & DispatchProps> = ({\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  loadChatFolders,\n  setActiveChatFolder,\n  openChat,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang('FilterAllChats') },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById && folderCountersById[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index);\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1));\n        }\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.metaKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder);\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ title }) => title === folderTabs![activeChatFolder].title);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return <ChatList folderType=\"all\" isActive={isActive} />;\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        noChatsText={lang('FilterNoChatsToDisplay')}\n        isActive={isActive}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs && folderTabs.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n    } = global;\n\n    return {\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadChatFolders',\n    'setActiveChatFolder',\n    'openChat',\n  ]),\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  onSearchQuery,\n  onContentChange,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setGlobalSearchQuery' | 'setGlobalSearchChatId' | 'resetChatCreation' | 'setGlobalSearchDate' |\n  'loadPasswordInfo' | 'clearTwoFaError'\n)>;\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  setGlobalSearchQuery,\n  setGlobalSearchChatId,\n  resetChatCreation,\n  setGlobalSearchDate,\n  loadPasswordInfo,\n  clearTwoFaError,\n}) => {\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <Transition\n      id=\"LeftColumn\"\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n    >\n      {(isActive) => {\n        switch (contentType) {\n          case ContentType.Archived:\n            return (\n              <ArchivedChats\n                isActive={isActive}\n                onReset={handleReset}\n                onContentChange={setContent}\n              />\n            );\n          case ContentType.Settings:\n            return (\n              <Settings\n                isActive={isActive}\n                currentScreen={settingsScreen}\n                onScreenSelect={handleSettingsScreenSelect}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n          case ContentType.NewChannel:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                isChannel\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          case ContentType.NewGroup:\n            return (\n              <NewChat\n                key={lastResetTime}\n                isActive={isActive}\n                content={content}\n                onContentChange={setContent}\n                onReset={handleReset}\n              />\n            );\n          default:\n            return (\n              <LeftMain\n                content={content}\n                searchQuery={searchQuery}\n                searchDate={searchDate}\n                contactsFilter={contactsFilter}\n                onContentChange={setContent}\n                onSearchQuery={handleSearchQuery}\n                onReset={handleReset}\n                shouldSkipTransition={shouldSkipHistoryAnimations}\n              />\n            );\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setGlobalSearchQuery', 'setGlobalSearchChatId', 'resetChatCreation', 'setGlobalSearchDate',\n    'loadPasswordInfo', 'clearTwoFaError',\n  ]),\n)(LeftColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nconst SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nconst MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport { isChatChannel, isChatSuperGroup } from '../../modules/helpers';\nimport {\n  selectChat,\n  selectIsChatBotNotStarted, selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canSelect?: boolean;\n  canLeave?: boolean;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'joinChannel' | 'sendBotCommand' | 'openLocalTextSearch'>;\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canSelect,\n  canLeave,\n  isRightColumnShown,\n  joinChannel,\n  sendBotCommand,\n  openLocalTextSearch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleSubscribeClick}\n        >\n          {lang(isChannel ? 'Subscribe' : 'Join Group')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n        <Button\n          size=\"tiny\"\n          ripple\n          fluid\n          onClick={handleStartBot}\n        >\n          {lang('BotStart')}\n        </Button>\n      )}\n      {!IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n        <Button\n          round\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleSearchClick}\n          ariaLabel=\"Search in this chat\"\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n      {(IS_SINGLE_COLUMN_LAYOUT || !canSubscribe) && (\n        <Button\n          ref={menuButtonRef}\n          className={isMenuOpen ? 'active' : ''}\n          round\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          size=\"smaller\"\n          color=\"translucent\"\n          disabled={noMenu}\n          ariaLabel=\"More actions\"\n          onClick={handleHeaderMenuOpen}\n        >\n          <i className=\"icon-more\" />\n        </Button>\n      )}\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          isChannel={isChannel}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canMute={canMute}\n          canSelect={canSelect}\n          canLeave={canLeave}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (chat && chat.isRestricted) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canStartBot = Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canSelect = !selectIsInSelectMode(global);\n    const canLeave = isMainThread && !canSubscribe;\n\n    const noMenu = !(\n      (IS_SINGLE_COLUMN_LAYOUT && canSubscribe)\n      || (IS_SINGLE_COLUMN_LAYOUT && canSearch)\n      || canMute\n      || canSelect\n      || canLeave\n    );\n\n    return {\n      noMenu,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canSubscribe,\n      canSearch,\n      canMute,\n      canSelect,\n      canLeave,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'joinChannel', 'sendBotCommand', 'openLocalTextSearch',\n  ]),\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbnail = message && getMessageMediaThumbDataUri(message);\n  const { sticker } = (message && message.content) || {};\n  const shouldDecodeThumbnail = thumbnail && sticker && !isWebpSupported() && thumbnail.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message && message.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbnail!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbnail]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbnail;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef && containerRef.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageAudio, getMessageKey, getMessageMediaHash, getSenderTitle,\n} from '../../modules/helpers';\nimport { selectSender } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage' | 'closeAudioPlayer'>;\n\nconst AudioPlayer: FC<OwnProps & StateProps & DispatchProps> = ({\n  message, className, noUi, sender, focusMessage, closeAudioPlayer,\n}) => {\n  const lang = useLang();\n\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const { playPause, isPlaying } = useAudioPlayer(\n    getMessageKey(message), getMediaDuration(message)!, mediaData, undefined, undefined, true,\n  );\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n  }, [closeAudioPlayer, isPlaying, playPause]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  const audio = getMessageAudio(message);\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n\n    return { sender };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusMessage', 'closeAudioPlayer']),\n)(AudioPlayer);\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUser,\n} from '../../api/types';\nimport { NotifyException, NotifySettings } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isChatPrivate,\n  isChatArchived,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n  selectIsChatMuted,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadOriginChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectNotifySettings,\n  selectNotifyExceptions,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { pick } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<number, ApiChat>;\n  originChatId: number;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChatWithInfo' | 'pinMessage' | 'focusMessage' | 'openChat' | 'loadPinnedMessages' | 'toggleLeftColumn' |\n  'exitMessageSelectMode'\n)>;\n\nconst MiddleHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  originChatId,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  notifySettings,\n  notifyExceptions,\n  shouldSkipHistoryAnimations,\n  openChatWithInfo,\n  pinMessage,\n  focusMessage,\n  openChat,\n  loadPinnedMessages,\n  toggleLeftColumn,\n  exitMessageSelectMode,\n}) => {\n  const lang = useLang();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds) ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread') {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      return;\n    }\n\n    if (messageListType === 'scheduled' && isSelectModeActive) {\n      exitMessageSelectMode();\n    }\n\n    openChat({ id: originChatId, threadId: MAIN_THREAD_ID });\n  }, [\n    openChat, originChatId, threadId, messageListType, toggleLeftColumn, isSelectModeActive, exitMessageSelectMode,\n    shouldShowCloseButton,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    let isActive = false;\n\n    const totalCount = Object.values(chatsById).reduce((total, currentChat) => {\n      if (isChatArchived(currentChat)) {\n        return total;\n      }\n\n      const count = currentChat.unreadCount || 0;\n      if (\n        count && (!selectIsChatMuted(currentChat, notifySettings, notifyExceptions) || currentChat.unreadMentionsCount)\n      ) {\n        isActive = true;\n      }\n\n      return total + count;\n    }, 0);\n\n    if (!totalCount) {\n      return undefined;\n    }\n\n    return {\n      isActive,\n      totalCount,\n    };\n  }, [isLeftColumnHideable, chatsById, notifySettings, notifyExceptions]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(pinnedMessage && !shouldRenderAudioPlayer);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount)}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount)}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {isLeftColumnHideable && renderBackButton(shouldShowCloseButton, unreadCount)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isChatPrivate(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, unreadCountInfo?: typeof unreadCount) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={asClose ? 'Close' : 'Back'}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {unreadCountInfo && (\n          <div className={`unread-count ${unreadCountInfo.isActive ? 'active' : ''}`}>\n            {formatIntegerCompact(unreadCountInfo.totalCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={messageListType === 'thread' ? threadId : 1}\n      >\n        {renderInfo}\n      </Transition>\n\n      <div className=\"header-tools\">\n        {shouldRenderPinnedMessage && renderingPinnedMessage && !shouldRenderAudioPlayer && (\n          <HeaderPinnedMessage\n            key={chatId}\n            message={renderingPinnedMessage}\n            count={pinnedMessagesCount}\n            index={pinnedMessageIndex}\n            customTitle={renderingPinnedMessageTitle}\n            className={pinnedMessageClassNames}\n            onUnpinMessage={canUnpin ? handleUnpinMessage : undefined}\n            onClick={handlePinnedMessageClick}\n            onAllPinnedClick={handleAllPinnedClick}\n          />\n        )}\n        {shouldRenderAudioPlayer && renderingAudioMessage && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds && pinnedIds.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds && scheduledIds.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (threadInfo) {\n        messagesCount = threadInfo.messagesCount;\n      }\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      originChatId: originChat ? originChat.id : chatId,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      shouldSkipHistoryAnimations,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds && pinnedMessageIds.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChatWithInfo',\n    'pinMessage',\n    'focusMessage',\n    'openChat',\n    'loadPinnedMessages',\n    'toggleLeftColumn',\n    'exitMessageSelectMode',\n  ]),\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import React from '../../../lib/teact/teact';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nexport function preventMessageInputBlur(e: React.MouseEvent<HTMLElement>) {\n  if (\n    IS_SINGLE_COLUMN_LAYOUT\n    || !document.activeElement\n    || document.activeElement.id !== EDITABLE_INPUT_ID\n    || e.target !== e.currentTarget\n  ) {\n    return;\n  }\n\n  e.preventDefault();\n}\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, false);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport { debounce } from '../util/schedulers';\n\nexport default function useDebounce(ms: number, shouldRunFirst?: boolean, shouldRunLast?: boolean) {\n  return useMemo(() => {\n    return debounce((cb) => cb(), ms, shouldRunFirst, shouldRunLast);\n  }, [ms, shouldRunFirst, shouldRunLast]);\n}\n","import { MutableRefObject } from 'react';\nimport React, { FC, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../config';\nimport resetScroll from '../../util/resetScroll';\nimport { useIntersectionObserver, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\n\ntype OwnProps = {\n  containerRef: MutableRefObject<HTMLDivElement | null>;\n  className: string;\n  messageIds: number[];\n  loadMoreForwards?: NoneToVoidFunction;\n  loadMoreBackwards?: NoneToVoidFunction;\n  isViewportNewest?: boolean;\n  firstUnreadId?: number;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  children: any;\n};\n\nconst FAB_THRESHOLD = 50;\nconst TOOLS_FREEZE_TIMEOUT = 100;\n\nconst MessageScroll: FC<OwnProps> = ({\n  containerRef,\n  className,\n  messageIds,\n  loadMoreForwards,\n  loadMoreBackwards,\n  isViewportNewest,\n  firstUnreadId,\n  onFabToggle,\n  onNotchToggle,\n  children,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useCallback(() => {\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current!;\n    const scrollBottom = scrollHeight - scrollTop - offsetHeight;\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= 0;\n\n    onFabToggle(firstUnreadId ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }, [messageIds, isViewportNewest, containerRef, onFabToggle, firstUnreadId, onNotchToggle]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      resetScroll(containerRef.current!);\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return (\n    <div className={className} teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {children}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default MessageScroll;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMediaWithNoText = (photo || video) && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video && video.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded && !customShape) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: number,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight]);\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: number[];\n  targetMessage?: ApiMessage;\n  targetChatId?: number;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById && usersById[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img\n      id={id}\n      src={blobUrl || thumbDataUri}\n      width={width}\n      height={height}\n      alt=\"\"\n      className={isRoundVideo ? 'round' : ''}\n    />\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: () => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <span className=\"MessageMeta\" dir={lang.isRtl ? 'rtl' : 'ltr'} onClick={onClick}>\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\">\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(isMediaReady, 'slow');\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && shouldRenderFullMedia && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","const SELECTED_APPENDIX_BACKGROUND = Promise.resolve('rgba(255,255,255,1)');\n\nexport default function getCustomAppendixBg(src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean) {\n  return isSelected ? SELECTED_APPENDIX_BACKGROUND : getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = isDownloadAllowed && isIntersecting;\n  const {\n    mediaData, downloadProgress,\n  } = useMediaWithDownloadProgress(getMessageMediaHash(message, size), !shouldDownload);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(message, uploadProgress || downloadProgress, shouldDownload && !fullMediaData);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled, 'slow');\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {shouldRenderThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px`}\n        />\n      )}\n      {shouldRenderFullMedia && (\n        <img\n          src={fullMediaData}\n          className={`full-media ${transitionClassNames}`}\n          width={width}\n          height={height}\n          alt=\"\"\n        />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {!fullMediaData && !isDownloadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring && (\n        <span className=\"message-upload-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { RefObject } from 'react';\nimport { useCallback, useRef } from '../lib/teact/teact';\n\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport safePlay from '../util/safePlay';\n\nexport default function useHeavyAnimationCheckForVideo(playerRef: RefObject<HTMLVideoElement>, shouldPlay: boolean) {\n  const shouldPlayRef = useRef();\n  shouldPlayRef.current = shouldPlay;\n\n  const pause = useCallback(() => {\n    if (playerRef.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const play = useCallback(() => {\n    if (playerRef.current && shouldPlayRef.current) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  useHeavyAnimationCheck(pause, play);\n}\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport safePlay from '../../../../util/safePlay';\n\nexport default (playerRef: { current: HTMLVideoElement | null }, isPlayAllowed = false) => {\n  const wasPlaying = useRef(false);\n  const isFrozen = useRef(false);\n\n  const freezePlaying = useCallback(() => {\n    isFrozen.current = true;\n\n    if (!isPlayAllowed || !playerRef.current) {\n      return;\n    }\n\n    if (!wasPlaying.current) {\n      wasPlaying.current = !playerRef.current.paused;\n    }\n\n    playerRef.current.pause();\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    // At this point HTMLVideoElement can be unmounted from the DOM\n    if (isPlayAllowed && playerRef.current && wasPlaying.current && document.body.contains(playerRef.current)) {\n      safePlay(playerRef.current);\n    }\n\n    wasPlaying.current = false;\n    isFrozen.current = false;\n  }, [isPlayAllowed, playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  if (!document.hasFocus()) {\n    freezePlaying();\n  }\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n};\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(shouldAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!shouldAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || downloadProgress,\n    shouldDownload && !isBuffered,\n  );\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(fullMediaData, 'slow');\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = video.duration || (videoRef.current && videoRef.current.duration) || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useHeavyAnimationCheckForVideo(videoRef, Boolean(isInline && shouldAutoPlay));\n\n  usePauseOnInactive(videoRef, isPlayAllowed);\n\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  const shouldRenderInlineVideo = isInline;\n  const shouldRenderPlayButton = (isDownloadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n  const shouldRenderDownloadButton = !isDownloadAllowed;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {(!isInline || shouldRenderThumb || shouldRenderInlineVideo)\n        && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${width}px; height: ${height}px;`}\n          />\n        )}\n      {previewBlobUrl && (\n        <img\n          src={previewBlobUrl}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${width}px; height: ${height}px;`}\n          alt=\"\"\n        />\n      )}\n\n      {shouldRenderInlineVideo && (\n        <video\n          ref={videoRef}\n          className={videoClassName}\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {shouldRenderPlayButton && (\n        <i className=\"icon-large-play\" />\n      )}\n      {shouldRenderSpinner && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-upload-progress\">...</span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser, ApiContact } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst Contact: FC<OwnProps & StateProps & DispatchProps> = ({\n  contact, user, openUserInfo,\n}) => {\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    return {\n      user: selectUser(global, contact.userId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(Contact);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, memo, useState,\n} from '../../lib/teact/teact';\n\nimport Checkbox from './Checkbox';\n\ntype IRadioOption = {\n  label: string;\n  subLabel?: string;\n  value: string;\n};\n\ntype OwnProps = {\n  id?: string;\n  options: IRadioOption[];\n  selected?: string[];\n  disabled?: boolean;\n  round?: boolean;\n  loadingOptions?: string[];\n  onChange: (value: string[]) => void;\n};\n\nconst CheckboxGroup: FC<OwnProps> = ({\n  id,\n  options,\n  selected = [],\n  disabled,\n  round,\n  loadingOptions,\n  onChange,\n}) => {\n  const [values, setValues] = useState<string[]>([]);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newValues: string[];\n    if (checked) {\n      newValues = [...values, value];\n    } else {\n      newValues = values.filter((v) => v !== value);\n    }\n\n    setValues(newValues);\n    onChange(newValues);\n  }, [onChange, values]);\n\n  return (\n    <div id={id} className=\"radio-group\">\n      {options.map((option) => (\n        <Checkbox\n          label={option.label}\n          subLabel={option.subLabel}\n          value={option.value}\n          checked={selected.indexOf(option.value) !== -1}\n          disabled={disabled}\n          round={round}\n          isLoading={loadingOptions ? loadingOptions.indexOf(option.value) !== -1 : undefined}\n          onChange={handleChange}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(CheckboxGroup);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result && result.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<number, ApiUser>;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('loadMessage' | 'openPollResults')>;\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  loadMessage,\n  onSendVote,\n  openPollResults,\n  serverTimeOffset,\n}) => {\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question)}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMessage', 'openPollResults']),\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  inPreview,\n  lastSyncTime,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage && webPage.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    description,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        {description && (\n          <p className=\"description-text\">{renderText(description, ['emoji', 'br'])}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport { GlobalActions } from '../../../../global/types';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\nimport { pick } from '../../../../util/iteratees';\n\ntype OwnProps = PhotoProps & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('toggleMessageSelection')>;\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps & DispatchProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      toggleMessageSelection,\n      dimensions,\n    } = props;\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e && e.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={\n          buildClassName(\n            'album-item-select-wrapper',\n            isSelected && 'is-selected',\n          )\n        }\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n    (setGlobal, actions) => pick(actions, [\n      'toggleMessageSelection',\n    ]),\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { withGlobal } from '../../../lib/teact/teactn';\nimport { pick } from '../../../util/iteratees';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'cancelSendingMessage'>;\n\nconst Album: FC<OwnProps & StateProps & DispatchProps> = ({\n  album,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  cancelSendingMessage,\n}) => {\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload ? fileUpload.progress : undefined;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom)\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          shouldAutoLoad={shouldAutoLoad}\n          shouldAutoPlay={shouldAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      uploadsById: global.fileUploads.byMessageLocalId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'cancelSendingMessage',\n  ]),\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport buildClassName from '../../../util/buildClassName';\nimport useHeavyAnimationCheckForVideo from '../../../hooks/useHeavyAnimationCheckForVideo';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport usePauseOnInactive from './hooks/usePauseOnInactive';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport safePlay from '../../../util/safePlay';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  shouldAutoLoad?: boolean;\n  shouldAutoPlay?: boolean;\n  lastSyncTime?: number;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  shouldAutoLoad,\n  shouldAutoPlay,\n  lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(shouldAutoLoad && shouldAutoPlay);\n  const shouldDownload = Boolean(isDownloadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, downloadProgress } = useMediaWithDownloadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldDownload,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = isDownloadAllowed && !isBuffered;\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasDownloadDisabled);\n  const { shouldRenderThumb, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const circumference = 94 * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `<svg width=\"200px\" height=\"200px\">\n          <circle cx=\"100\" cy=\"100\" r=\"94\" class=\"progress-circle\" transform=\"rotate(-90, 100, 100)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    requestAnimationFrame(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useHeavyAnimationCheckForVideo(playerRef, shouldPlay);\n\n  usePauseOnInactive(playerRef, Boolean(mediaData));\n\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      playerEl.currentTime = 0;\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, mediaData]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {(shouldRenderThumb || mediaData) && (\n        <div className=\"thumbnail-wrapper\">\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n            // @ts-ignore teact feature\n            style={`width: ${ROUND_VIDEO_DIMENSIONS}px; height: ${ROUND_VIDEO_DIMENSIONS}px`}\n          />\n        </div>\n      )}\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS}\n            height={ROUND_VIDEO_DIMENSIONS}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={downloadProgress} />\n        </div>\n      )}\n      {!mediaData && !isDownloadAllowed && (\n        <i className=\"icon-large-play\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted-chat\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(button.text)}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiMessage, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { isChatPrivate } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectThreadInfo } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  threadInfo: ApiThreadInfo;\n  usersById?: Record<number, ApiUser>;\n  chatsById?: Record<number, ApiChat>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openChat'>;\n\nconst CommentButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  disabled, threadInfo, usersById, chatsById, openChat,\n}) => {\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  const recentRepliers = recentReplierIds && recentReplierIds.map((peerId) => {\n    return isChatPrivate(peerId) ? usersById![peerId] : chatsById![peerId];\n  }).filter(Boolean);\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isChatPrivate(user.id) ? user as ApiUser : undefined}\n              chat={!isChatPrivate(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }) => {\n    const { threadId, chatId } = message.threadInfo!;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId) || message.threadInfo!;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      threadInfo,\n      usersById,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n  ]),\n)(CommentButton));\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport {\n  FocusDirection, IAlbum, ISettings, MediaViewerOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectShouldAutoLoadMedia,\n  selectShouldAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isChatPrivate,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForBottom: ObserveFn;\n  observeIntersectionForMedia: ObserveFn;\n  observeIntersectionForAnimatedStickers: ObserveFn;\n  album?: IAlbum;\n  noAvatars?: boolean;\n  withAvatar?: boolean;\n  withSenderName?: boolean;\n  threadId: number;\n  messageListType: MessageListType;\n  noComments: boolean;\n  appearanceOrder: number;\n} & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isChannel?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  shouldAutoLoadMedia?: boolean;\n  shouldAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'focusMessage' | 'openMediaViewer' | 'openAudioPlayer' |\n  'openUserInfo' | 'openChat' |\n  'cancelSendingMessage' | 'markMessagesRead' |\n  'sendPollVote' | 'toggleMessageSelection' | 'setReplyingToId' | 'openForwardMenu' |\n  'clickInlineButton' | 'disableContextMenuHint'\n)>;\n\nconst NBSP = '\\u00A0';\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>';\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 150;\n\nconst Message: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isForwarding,\n  isChatWithSelf,\n  isChannel,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  messageListType,\n  isPinnedList,\n  shouldAutoLoadMedia,\n  shouldAutoPlayMedia,\n  shouldLoopStickers,\n  focusMessage,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  openChat,\n  cancelSendingMessage,\n  markMessagesRead,\n  sendPollVote,\n  toggleMessageSelection,\n  setReplyingToId,\n  openForwardMenu,\n  clickInlineButton,\n  disableContextMenuHint,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, false, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const { chatId, id: messageId, threadInfo } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const { forwardInfo, viaBotId } = message;\n  const asForwarded = forwardInfo && !isChatWithSelf && !forwardInfo.isLinkedChannelPost;\n  const isInDocumentGroup = !!message.groupedId && !message.isInAlbum;\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n  const customShape = getMessageCustomShape(message);\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const signature = (\n    (isChannel && message.adminTitle) || (forwardInfo && !asForwarded && forwardInfo.adminTitle) || undefined\n  );\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && (!isInDocumentGroup || isLastInDocumentGroup)\n  );\n  const canForward = canShowActionButton && isChannel && !isScheduled;\n  const canFocus = Boolean(canShowActionButton && (\n    (forwardInfo && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn)) && forwardInfo.fromMessageId)\n    || isPinnedList\n  ));\n  const avatarPeer = forwardInfo && (isChatWithSelf || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    transitionClassNames,\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: message.threadInfo && message.threadInfo.messagesCount > 0,\n  });\n  const withCommentButton = message.threadInfo && (!isInDocumentGroup || isLastInDocumentGroup)\n    && messageListType === 'thread' && !noComments;\n  const withAppendix = contentClassName.includes('has-appendix');\n\n  useEnsureMessage(chatId, hasReply ? message.replyToMessageId : undefined, replyMessage, message.id);\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight);\n  useLayoutEffect(() => {\n    if (!appendixRef.current) {\n      return;\n    }\n\n    appendixRef.current.innerHTML = isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN;\n  }, [isOwn, withAppendix]);\n\n  const handleGroupDocumentMessagesSelect = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    toggleMessageSelection({\n      messageId,\n      groupedId: message.groupedId,\n    });\n  }, [messageId, message.groupedId, toggleMessageSelection]);\n\n  const handleMessageSelect = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (isLocal) {\n      return;\n    }\n\n    const params = isAlbum && album && album.messages\n      ? {\n        messageId,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: e && e.shiftKey,\n      }\n      : { messageId, withShift: e && e.shiftKey };\n    toggleMessageSelection(params);\n  }, [isLocal, isAlbum, album, messageId, toggleMessageSelection]);\n\n  const handleContainerDoubleClick = useCallback(() => {\n    setReplyingToId({ messageId });\n  }, [setReplyingToId, messageId]);\n\n  const handleContentDoubleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n  }, []);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n\n    if (!isLocal) {\n      handleBeforeContextMenu(e);\n    }\n  };\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isChatPrivate(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      return;\n    }\n\n    if (isChatPrivate(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [senderPeer, openUserInfo, openChat]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId, threadId, messageId: message.replyToMessageId, replyMessageId: messageId,\n    });\n  }, [focusMessage, chatId, threadId, message.replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const target = e.target as HTMLDivElement;\n    if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n      return;\n    }\n\n    if (IS_ANDROID) {\n      setTimeout(() => {\n        handleContextMenu(e);\n      }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n    } else {\n      handleContextMenu(e);\n    }\n  }, [handleContextMenu]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId: message.groupedId });\n  }, [openForwardMenu, chatId, message.groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId: message.groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n    focusMessage({\n      chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n    });\n  }, [focusMessage, forwardInfo, message, chatId, isInDocumentGroup]);\n\n  const lang = useLang();\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isChatPrivate(avatarPeer.id);\n    const avatarUser = avatarPeer && isAvatarPeerUser ? avatarPeer as ApiUser : undefined;\n    const avatarChat = avatarPeer && !isAvatarPeerUser ? avatarPeer as ApiChat : undefined;\n    const hiddenName = !avatarPeer && forwardInfo ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && !customShape && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const shouldInlineMeta = !webPage && !animatedEmoji && textParts;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            isInline\n            sticker={animatedEmoji}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            isOwn={isOwn}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!animatedEmoji && textParts && (\n          <p className={`text-content ${shouldInlineMeta ? 'with-meta' : ''}`} dir=\"auto\">\n            {textParts}\n            {shouldInlineMeta && (\n              <MessageMeta\n                message={message}\n                outgoingStatus={outgoingStatus}\n                signature={signature}\n                onClick={handleMessageSelect}\n              />\n            )}\n          </p>\n        )}\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            shouldAutoLoad={shouldAutoLoadMedia}\n            shouldAutoPlay={shouldAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && (!isInDocumentGroup || isFirstInDocumentGroup);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo && forwardInfo.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName(senderPeer && 'interactive', senderColor)}\n            onClick={senderPeer ? handleSenderClick : undefined}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo && forwardInfo.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onClick={isInSelectMode ? handleMessageSelect : IS_ANDROID ? handleClick : undefined}\n      onDoubleClick={!isInSelectMode ? handleContainerDoubleClick : undefined}\n      onMouseDown={!isInSelectMode ? handleMouseDown : undefined}\n      onContextMenu={!isInSelectMode && !isLocal ? handleContextMenu : undefined}\n      onMouseEnter={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseEnter : undefined}\n      onMouseLeave={isInDocumentGroup && !isLastInDocumentGroup ? handleDocumentGroupMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isLocal && !isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {!isLocal && isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleGroupDocumentMessagesSelect}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className=\"message-content-wrapper\"\n        onClick={isInSelectMode && isInDocumentGroup ? handleMessageSelect : undefined}\n      >\n        <div\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !customShape && (!isInDocumentGroup || isFirstInDocumentGroup) && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {(!isInDocumentGroup || isLastInDocumentGroup) && !(!webPage && !animatedEmoji && textParts) && (\n            <MessageMeta\n              message={message}\n              outgoingStatus={outgoingStatus}\n              signature={signature}\n              onClick={handleMessageSelect}\n            />\n          )}\n          {canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton message={message} disabled={noComments} />}\n          {withAppendix && <div className=\"svg-appendix\" ref={appendixRef} />}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToMessageId, isOutgoing,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = canShowSender ? selectSender(global, message) : undefined;\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album && album.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n      isForwarding,\n      isChatWithSelf,\n      isChannel,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isPinnedList: messageListType === 'pinned',\n      shouldAutoLoadMedia: chat ? selectShouldAutoLoadMedia(global, message, chat, sender) : undefined,\n      shouldAutoPlayMedia: selectShouldAutoPlayMedia(global, message),\n      shouldLoopStickers: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'cancelSendingMessage',\n    'openUserInfo',\n    'openChat',\n    'markMessagesRead',\n    'sendPollVote',\n    'toggleMessageSelection',\n    'setReplyingToId',\n    'openForwardMenu',\n    'clickInlineButton',\n    'disableContextMenuHint',\n  ]),\n)(Message));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_LIST_SLICE, SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  getMessageOriginalId,\n  isActionMessage,\n  isChatChannel,\n  isChatPrivate,\n  isOwnMessage,\n} from '../../modules/helpers';\nimport {\n  compact,\n  flatten,\n  orderBy,\n  pick,\n} from '../../util/iteratees';\nimport {\n  fastRaf, debounce, onTickEnd,\n} from '../../util/schedulers';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages, MessageDateGroup, isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { ObserveFn, useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageScroll from './MessageScroll';\nimport Message from './message/Message';\nimport ActionMessage from './ActionMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isChatWithSelf?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadViewportMessages' | 'markMessageListRead' | 'markMessagesRead' | 'setScrollOffset' | 'openHistoryCalendar'\n)>;\n\nconst BOTTOM_THRESHOLD = 100;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst FOCUSING_DURATION = 1000;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst FOCUSING_FADE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  animationLevel,\n  loadViewportMessages,\n  markMessageListRead,\n  markMessagesRead,\n  setScrollOffset,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  // Updated every time (to be used from intersection callback closure)\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n  const [hasFocusing, setHasFocusing] = useState<boolean>(Boolean(focusingId));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n\n    // Updated only once (to preserve divider even after messages are read)\n    if (!memoUnreadDividerBeforeIdRef.current) {\n      memoUnreadDividerBeforeIdRef.current = firstUnreadId;\n    }\n  }, [firstUnreadId]);\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  useEffect(() => {\n    if (focusingId) {\n      setHasFocusing(true);\n    } else {\n      setTimeout(() => {\n        setHasFocusing(false);\n      }, FOCUSING_FADE_ANIMATION_DURATION);\n    }\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  const [loadMoreBackwards, loadMoreForwards, loadMoreAround] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current || !isReady) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools, isReady]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    // During animation\n    if (!container.offsetParent) {\n      return;\n    }\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, FOCUSING_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current!;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    // If two messages come at once (e.g. via Quiz Bot) then the first message will update `scrollOffset`\n    // right away (before animation) which creates inconsistency until the animation completes.\n    // To workaround that, we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n    const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && (\n      scrollOffset - (prevContainerHeight || offsetHeight) - lastItemHeight <= BOTTOM_THRESHOLD\n    );\n\n    let newScrollTop!: number;\n\n    const hasFirstMessageChanged = messageIds && prevMessageIds && messageIds[0] !== prevMessageIds[0];\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    if (isAtBottom && hasLastMessageChanged && !hasFirstMessageChanged && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            undefined,\n            true,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, newScrollTop);\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(scrollHeight - newScrollTop, offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffect(() => {\n    if (!animationLevel || animationLevel > 0) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isChatPrivate(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    isSelectModeActive && 'select-mode-active',\n    hasFocusing && 'has-focusing',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty rich\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : messageIds && !messageGroups ? (\n        <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageScroll\n          containerRef={containerRef}\n          className=\"messages-container\"\n          messageIds={messageIds || [lastMessage!.id]}\n          loadMoreForwards={loadMoreForwards}\n          loadMoreBackwards={loadMoreBackwards}\n          isViewportNewest={isViewportNewest}\n          firstUnreadId={firstUnreadId}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        >\n          {renderMessages(\n            lang,\n            messageGroups || groupMessages([lastMessage!]),\n            observeIntersectionForReading,\n            observeIntersectionForMedia,\n            observeIntersectionForAnimatedStickers,\n            withUsers,\n            noAvatars,\n            anchorIdRef,\n            memoUnreadDividerBeforeIdRef,\n            threadId,\n            type,\n            threadTopMessageId,\n            threadFirstMessageId,\n            hasLinkedChat,\n            messageGroups ? type === 'scheduled' : false,\n            !messageGroups || !shouldAnimateAppearanceRef.current,\n            openHistoryCalendar,\n          )}\n        </MessageScroll>\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nfunction renderMessages(\n  lang: LangFn,\n  messageGroups: MessageDateGroup[],\n  observeIntersectionForReading: ObserveFn,\n  observeIntersectionForMedia: ObserveFn,\n  observeIntersectionForAnimatedStickers: ObserveFn,\n  withUsers: boolean,\n  noAvatars: boolean,\n  currentAnchorIdRef: { current: string | undefined },\n  memoFirstUnreadIdRef: { current: number | undefined },\n  threadId: number,\n  type: MessageListType,\n  threadTopMessageId: number | undefined,\n  threadFirstMessageId: number | undefined,\n  hasLinkedChat: boolean | undefined,\n  isSchedule: boolean,\n  noAppearanceAnimation: boolean,\n  openHistoryCalendar: Function,\n) {\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && currentAnchorIdRef.current === `message${message.previousLocalId}`) {\n          currentAnchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoFirstUnreadIdRef.current ? unreadDivider : undefined,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return flatten(dateGroups);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      const chatBot = selectChatBot(global, chatId)!;\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadViewportMessages',\n    'markMessageListRead',\n    'markMessagesRead',\n    'setScrollOffset',\n    'openHistoryCalendar',\n  ]),\n)(MessageList));\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport { pick } from '../../util/iteratees';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusNextReply'>;\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps & DispatchProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  focusNextReply,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['focusNextReply']),\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { preloadImage, preloadVideo, createPosterForVideo } from '../../../../util/files';\n\nconst MAX_QUICK_VIDEO_SIZE = 10 * 1024 ** 2; // 10 MB\nconst MAX_QUICK_IMG_SIZE = 1280; // px\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (mimeType.startsWith('image/')) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const newBlob = await squeezeImage(img);\n        if (newBlob) {\n          URL.revokeObjectURL(blobUrl);\n          return buildAttachment(filename, newBlob, true, options);\n        } else {\n          return buildAttachment(filename, blob, false, options);\n        }\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (mimeType.startsWith('video/')) {\n    // Videos < 10 MB are always sent in quick mode (in other clients).\n    // Quick mode for videos > 10 MB is not supported until client-side video squeezing is implemented.\n    if (size < MAX_QUICK_VIDEO_SIZE) {\n      const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n\nfunction squeezeImage(img: HTMLImageElement): Promise<Blob | null> {\n  return new Promise((resolve) => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n\n    let { width, height } = img;\n\n    if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE) {\n      if (width >= height) {\n        height *= MAX_QUICK_IMG_SIZE / width;\n        width = MAX_QUICK_IMG_SIZE;\n      } else {\n        width *= MAX_QUICK_IMG_SIZE / height;\n        height = MAX_QUICK_IMG_SIZE;\n      }\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    ctx.drawImage(img, 0, 0, img.width, img.height, 0, 0, width, height);\n    canvas.toBlob(resolve, 'image/jpeg', 100);\n  });\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface OpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): OpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: OpusRecorder }>;\nlet OpusRecorder: OpusRecorder;\nlet mediaRecorder: OpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: OpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items).find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type));\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input ? input.id : undefined);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: number | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: number,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  saveDraft: GlobalActions['saveDraft'],\n  clearDraft: GlobalActions['clearDraft'],\n) => {\n  const updateDraft = useCallback((draftChatId: number, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nconst tempEl = document.createElement('div');\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: number,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [botSettings, setBotSettings] = useState<undefined | false | InlineBotSettings>();\n  const text = getPlainText(html);\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n  const { username, query, canShowHelp } = parseStartWithUsernameString(text);\n  const usernameLowered = username.toLowerCase();\n  const prevUsername = usePrevious(username);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset: botSettings && botSettings.offset,\n    });\n  }, [botSettings, chatId, query, queryInlineBot, usernameLowered]);\n\n  const inlineBotData = inlineBots && inlineBots[usernameLowered];\n\n  useEffect(() => {\n    setBotSettings(inlineBotData);\n  }, [inlineBotData]);\n\n  useEffect(() => {\n    if (\n      isAllowed && botSettings && botSettings.id\n      && (botSettings.switchPm || (botSettings.results && botSettings.results.length))\n    ) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botSettings, isAllowed, markIsOpen, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    closeTooltip: unmarkIsOpen,\n    loadMore,\n    username,\n    id: botSettings ? botSettings.id : undefined,\n    isGallery: botSettings ? botSettings.isGallery : undefined,\n    switchPm: botSettings ? botSettings.switchPm : undefined,\n    results: botSettings ? botSettings.results : undefined,\n    help: canShowHelp && botSettings && botSettings.help ? `@${username} ${botSettings.help}` : undefined,\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n\nfunction parseStartWithUsernameString(text: string) {\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return { username: '', query: '', canShowHelp: false };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotKeyboardMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotKeyboardMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotKeyboardMenu = useModuleLoader(Bundles.Extra, 'BotKeyboardMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotKeyboardMenu ? <BotKeyboardMenu {...props} /> : undefined;\n};\n\nexport default memo(BotKeyboardMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPrivate } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setReplyingToId' | 'setEditingId' | 'focusMessage' | 'exitForwardMode'>;\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps & DispatchProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  setReplyingToId,\n  setEditingId,\n  focusMessage,\n  exitForwardMode,\n}) => {\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isChatPrivate(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'focusMessage',\n    'exitForwardMode',\n  ]),\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n};\ntype DispatchProps = Pick<GlobalActions, 'loadWebPagePreview' | 'clearWebPagePreview' | 'toggleMessageWebPage'>;\n\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  loadWebPagePreview,\n  clearWebPagePreview,\n  toggleMessageWebPage,\n}) => {\n  const link = useMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWebPagePreview', 'clearWebPagePreview', 'toggleMessageWebPage',\n  ]),\n)(WebPagePreview));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './CalendarModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CalendarModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CalendarModal = useModuleLoader(Bundles.Extra, 'CalendarModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CalendarModal ? <CalendarModal {...props} /> : undefined;\n};\n\nexport default memo(CalendarModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { LangCode, InlineBotSettings } from '../../../types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, SCHEDULED_WHEN_ONLINE } from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsChatWithBot,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatUser,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatPrivate,\n  isChatAdmin,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport windowSize from '../../../util/windowSize';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu.async';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport PaymentModal from '../../payment/PaymentModal.async';\nimport ReceiptModal from '../../payment/ReceiptModal.async';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: number;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  onDropHide: NoneToVoidFunction;\n  isReady: boolean;\n};\n\ntype StateProps = {\n  editingMessage?: ApiMessage;\n  chat?: ApiChat;\n  draft?: ApiFormattedText;\n  isChatWithBot?: boolean;\n  isChatWithSelf?: boolean;\n  isRightColumnShown?: boolean;\n  isSelectModeActive?: boolean;\n  isForwarding?: boolean;\n  isPollModalOpen?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  botKeyboardMessageId?: number;\n  withScheduledButton?: boolean;\n  shouldSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  stickersForEmoji?: ApiSticker[];\n  groupChatMembers?: ApiChatMember[];\n  currentUserId?: number;\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  lastSyncTime?: number;\n  contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n  shouldSuggestStickers?: boolean;\n  language: LangCode;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  serverTimeOffset: number;\n  topInlineBotIds?: number[];\n  isInlineBotLoading: boolean;\n  inlineBots?: Record<string, false | InlineBotSettings>;\n} & Pick<GlobalState, 'connectionState'>;\n\ntype DispatchProps = Pick<GlobalActions, (\n  'sendMessage' | 'editMessage' | 'saveDraft' | 'forwardMessages' |\n  'clearDraft' | 'showDialog' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'openPollModal' | 'closePollModal' | 'loadScheduledHistory' | 'openChat' | 'closePaymentModal' |\n  'clearReceipt' | 'addRecentEmoji' | 'loadEmojiKeywords' | 'sendInlineBotResult'\n)>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps & DispatchProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  onDropHide,\n  isReady,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  botKeyboardMessageId,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  language,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  sendMessage,\n  editMessage,\n  saveDraft,\n  clearDraft,\n  showDialog,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  forwardMessages,\n  openPollModal,\n  closePollModal,\n  loadScheduledHistory,\n  closePaymentModal,\n  openChat,\n  clearReceipt,\n  addRecentEmoji,\n  loadEmojiKeywords,\n  sendInlineBotResult,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory();\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (lastSyncTime && isReady) {\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n    }\n  }, [loadEmojiKeywords, language, lastSyncTime, isReady]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  const mainButtonState = editingMessage\n    ? MainButtonState.Edit\n    : !IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding\n      ? MainButtonState.Send\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, mentionFilter,\n    closeMentionTooltip, insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n    usersById,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback(() => {\n    setHtml('');\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @perf\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change\n  const prevChatId = usePrevious(chatId);\n  useEffect(() => {\n    if (!prevChatId || chatId === prevChatId) {\n      return;\n    }\n\n    stopRecordingVoice();\n    resetComposer();\n  }, [chatId, prevChatId, resetComposer, stopRecordingVoice]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal, editMessage);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage, saveDraft, clearDraft);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    if (currentAttachments.length && text && text.length > CAPTION_MAX_LENGTH) {\n      const extraLength = text.length - CAPTION_MAX_LENGTH;\n      showDialog({\n        data: {\n          message: 'CAPTION_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = Math.floor(Date.now() / 1000) + serverTimeOffset;\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n    if (isForwarding) {\n      forwardMessages();\n    }\n\n    lastMessageSendTimeSeconds.current = Math.floor(Date.now() / 1000) + serverTimeOffset;\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(resetComposer);\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, serverTimeOffset, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(resetComposer);\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(resetComposer);\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(resetComposer);\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        if (shouldSchedule) {\n          if (activeVoiceRecording) {\n            pauseRecordingVoice();\n          }\n          openCalendar();\n        } else {\n          handleSend();\n          requestAnimationFrame(resetComposer);\n        }\n        break;\n      case MainButtonState.Record:\n        startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, resetComposer, shouldSchedule, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice, handleSend,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : (shouldSchedule ? openCalendar : handleSend);\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <PaymentModal\n        isOpen={Boolean(isPaymentModalOpen)}\n        onClose={closePaymentModal}\n      />\n      <ReceiptModal\n        isOpen={Boolean(isReceiptModalOpen)}\n        onClose={clearReceipt}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filter={mentionFilter}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {!isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={`${isSymbolMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER ? '' : lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            shouldSetFocus={isSymbolMenuOpen}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isBotKeyboardOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={`${isAttachMenuOpen ? 'activated' : ''}`}\n              round\n              faded\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          <InlineBotTooltip\n            isOpen={isInlineBotTooltipOpen}\n            botId={inlineBotId}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            isGallery={isInlineBotTooltipGallery}\n            inlineBotResults={inlineBotResults}\n            switchPm={inlineBotSwitchPm}\n            onSelectResult={handleInlineBotSelect}\n            loadMore={loadMoreForInlineBot}\n            onClose={closeInlineBotTooltip}\n          />\n          <SymbolMenu\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={`${mainButtonState} ${activeVoiceRecording ? 'recording' : ''}`}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? 'Send When Online' : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: (\n        !isChatWithSelf && !isChatWithBot\n        && (chat && chatUser && isChatPrivate(chatId) && chatUser.status && Boolean(chatUser.status.wasOnline))\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds && scheduledIds.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId: messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat && chat.fullInfo && chat.fullInfo.members,\n      topInlineBotIds: global.topInlineBots && global.topInlineBots.userIds,\n      currentUserId: global.currentUserId,\n      usersById: global.users.byId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      shouldSuggestStickers: global.settings.byKey.shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      language,\n      baseEmojiKeywords: baseEmojiKeywords ? baseEmojiKeywords.keywords : undefined,\n      emojiKeywords: emojiKeywords ? emojiKeywords.keywords : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'sendMessage',\n    'editMessage',\n    'saveDraft',\n    'clearDraft',\n    'showDialog',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'forwardMessages',\n    'openPollModal',\n    'closePollModal',\n    'closePaymentModal',\n    'clearReceipt',\n    'loadScheduledHistory',\n    'openChat',\n    'addRecentEmoji',\n    'loadEmojiKeywords',\n    'sendInlineBotResult',\n  ]),\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_IOS } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_IOS) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(html) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({ emoji: html });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection && selection.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../../api/types';\nimport { GlobalActions } from '../../../../global/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../helpers/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n  editMessage: GlobalActions['editMessage'],\n) => {\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport { GlobalActions, MessageListType } from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  CONTENT_TYPES_FOR_QUICK_UPLOAD,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectTheme,\n  selectThreadOriginChat,\n} from '../../modules/selectors';\nimport { getCanPostInChat, getMessageSendingRestrictionReason, isChatPrivate } from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioMessage?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  originChatId?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'unpinAllMessages' | 'loadUser' | 'closeLocalTextSearch' | 'exitMessageSelectMode'\n)>;\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction canBeQuicklyUploaded(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && CONTENT_TYPES_FOR_QUICK_UPLOAD.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  isScheduledMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioMessage,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  animationLevel,\n  originChatId,\n  shouldSkipHistoryAnimations,\n  openChat,\n  unpinAllMessages,\n  loadUser,\n  closeLocalTextSearch,\n  exitMessageSelectMode,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT || animationLevel === ANIMATION_LEVEL_MIN);\n\n  const hasTools = hasPinnedOrAudioMessage && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION);\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  useEffect(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  const handleTransitionEnd = (e: React.TransitionEvent<HTMLDivElement>) => {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  };\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every(canBeQuicklyUploaded);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    if (renderingThreadId !== MAIN_THREAD_ID) {\n      openChat({ id: originChatId, threadId: MAIN_THREAD_ID }, true);\n    } else if (isPinnedMessageList || isScheduledMessageList) {\n      openChat({ id: chatId, type: 'thread' });\n    } else {\n      openChat({ id: undefined }, true);\n    }\n  };\n\n  useHistoryBack(renderingChatId && renderingThreadId, closeChat, openChat, {\n    id: chatId,\n    threadId: MAIN_THREAD_ID,\n  });\n\n  const isDiscussion = renderingChatId && renderingThreadId !== MAIN_THREAD_ID;\n\n  useHistoryBack(isDiscussion || isPinnedMessageList || isScheduledMessageList, closeChat, openChat, {\n    id: chatId,\n    threadId: renderingThreadId,\n  });\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleTransitionEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={renderingMessageListType === 'thread' && renderingThreadId === MAIN_THREAD_ID ? 1 : 2}\n              shouldCleanup\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"unpin-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds } } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const originChat = selectThreadOriginChat(global, chatId, threadId);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      originChatId: originChat ? originChat.id : chatId,\n      isPrivate: isChatPrivate(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && (!isBotNotStarted || IS_SINGLE_COLUMN_LAYOUT),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat && chat.currentUserBannedRights,\n      defaultBannedRights: chat && chat.defaultBannedRights,\n      hasPinnedOrAudioMessage: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(pinnedIds && pinnedIds.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat', 'unpinAllMessages', 'loadUser', 'closeLocalTextSearch', 'exitMessageSelectMode',\n  ]),\n)(MiddleColumn));\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n} from '../../modules/selectors';\nimport { isChatAdmin, isChatChannel, isChatPrivate } from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canManage?: boolean;\n  isChannel?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'setStickerSearchQuery' | 'setGifSearchQuery' |\n  'searchTextMessagesLocal' | 'toggleManagement' | 'openHistoryCalendar'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupMembers,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n}\n\nconst RightHeader: FC<OwnProps & StateProps & DispatchProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  setLocalTextSearchQuery,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  searchTextMessagesLocal,\n  toggleManagement,\n  openHistoryCalendar,\n  shouldSkipAnimation,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang('GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  // Add class in the next AF to synchronize with animation with Transition components\n  useEffect(() => {\n    backButtonRef.current!.classList.toggle('state-back', isBackButton);\n  }, [isBackButton]);\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isChatPrivate(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n\n    return {\n      canManage,\n      isChannel,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'searchTextMessagesLocal',\n    'toggleManagement',\n    'openHistoryCalendar',\n  ]),\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiChatMember, ApiMessage, ApiUser } from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  usersById?: Record<number, ApiUser>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: number,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(groupChatMembers.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [groupChatMembers, serverTimeOffset, usersById]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForMembers(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  let viewportIds: number[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForMembers(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  memberIds?: number[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    memberIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !memberIds || viewportIds[0] === memberIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport {\n  ApiUser, ApiChat, ApiMediaFormat, ApiPhoto,\n} from '../../api/types';\n\nimport {\n  getChatAvatarHash, isDeletedUser, getUserColorKey, getChatTitle, isChatPrivate, getUserFullName,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport buildClassName from '../../util/buildClassName';\nimport { getFirstLetters } from '../../util/textFormat';\nimport useMedia from '../../hooks/useMedia';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ProfilePhoto.scss';\n\ntype OwnProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isFirstPhoto?: boolean;\n  isSavedMessages?: boolean;\n  photo?: ApiPhoto;\n  lastSyncTime?: number;\n  onClick: NoneToVoidFunction;\n};\n\nconst ProfilePhoto: FC<OwnProps> = ({\n  chat,\n  user,\n  photo,\n  isFirstPhoto,\n  isSavedMessages,\n  lastSyncTime,\n  onClick,\n}) => {\n  const lang = useLang();\n  const isDeleted = user && isDeletedUser(user);\n\n  function getMediaHash(size: 'normal' | 'big' = 'big', forceAvatar?: boolean) {\n    if (photo && !forceAvatar) {\n      return `photo${photo.id}?size=c`;\n    }\n\n    let hash: string | undefined;\n    if (!isSavedMessages && !isDeleted) {\n      if (user) {\n        hash = getChatAvatarHash(user, size);\n      } else if (chat) {\n        hash = getChatAvatarHash(chat, size);\n      }\n    }\n\n    return hash;\n  }\n\n  const imageHash = getMediaHash();\n  const fullMediaData = useMedia(imageHash, false, ApiMediaFormat.BlobUrl, lastSyncTime);\n  const avatarThumbnailData = useMedia(\n    !fullMediaData && isFirstPhoto ? getMediaHash('normal', true) : undefined,\n    false,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbDataUri = useBlurSync(!fullMediaData && photo && photo.thumbnail && photo.thumbnail.dataUri);\n  const imageSrc = fullMediaData || avatarThumbnailData || thumbDataUri;\n  const prevImageSrc = usePrevious(imageSrc);\n\n  let content: string | undefined = '';\n\n  if (isSavedMessages) {\n    content = <i className=\"icon-avatar-saved-messages\" />;\n  } else if (isDeleted) {\n    content = <i className=\"icon-avatar-deleted-account\" />;\n  } else if (imageSrc) {\n    content = <img src={imageSrc} className=\"avatar-media\" alt=\"\" decoding=\"async\" />;\n  } else if (!imageSrc && user) {\n    const userFullName = getUserFullName(user);\n    content = userFullName ? getFirstLetters(userFullName, 2) : undefined;\n  } else if (!imageSrc && chat) {\n    const title = getChatTitle(lang, chat);\n    content = title && getFirstLetters(title, isChatPrivate(chat.id) ? 2 : 1);\n  } else {\n    content = (\n      <div className=\"spinner-wrapper\">\n        <Spinner color=\"white\" />\n      </div>\n    );\n  }\n\n  const fullClassName = buildClassName(\n    'ProfilePhoto',\n    `color-bg-${getUserColorKey(user || chat)}`,\n    isSavedMessages && 'saved-messages',\n    isDeleted && 'deleted-account',\n    (!isSavedMessages && !(imageSrc)) && 'no-photo',\n  );\n\n  return (\n    <div className={fullClassName} onClick={imageSrc ? onClick : undefined}>\n      {prevImageSrc && imageSrc && prevImageSrc !== imageSrc && (\n        <img src={prevImageSrc} className=\"prev-avatar-media\" alt=\"\" decoding=\"async\" />\n      )}\n      {typeof content === 'string' ? renderText(content, ['hq_emoji']) : content}\n    </div>\n  );\n};\n\nexport default memo(ProfilePhoto);\n","import React, {\n  FC, useEffect, useCallback, memo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { selectChat, selectUser } from '../../modules/selectors';\nimport {\n  getUserFullName, getUserStatus, isChatChannel, isUserOnline,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport usePhotosPreload from './hooks/usePhotosPreload';\nimport useLang from '../../hooks/useLang';\n\nimport VerifiedIcon from '../common/VerifiedIcon';\nimport ProfilePhoto from './ProfilePhoto';\nimport Transition from '../ui/Transition';\n\nimport './ProfileInfo.scss';\n\ntype OwnProps = {\n  userId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  isSavedMessages?: boolean;\n  animationLevel: 0 | 1 | 2;\n  serverTimeOffset: number;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'openMediaViewer'>;\n\nconst PrivateChatInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  user,\n  chat,\n  isSavedMessages,\n  lastSyncTime,\n  animationLevel,\n  loadFullUser,\n  openMediaViewer,\n  serverTimeOffset,\n}) => {\n  const { id: userId } = user || {};\n  const { id: chatId } = chat || {};\n  const fullName = user ? getUserFullName(user) : (chat ? chat.title : '');\n  const photos = (user ? user.photos : (chat ? chat.photos : undefined)) || [];\n  const slideAnimation = animationLevel >= 1 ? 'slide' : 'none';\n\n  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);\n  const isFirst = isSavedMessages || photos.length <= 1 || currentPhotoIndex === 0;\n  const isLast = isSavedMessages || photos.length <= 1 || currentPhotoIndex === photos.length - 1;\n\n  // Deleting the last profile photo may result in an error\n  useEffect(() => {\n    if (currentPhotoIndex > photos.length) {\n      setCurrentPhotoIndex(Math.max(0, photos.length - 1));\n    }\n  }, [currentPhotoIndex, photos.length]);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [userId, loadFullUser, lastSyncTime]);\n\n  usePhotosPreload(user || chat, photos, currentPhotoIndex);\n\n  const handleProfilePhotoClick = useCallback(() => {\n    openMediaViewer({\n      avatarOwnerId: userId || chatId,\n      profilePhotoIndex: currentPhotoIndex,\n      origin: MediaViewerOrigin.ProfileAvatar,\n    });\n  }, [openMediaViewer, userId, chatId, currentPhotoIndex]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex - 1);\n  }, [currentPhotoIndex, isFirst]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    setCurrentPhotoIndex(currentPhotoIndex + 1);\n  }, [currentPhotoIndex, isLast]);\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>(\n      '.profile-slide-container > .active, .profile-slide-container > .to',\n    );\n    if (!element) {\n      return undefined;\n    }\n\n    return captureEvents(element, {\n      excludedClosestSelector: '.navigation',\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        }\n      } : undefined,\n    });\n  }, [selectNextMedia, selectPreviousMedia]);\n\n  if (!user && !chat) {\n    return undefined;\n  }\n\n  function renderPhotoTabs() {\n    if (isSavedMessages || !photos || photos.length <= 1) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"photo-dashes\">\n        {photos.map((_, i) => (\n          <span className={`photo-dash ${i === currentPhotoIndex ? 'current' : ''}`} />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPhoto() {\n    const photo = !isSavedMessages && photos && photos.length > 0 ? photos[currentPhotoIndex] : undefined;\n\n    return (\n      <ProfilePhoto\n        key={currentPhotoIndex}\n        user={user}\n        chat={chat}\n        photo={photo}\n        isSavedMessages={isSavedMessages}\n        isFirstPhoto={isFirst}\n        onClick={handleProfilePhotoClick}\n      />\n    );\n  }\n\n  function renderStatus() {\n    if (user) {\n      return (\n        <div className={`status ${isUserOnline(user) ? 'online' : ''}`}>\n          <span className=\"user-status\" dir=\"auto\">{getUserStatus(lang, user, serverTimeOffset)}</span>\n        </div>\n      );\n    }\n\n    return (\n      <span className=\"status\" dir=\"auto\">{\n        isChatChannel(chat!)\n          ? lang('Subscribers', chat!.membersCount, 'i')\n          : lang('Members', chat!.membersCount, 'i')\n      }\n      </span>\n    );\n  }\n\n  const isVerifiedIconShown = (user && user.isVerified) || (chat && chat.isVerified);\n\n  return (\n    <div className=\"ProfileInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"photo-wrapper\">\n        {renderPhotoTabs()}\n        <Transition activeKey={currentPhotoIndex} name={slideAnimation} className=\"profile-slide-container\">\n          {renderPhoto}\n        </Transition>\n\n        {!isFirst && (\n          <button\n            type=\"button\"\n            className=\"navigation prev\"\n            aria-label={lang('AccDescrPrevious')}\n            onClick={selectPreviousMedia}\n          />\n        )}\n        {!isLast && (\n          <button\n            type=\"button\"\n            className=\"navigation next\"\n            aria-label={lang('Next')}\n            onClick={selectNextMedia}\n          />\n        )}\n      </div>\n\n      <div className=\"info\" dir={lang.isRtl ? 'rtl' : 'auto'}>\n        {isSavedMessages ? (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{lang('SavedMessages')}</h3>\n          </div>\n        ) : (\n          <div className=\"title\">\n            <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n            {isVerifiedIconShown && <VerifiedIcon />}\n          </div>\n        )}\n        {!isSavedMessages && renderStatus()}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId, forceShowSelf }): StateProps => {\n    const { lastSyncTime, serverTimeOffset } = global;\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const isSavedMessages = !forceShowSelf && user && user.isSelf;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      lastSyncTime, user, chat, isSavedMessages, animationLevel, serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFullUser', 'openMediaViewer']),\n)(PrivateChatInfo));\n","import {\n  ApiChat, ApiMediaFormat, ApiPhoto, ApiUser,\n} from '../../../api/types';\nimport { useEffect } from '../../../lib/teact/teact';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nconst PHOTOS_TO_PRELOAD = 4;\n\nexport default function usePhotosPreload(\n  profile: ApiUser | ApiChat | undefined,\n  photos: ApiPhoto[],\n  currentIndex: number,\n) {\n  useEffect(() => {\n    photos.slice(currentIndex, currentIndex + PHOTOS_TO_PRELOAD).forEach((photo) => {\n      const mediaData = mediaLoader.getFromMemory(`photo${photo.id}?size=c`);\n      if (!mediaData) {\n        mediaLoader.fetch(`photo${photo.id}?size=c`, ApiMediaFormat.BlobUrl);\n      }\n    });\n  }, [currentIndex, photos]);\n}\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { ApiChat, ApiUser } from '../../api/types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatDescription, getChatLink, getHasAdminRight, isChatChannel, isChatPrivate, isUserRightBanned, selectIsChatMuted,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\n\ntype OwnProps = {\n  chatOrUserId: number;\n  forceShowSelf?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat?: ApiChat;\n  canInviteUsers?: boolean;\n  isMuted?: boolean;\n} & Pick<GlobalState, 'lastSyncTime'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadFullUser' | 'updateChatMutedState' | 'showNotification'>;\n\nconst ChatExtra: FC<OwnProps & StateProps & DispatchProps> = ({\n  lastSyncTime,\n  user,\n  chat,\n  forceShowSelf,\n  canInviteUsers,\n  isMuted,\n  loadFullUser,\n  showNotification,\n  updateChatMutedState,\n}) => {\n  const {\n    id: userId,\n    fullInfo,\n    username,\n    phoneNumber,\n    isSelf,\n  } = user || {};\n  const { id: chatId } = chat || {};\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime && userId) {\n      loadFullUser({ userId });\n    }\n  }, [loadFullUser, userId, lastSyncTime]);\n\n  const handleNotificationChange = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n  }, [chatId, isMuted, updateChatMutedState]);\n\n  if (!chat || chat.isRestricted || (isSelf && !forceShowSelf)) {\n    return undefined;\n  }\n\n  function copy(text: string, entity: string) {\n    copyTextToClipboard(text);\n    showNotification({ message: `${entity} was copied` });\n  }\n\n  const formattedNumber = phoneNumber && formatPhoneNumberWithCode(phoneNumber);\n  const link = getChatLink(chat);\n  const description = (fullInfo && fullInfo.bio) || getChatDescription(chat);\n\n  return (\n    <div className=\"ChatExtra\">\n      {formattedNumber && !!formattedNumber.length && (\n        <ListItem icon=\"phone\" multiline narrow ripple onClick={() => copy(formattedNumber, lang('Phone'))}>\n          <span className=\"title\" dir=\"auto\">{formattedNumber}</span>\n          <span className=\"subtitle\">{lang('Phone')}</span>\n        </ListItem>\n      )}\n      {username && (\n        <ListItem\n          icon=\"mention\"\n          multiline\n          narrow\n          ripple\n          onClick={() => copy(`@${username}`, lang('Username'))}\n        >\n          <span className=\"title\" dir=\"auto\">{renderText(username)}</span>\n          <span className=\"subtitle\">{lang('Username')}</span>\n        </ListItem>\n      )}\n      {description && !!description.length && (\n        <ListItem\n          icon=\"info\"\n          multiline\n          narrow\n          isStatic\n        >\n          <span className=\"title\" dir=\"auto\">\n            {renderText(description, ['br', 'links', 'emoji'])}\n          </span>\n          <span className=\"subtitle\">{lang(userId ? 'UserBio' : 'Info')}</span>\n        </ListItem>\n      )}\n      {(canInviteUsers || !username) && !!link.length && (\n        <ListItem icon=\"mention\" multiline narrow ripple onClick={() => copy(link, lang('SetUrlPlaceholder'))}>\n          <div className=\"title\">{link}</div>\n          <span className=\"subtitle\">{lang('SetUrlPlaceholder')}</span>\n        </ListItem>\n      )}\n      <ListItem icon=\"unmute\" ripple onClick={handleNotificationChange}>\n        <span>{lang('Notifications')}</span>\n        <Switcher\n          id=\"group-notifications\"\n          label={userId ? 'Toggle User Notifications' : 'Toggle Chat Notifications'}\n          checked={!isMuted}\n          inactive\n        />\n      </ListItem>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatOrUserId }): StateProps => {\n    const { lastSyncTime } = global;\n\n    const chat = chatOrUserId ? selectChat(global, chatOrUserId) : undefined;\n    const user = isChatPrivate(chatOrUserId) ? selectUser(global, chatOrUserId) : undefined;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    const canInviteUsers = chat && !user && (\n      (!isChatChannel(chat) && !isUserRightBanned(chat, 'inviteUsers'))\n      || getHasAdminRight(chat, 'inviteUsers')\n    );\n\n    return {\n      lastSyncTime, chat, user, canInviteUsers, isMuted,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadFullUser', 'updateChatMutedState', 'showNotification',\n  ]),\n)(ChatExtra));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport { selectCurrentChat, selectUser } from '../../modules/selectors';\nimport { getUserFirstOrLastName } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteChatMember'>;\n\nconst DeleteMemberModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n  deleteChatMember,\n}) => {\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['deleteChatMember']),\n)(DeleteMemberModal));\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isChatPrivate,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from './ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from './ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: number;\n  userId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: number;\n  resolvedUserId?: number;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalMediaSearchType' | 'loadMoreMembers' | 'searchMediaMessagesLocal' | 'openMediaViewer' |\n  'openAudioPlayer' | 'openUserInfo' | 'focusMessage' | 'loadProfilePhotos' | 'setNewChatMembersDialogState'\n)>;\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  members,\n  usersById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  setLocalMediaSearchType,\n  loadMoreMembers,\n  searchMediaMessagesLocal,\n  openMediaViewer,\n  openAudioPlayer,\n  openUserInfo,\n  focusMessage,\n  loadProfilePhotos,\n  setNewChatMembersDialogState,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<number | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n  ]), [hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    usersById, chatMessages, foundIds, chatId, lastSyncTime, serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n        }\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(id: number) {\n    return id === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(id);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty_search');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty_search');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty_search');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          viewportIds!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              target=\"sharedMedia\"\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          viewportIds!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-reversed' : 'slide'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: number, resolvedUserId?: number) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo\n        userId={resolvedUserId || chatId}\n        forceShowSelf={resolvedUserId !== chatId}\n      />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} forceShowSelf={resolvedUserId !== chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > div.active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById } = global.users;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat && chat.fullInfo && chat.fullInfo.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    let resolvedUserId;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isChatPrivate(chatId)) {\n      resolvedUserId = chatId;\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      ...(hasMembersTab && members && {\n        members,\n        usersById,\n      }),\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat && chat.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalMediaSearchType',\n    'loadMoreMembers',\n    'searchMediaMessagesLocal',\n    'openMediaViewer',\n    'openAudioPlayer',\n    'openUserInfo',\n    'focusMessage',\n    'loadProfilePhotos',\n    'setNewChatMembersDialogState',\n  ]),\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { pick, unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport searchWords from '../../util/searchWords';\nimport {\n  getUserFullName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  isActive: boolean;\n  onNextStep: (memberIds: number[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setUserSearchQuery'>;\n\nconst AddChatMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  setUserSearchQuery,\n  onClose,\n  isActive,\n  loadContactList,\n}) => {\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<number[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds.filter((id) => !memberIds.includes(id));\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return !memberIds.includes(contactId)\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup));\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds,\n    currentUserId, usersById, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat && chat.fullInfo ? chat.fullInfo.members : undefined,\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setUserSearchQuery']),\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: number;\n  threadId?: number;\n  currentProfileUserId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleChatInfo' | 'toggleManagement' | 'openUserInfo' | 'setNewChatMembersDialogState' |\n  'closeLocalTextSearch' | 'closePollResults' | 'addChatMembers' |\n  'setStickerSearchQuery' | 'setGifSearchQuery'\n)>;\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps & DispatchProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  toggleChatInfo,\n  toggleManagement,\n  openUserInfo,\n  closeLocalTextSearch,\n  setStickerSearchQuery,\n  setGifSearchQuery,\n  closePollResults,\n  addChatMembers,\n  setNewChatMembersDialogState,\n  shouldSkipHistoryAnimations,\n}) => {\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<number | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, true);\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, true);\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: number[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n    'toggleChatInfo',\n    'toggleManagement',\n    'closeLocalTextSearch',\n    'setStickerSearchQuery',\n    'setGifSearchQuery',\n    'closePollResults',\n    'addChatMembers',\n    'setNewChatMembersDialogState',\n  ]),\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  ANIMATION_END_DELAY, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  animationLevel: number;\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAnimatedEmojis' | 'loadNotificationSettings' | 'loadNotificationExceptions' | 'updateIsOnline' |\n  'loadTopInlineBots'\n)>;\n\nconst ANIMATION_DURATION = 350;\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet rightColumnAnimationTimeout: number | undefined;\nlet notificationInterval: number | undefined;\n\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps & DispatchProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  animationLevel,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  loadAnimatedEmojis,\n  loadNotificationSettings,\n  loadNotificationExceptions,\n  updateIsOnline,\n  loadTopInlineBots,\n}) => {\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadNotificationExceptions, loadNotificationSettings, updateIsOnline,\n    loadTopInlineBots,\n  ]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Add `body` classes when toggling right column\n  useEffect(() => {\n    if (animationLevel > 0) {\n      document.body.classList.add('animating-right-column');\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n      if (rightColumnAnimationTimeout) {\n        clearTimeout(rightColumnAnimationTimeout);\n        rightColumnAnimationTimeout = undefined;\n      }\n\n      rightColumnAnimationTimeout = window.setTimeout(() => {\n        document.body.classList.remove('animating-right-column');\n        rightColumnAnimationTimeout = undefined;\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [animationLevel, isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          document.title = `${newUnread} notification${newUnread > 1 ? 's' : ''}`;\n          updateIcon(true);\n        }\n      } else {\n        document.title = PAGE_TITLE;\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      document.title = PAGE_TITLE;\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      animationLevel: global.settings.byKey.animationLevel,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAnimatedEmojis', 'loadNotificationSettings', 'loadNotificationExceptions', 'updateIsOnline',\n    'loadTopInlineBots',\n  ]),\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"sourceRoot":""}