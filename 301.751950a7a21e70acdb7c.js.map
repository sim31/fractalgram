{"version":3,"file":"301.751950a7a21e70acdb7c.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/SlideTransition.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../modules/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getDispatch();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message });\n    } else {\n      downloadMessageMedia({ message });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../modules/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    onClose,\n    onFooterClick,\n    isFooterHidden,\n    isProtected,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && (isActive ? (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen}\n          noPlay={!isActive}\n          onClose={onClose}\n        />\n      ) : renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden && (!isVideo || isGif)}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return {};\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return {};\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return {};\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return {};\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          // @ts-ignore\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            // @ts-ignore\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MediaViewerOrigin } from '../../types';\n\nimport useDebounce from '../../hooks/useDebounce';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isZoomed?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = 40;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 0.6;\nconst DOUBLE_TAP_ZOOM = 3;\nlet cancelAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nconst INITIAL_TRANSFORM = {\n  x: 0,\n  y: 0,\n  scale: 1,\n};\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>(INITIAL_TRANSFORM);\n  const isSwipingRef = useRef(false);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n\n  const {\n    isZoomed,\n    onClose,\n  } = rest;\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsSwiping = useCallback((value: boolean) => {\n    isSwipingRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const setIsActive = useCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const debounceSetMessage = useDebounce(DEBOUNCE_MESSAGE, false);\n  const debounceSwipe = useDebounce(DEBOUNCE_SWIPE, false);\n  const debounceActive = useDebounce(DEBOUNCE_ACTIVE, false);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif) && hasFooter) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [hasFooter, isFooterHidden, isGif, isPhoto]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !containerRef.current || isZoomed || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = { ...transformRef.current };\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = { x: 0, y: 0 };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      excludedClosestSelector: '.VideoPlayerControls, .MediaViewerFooter',\n      onCapture: (event) => {\n        // Prevent safari back swipe on mobile\n        if (event.type === 'touchstart'\n          && 'pageX' in event\n          && !(event.pageX > 10 && event.pageX < window.innerWidth - 10)) {\n          event.preventDefault();\n        }\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, INITIAL_TRANSFORM)) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }) => {\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { scale, x, y } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: lastTransform.x + dragOffsetX,\n              y: lastTransform.y + dragOffsetY,\n              scale,\n            });\n          }\n          return;\n        }\n        // If user is swiping horizontally or horizontal shift is dominant\n        // we change only horizontal position\n        if (isSwipingRef.current || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n          isSwipingRef.current = true;\n          isActiveRef.current = false;\n          setTransform({\n            x: dragOffsetX,\n            y: 0,\n            scale,\n          });\n          return;\n        }\n        if (isSwipingRef.current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          setTransform({\n            x: 0,\n            y: dragOffsetY,\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        // Calculate current scale based on zoom factor and limits, add max zoom margin for bounce back effect\n        const scale = Math.min(MAX_ZOOM * 3, Math.max(lastTransform.scale * zoomFactor, MIN_ZOOM));\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        setTransform({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const { scale, x, y } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return undefined;\n          lastTransform = {\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          };\n        } else {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n        }\n        return animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n      },\n      onRelease: () => {\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const { scale, x, y } = transformRef.current;\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = INITIAL_TRANSFORM;\n          return animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n        }\n        if (scale > 1) {\n          if (!content || !initialContentRect) {\n            lastTransform = { x, y, scale };\n            return undefined;\n          }\n          // Get current content boundaries\n          const boundaries = content.getBoundingClientRect();\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          // If content is outside window we calculate offset boundaries\n          // based on initial content rect and current scale\n          if (boundaries.width > window.innerWidth) {\n            const minOffsetX = -initialContentRect.left * s1;\n            const maxOffsetX = window.innerWidth - initialContentRect.right * s1;\n            x1 = Math.min(minOffsetX, Math.max(maxOffsetX, x1));\n          } else {\n            // Else we center the content on the screen\n            x1 = (window.innerWidth - window.innerWidth * s1) / 2;\n          }\n\n          if (boundaries.height > window.innerHeight) {\n            const minOffsetY = -initialContentRect.top * s1;\n            const maxOffsetY = window.innerHeight - initialContentRect.bottom * s1;\n            y1 = Math.min(minOffsetY, Math.max(maxOffsetY, y1));\n          } else {\n            y1 = (window.innerHeight - window.innerHeight * s1) / 2;\n          }\n          lastTransform = {\n            x: x1,\n            y: y1,\n            scale: s1,\n          };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [x1, y1, s1],\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = { x, y, scale };\n        if (absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          return animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: timingFunctions.easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (window.innerWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          debounceSetMessage(() => selectMessage(mId));\n        }\n        debounceSwipe(() => setIsSwiping(false));\n        debounceActive(() => setIsActive(true));\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: timingFunctions.easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    isZoomed,\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    setIsSwiping,\n    setIsActive,\n  ]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && /* @ts-ignore */ (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-window.innerWidth + offsetX - SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={previousMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={`MediaViewerSlide ${isActive ? 'MediaViewerSlide--active' : ''}`}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          /* @ts-ignore */\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            isActive={isActiveRef.current}\n            isFooterHidden={isFooterHidden || isZoomed || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && /* @ts-ignore */ (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(window.innerWidth + offsetX + SLIDES_GAP)}>\n          {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n          <MediaViewerContent {...rest} messageId={nextMessageId} isFooterHidden={isFooterHidden} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.Transition__slide--active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n  } = getDispatch();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import React, { FC } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Transition, { TransitionProps } from '../ui/Transition';\n\nconst SlideTransition: FC<TransitionProps> = ({ children, ...props }) => {\n  if (IS_TOUCH_ENV) {\n    // Return dummy container to keep existing DOM structure, needed to preserve ghost animation\n    return (\n      <div className=\"Transition\">\n        <div className=\"Transition__slide--active\">\n          {children(true, true, 1)}\n        </div>\n      </div>\n    );\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Transition {...props}>{children}</Transition>;\n};\n\nexport default SlideTransition;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiDimensions, ApiMediaFormat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\n\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport PanZoom from './PanZoom';\nimport SenderInfo from './SenderInfo';\nimport SlideTransition from './SlideTransition';\nimport ZoomControls from './ZoomControls';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n  } = getDispatch();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 && !IS_TOUCH_ENV ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({\n    x: 0,\n    y: 0,\n  });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({\n      x: 0,\n      y: 0,\n    });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({\n        x: 0,\n        y: 0,\n      });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const nextMessageId = getMessageId(messageId, 1);\n  const previousMessageId = getMessageId(messageId, -1);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({\n      x,\n      y,\n    });\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectMessage(previousMessageId);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectMessage(nextMessageId);\n          break;\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [isOpen, nextMessageId, previousMessageId, selectMessage]);\n\n  useEffect(() => {\n    if (isZoomed || IS_TOUCH_ENV) return undefined;\n    const element = document.querySelector<HTMLDivElement>('.MediaViewerSlide--active');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: close,\n    });\n  }, [close, isGif, isZoomed, messageId]);\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <SlideTransition\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {(isActive: boolean) => (\n                <MediaViewerSlides\n                  messageId={messageId}\n                  getMessageId={getMessageId}\n                  chatId={chatId}\n                  isPhoto={isPhoto}\n                  isGif={isGif}\n                  threadId={threadId}\n                  avatarOwnerId={avatarOwner && avatarOwner.id}\n                  profilePhotoIndex={profilePhotoIndex}\n                  origin={origin}\n                  isOpen={isOpen}\n                  hasFooter={hasFooter}\n                  isZoomed={isZoomed}\n                  isActive={isActive}\n                  animationLevel={animationLevel}\n                  onClose={close}\n                  selectMessage={selectMessage}\n                  onFooterClick={handleFooterClick}\n                />\n              )}\n            </SlideTransition>\n          </PanZoom>\n          {!isFirst && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(previousMessageId)}\n            />\n          )}\n          {!isLast && !IS_TOUCH_ENV && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={() => selectMessage(nextMessageId)}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../modules/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  onFilterChange: (filter: string) => void;\n  loadMore: NoneToVoidFunction;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  onFilterChange,\n  onClose,\n  loadMore,\n  onSelectChatOrUser,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../modules/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    loadMoreChats,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    setForwardChatId({ id: userId });\n  }, [setForwardChatId]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds)!;\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreChats}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={exitForwardMode}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(ForwardPicker));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const { dismissDialog, acceptInviteConfirmation, sendMessage } = getDispatch();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {about && <p className=\"modal-about\">{renderText(about)}</p>}\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button className=\"confirm-dialog-button\" isText onClick={handleConfirm}>{lang('OK')}</Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getDispatch();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getDispatch();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url));\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date, lang));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date, lang)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getDispatch();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getDispatch();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getDispatch();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\nconst ReportMessageModal: FC<OwnProps> = ({\n  isOpen,\n  messageIds,\n  onClose,\n}) => {\n  const {\n    reportMessages,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(ReportMessageModal);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n  } = getDispatch();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../modules/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title=\"Which users read the message\"\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, loadContactList, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getDispatch();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport { getMessageSummaryText, sortChatIds, filterUsersByName } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(contactIdsWithMe, usersById, searchQuery);\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, localContactIds, currentUserId, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getDispatch();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getDispatch();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getDispatch();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos } = getDispatch();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ canAutoPlayVideos: isChecked })}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  allListIds,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  onCreateFolder,\n  onEditFolder,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [lang, allListIds, foldersById, chatsById, usersById, orderedFolderIds, notifySettings, notifyExceptions]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n    loadMoreChats,\n  } = getDispatch();\n\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n}) => {\n  const { loadMoreChats } = getDispatch();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays?.pinnedChats || []),\n      ...(activeChatArrays?.otherChats || []),\n      ...(archivedChatArrays?.otherChats || []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(\n    isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats,\n  );\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, {\n  FC, memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  const firstLetters = useMemo(() => {\n    if (mediaData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      <img src={mediaData} className={transitionClassNames} alt=\"\" />\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ISettings, TimeFormat } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup, { IRadioOption } from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n}) => {\n  const {\n    setSettingOption,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getDispatch();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport useDebounce from '../../../hooks/useDebounce';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useDebounce(500, false, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n              runDebounced(() => playNotifySound(undefined, volume));\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'contact', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'group', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'silent');\n          }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => {\n            handleSettingsChange(e, 'broadcast', 'showPreviews');\n          }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getDispatch();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getDispatch();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getDispatch();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n}) => {\n  const {\n    loadAuthorizations,\n    terminateAuthorization,\n    terminateAllAuthorizations,\n  } = getDispatch();\n\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../modules/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadContactList,\n    setUserSearchQuery,\n    blockContact,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadContactList}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getDispatch();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getDispatch();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isUserId, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  listIds?: string[];\n  orderedPinnedIds?: string[];\n  archivedListIds?: string[];\n  archivedPinnedIds?: string[];\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getDispatch();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isUserId(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n          || searchWords(getChatTitle(lang, chat), searchQuery)\n          || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    loadContactList,\n    openChat,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    loadContactList,\n    setGlobalSearchQuery,\n  } = getDispatch();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getDispatch();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage, ApiUser } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onDownload?: () => void;\n  onShowSeenBy?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  isDownloading,\n  canShowSeenBy,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onDownload,\n  onShowSeenBy,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canDownload && (\n        <MenuItem icon=\"download\" onClick={onDownload}>\n          {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n        </MenuItem>\n      )}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canShowSeenBy && (\n        <MenuItem icon=\"group\" onClick={onShowSeenBy} disabled={!message.seenByUserIds?.length}>\n          {message.seenByUserIds?.length\n            ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n            : lang('Conversation.ContextMenuNoViews')}\n          <div className=\"avatars\">\n            {seenByRecentUsers?.map((user) => (\n              <Avatar\n                size=\"micro\"\n                user={user}\n              />\n            ))}\n          </div>\n        </MenuItem>\n      )}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../modules/selectors';\nimport { isChatGroup, isOwnMessage } from '../../../modules/helpers';\nimport { SEEN_BY_MEMBERS_EXPIRE, SEEN_BY_MEMBERS_CHAT_MAX } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n  } = getDispatch();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onDownload={handleDownloadClick}\n        onShowSeenBy={handleOpenSeenByModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const canShowSeenBy = Boolean(chat\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && chat.membersCount\n      && chat.membersCount < SEEN_BY_MEMBERS_CHAT_MAX\n      && message.date > Date.now() / 1000 - SEEN_BY_MEMBERS_EXPIRE);\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: !isProtected && canCopy,\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      activeDownloads,\n      canShowSeenBy,\n    };\n  },\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser,\n} from '../../modules/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact,\n} from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    addContact,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    addContact({ userId: chatId });\n    closeMenu();\n  }, [addContact, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleCall = useCallback(() => {\n    openCallFallbackConfirm();\n    closeMenu();\n  }, [closeMenu, openCallFallbackConfirm]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<string, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<string, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  allowedAttachmentOptions,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, allowedAttachmentOptions, onFileSelect, onPollCreate, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  stickers,\n}) => {\n  const { clearStickersForEmoji } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getDispatch();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getDispatch();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getDispatch();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n  } = getDispatch();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getDispatch();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getHasAdminRight, getUserFullName } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n};\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return { chat, usersById, canDeleteMembers };\n  },\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n  } = getDispatch();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getDispatch();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"channel-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getDispatch();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedChatMemberId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getDispatch();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(isNewAdmin);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedChatMemberId);\n\n    if (isNewAdmin) {\n      // If selectedAdminMember is fullfilled, it means that we are editing an existing admin (after a user\n      // has been promoted as admin)\n      return selectedAdminMember\n        ? undefined\n        : chat.fullInfo?.members?.find(({ userId }) => userId === selectedChatMemberId);\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo, isNewAdmin, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((isNewAdmin ? defaultRights : selectedChatMember?.adminRights) || {});\n    setCustomTitle(((isNewAdmin ? 'admin' : selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedChatMemberId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={!!permissions.manageCall}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return undefined;\n    }\n    const adminIds = noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, noAdmins, adminMembers, userStatusesById, serverTimeOffset]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      openUserInfo({ id });\n    }\n  }, [noAdmins, onChatMemberSelect, onScreenSelect, openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getDispatch();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n// @ts-ignore\nimport CameraFlip from '../../../assets/animatedIcons/CameraFlip.tgs';\n// @ts-ignore\nimport HandFilled from '../../../assets/animatedIcons/HandFilled.tgs';\n// @ts-ignore\nimport HandOutline from '../../../assets/animatedIcons/HandOutline.tgs';\n// @ts-ignore\nimport Speaker from '../../../assets/animatedIcons/Speaker.tgs';\n// @ts-ignore\nimport VoiceAllowTalk from '../../../assets/animatedIcons/VoiceAllowTalk.tgs';\n// @ts-ignore\nimport VoiceMini from '../../../assets/animatedIcons/VoiceMini.tgs';\n// @ts-ignore\nimport VoiceMuted from '../../../assets/animatedIcons/VoiceMuted.tgs';\n// @ts-ignore\nimport VoiceOutlined from '../../../assets/animatedIcons/VoiceOutlined.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n  CameraFlip,\n  HandFilled,\n  HandOutline,\n  Speaker,\n  VoiceAllowTalk,\n  VoiceMini,\n  VoiceMuted,\n  VoiceOutlined,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","isZoomed","fileName","isAvatar","onCloseMediaViewer","onForward","onZoomToggle","downloadMessageMedia","cancelMessageMediaDownload","getDispatch","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","size","color","className","undefined","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","loadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","isFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","ANIMATION_DURATION","cancelAnimation","INITIAL_TRANSFORM","x","y","scale","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","isSwipingRef","isActiveRef","activeMessageId","setActiveMessageId","forceUpdate","useForceUpdate","setIsFooterHidden","setTransform","value","setIsSwiping","setIsActive","debounceSetMessage","useDebounce","debounceSwipe","debounceActive","handleToggleFooterVisibility","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","isNotPassive","excludedClosestSelector","event","type","pageX","innerWidth","arePropsShallowEqual","captureEvent","dragOffsetX","dragOffsetY","absOffsetX","abs","absOffsetY","h","touches","onZoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MAX_ZOOM","scaleFactor","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","centerX","centerY","animateNumber","from","to","timing","timingFunctions","onUpdate","absX","absY","boundaries","s1","x1","y1","k","Vx","Vy","minOffsetX","maxOffsetX","right","innerHeight","minOffsetY","top","maxOffsetY","bottom","direction","mId","dirX","offset","nextMessageId","previousMessageId","offsetX","offsetY","getAnimationStyle","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","zoomLevel","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","onMouseDown","newDragData","pageY","onMouseUp","onMouseMove","deltaX","deltaY","getNewMatrixData","sender","isUserId","selectSender","closeMediaViewer","focusMessage","handleFocusMessage","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","Transition","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","setZoomLevel","disabled","step","onChange","Number","target","mediaViewer","settings","byKey","chatMessages","collectionIds","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","setPanDelta","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handlePan","renderSenderInfo","useHistoryBack","handleKeyDown","shouldCloseOnVideo","ShowTransition","isRtl","activeKey","name","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","onFilterChange","loadMore","onSelectChatOrUser","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","loadMoreChats","setFilter","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","useFlag","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","onCloseAnimationEnd","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleDownload","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","renderButton","destructive","seenByModal","memberIds","seenByUserIds","openChat","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","currentType","isVoice","activeDownloads","theme","selectTheme","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","Checkbox","checked","onCheck","isChecked","RangeSlider","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","allListIds","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","focus","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","searchWords","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","stickerSets","installedDate","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","handleChange","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","getUserFullName","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","serverTimeOffset","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canShowSeenBy","seenByRecentUsers","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onDownload","onShowSeenBy","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","selectActiveDownloadIds","noOptions","isScheduled","isOwnMessage","SEEN_BY_MEMBERS_CHAT_MAX","SEEN_BY_MEMBERS_EXPIRE","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","some","msg","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleRescheduleMessage","scheduledAt","handleCopyLink","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canAddContact","getCanAddContact","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","addContact","openCallFallbackConfirm","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleCall","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","option","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleMouseMove","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","onFileSelect","onPollCreate","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","fullName","messagesById","foundResults","senderUser","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","openUserInfo","adminIds","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","concat","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","CameraFlip","HandFilled","HandOutline","Speaker","VoiceAllowTalk","VoiceMini","VoiceMuted","VoiceOutlined","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","err","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}