{"version":3,"file":"291.dc4590f9f22e77397184.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/util/areDeepEqual.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/ui/Skeleton.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.module.scss?adba","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentMenuBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { GlobalState } from '../../types';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyTextToClipboard(result.join('\\n'));\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatBot, selectChatMessage, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  const bot = botId && selectChatBot(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddActionHandler('closePaymentModal', (global) => {\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const { volume, isMuted, playbackRate } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { GlobalActions } from '../../types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const maxId = chat.lastMessage?.id;\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore,\n  } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsIds: result.ids });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  if (!chat.unreadMentionsCount) {\n    return;\n  }\n\n  const unreadMentionsCount = chat.unreadMentionsCount - messageIds.length;\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  if (!unreadMentions.length && unreadMentionsCount) {\n    actions.fetchUnreadMentions({\n      chatId: chat.id,\n      offsetId: Math.max(...messageIds),\n    });\n  }\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  const cached = global.stickers.setsById;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  for (let i = 0; i < addedSetIds.length; i++) {\n    const id = addedSetIds[i];\n    if (cached[id].stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({ stickerSetId: id });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddActionHandler('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateChat, updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n\n  const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, { isUsernameAvailable });\n  setGlobal(global);\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await callApi('migrateChat', chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: result,\n    },\n  }));\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateChat(global, chatId, { joinRequests: result }));\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport {\n  ApiChat, ApiMessage, MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 10 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, closeNewContactDialog, replaceUserStatuses, updateChat, updateManagementProgress, updateUser,\n  updateUsers, updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos: result.photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos: result.photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      if (url.match(RE_TME_LINK) || url.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url });\n      } else {\n        actions.toggleSafeLinkModal({ url });\n      }\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      actions.getPaymentForm({ chat, messageId });\n      actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n      actions.openPaymentModal({ chatId: chat.id, messageId });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const bot = selectChatBot(global, chatId);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, bot, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      if (!message.viaBotId && !message.senderId) {\n        return;\n      }\n      const bot = selectChatBot(global, message.viaBotId! || message.senderId!);\n      if (!bot) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        bot,\n        peer: chat,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectChatBot(global, message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  const text = `@${botSender.username} ${query}`;\n\n  if (isSamePeer) {\n    actions.openChatWithText({ chatId: chat.id, text });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    switchBotInline: {\n      query,\n      botUsername: botSender.username,\n    },\n  };\n});\n\naddActionHandler('resetSwitchBotInline', (global) => {\n  return {\n    ...global,\n    switchBotInline: undefined,\n  };\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, bot, theme, buttonText,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, bot, peer, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  if (!selectIsTrustedBot(global, bot)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        bot,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      bot,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', (global, actions, payload) => {\n  const {\n    bot, peer, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const result = callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachMenuBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachMenuBots(hash);\n});\n\naddActionHandler('toggleBotInAttachMenu', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleBotInAttachMenu(bot, isEnabled);\n});\n\nasync function toggleBotInAttachMenu(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleBotInAttachMenu', { bot, isEnabled });\n  await loadAttachMenuBots();\n}\n\nasync function loadAttachMenuBots(hash?: string) {\n  const result = await callApi('loadAttachMenuBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachMenuBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const bot = selectChatBot(global, botId);\n  if (!chat || !bot) {\n    return undefined;\n  }\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      botAttachRequest: {\n        bot,\n        chatId,\n        startParam,\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.requestWebView({\n    url,\n    peer: chat,\n    bot,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmBotAttachRequest', async (global, actions) => {\n  const { botAttachRequest } = global;\n  if (!botAttachRequest) return;\n\n  const { bot, chatId, startParam } = botAttachRequest;\n\n  setGlobal({\n    ...global,\n    botAttachRequest: undefined,\n  });\n\n  await toggleBotInAttachMenu(bot, true);\n\n  actions.callAttachMenuBot({ chatId, botId: bot.id, startParam });\n});\n\naddActionHandler('closeBotAttachRequestModal', (global) => {\n  return {\n    ...global,\n    botAttachRequest: undefined,\n  };\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, toggleSafeLinkModal, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      toggleSafeLinkModal({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n  setSmartGlocalCardInfo,\n} from '../../reducers';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n  if (!chat || !messageId || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, nativeProvider, formId, {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/[^\\d]+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/[^\\d]+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  nativeProvider: string,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n\n  if (result === true) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddActionHandler('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { ApiChat } from '../../api/types';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddActionHandler('sendReaction', (global, actions, payload) => {\n  const {\n    chatId,\n  }: { chatId: string } = payload;\n  let { messageId } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    appConfig: {\n      ...global.appConfig,\n      defaultReaction: reaction,\n    } as ApiAppConfig,\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((l) => l.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  const { nextOffset, count, reactions } = result;\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: {\n      nextOffset,\n      count,\n      reactions: [\n        ...(message.reactors?.reactions || []),\n        ...reactions,\n      ],\n    },\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((l) => l.id === id) || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.find((l) => l.isUnread);\n\n        if (!unread) return undefined;\n\n        const reaction = unread?.reaction;\n\n        return [messageId, {\n          messageId,\n          reaction,\n        }];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n\n  result.views = views;\n  result.forwards = forwards;\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      }\n\n      setGlobal(updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(update.message.id && update.message.hasUnreadMention && {\n          unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1,\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id],\n        }),\n      }));\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ApiPrivacyKey, PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { initializeSoundsForSafari } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      if (phoneCall) return undefined;\n\n      const { call } = update;\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        notifyAboutCall({\n          call,\n          user: selectPhoneCallUser(global)!,\n        });\n        void initializeSoundsForSafari();\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      return clearPayment(global);\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ISettings, LeftColumnContent } from '../../../types';\nimport { ApiChat } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  BETA_DISCUSSION_CHAT_EN,\n  BETA_DISCUSSION_CHAT_RU,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: 0 | 1 | 2;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing'>;\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank');\n  }, []);\n\n  const handleRuDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_RU });\n  }, [openChatByUsername]);\n\n  const handleEnDiscussionClick = useCallback(() => {\n    openChatByUsername({ username: BETA_DISCUSSION_CHAT_EN });\n  }, [openChatByUsername]);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n  }, []);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <>\n              <MenuItem\n                icon=\"permissions\"\n                onClick={handleChangelogClick}\n              >\n                Beta Changelog\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleRuDiscussionClick}\n              >\n                Beta Discussion (ru)\n              </MenuItem>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleEnDiscussionClick}\n              >\n                Beta Discussion (en)\n              </MenuItem>\n            </>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n    };\n  },\n)(LeftMainHeader));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChatFolder } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      {\n        id: ALL_FOLDER_ID,\n        title: lang.code === 'en' ? 'All' : lang('FilterAllChats'),\n      },\n      ...displayedFolders.map(({ id, title }) => ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: activeChatFolder !== 0,\n    onBack: () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default memo(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId });\n  }, [currentUserId, openChat]);\n\n  useHotkeys([\n    ['mod+shift+F', handleHotkeySearch],\n    ['mod+shift+S', handleHotkeySavedMessages],\n  ]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n    } = global;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      activeChatFolder,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition, ManagementScreens } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys([\n    ['meta+F', handleHotkeySearchClick],\n  ]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../global/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = renderMessageSummary(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{text}</p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nconst useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n\nexport default useAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { GlobalState, MessageListType } from '../../global/types';\nimport {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser, MAIN_THREAD_ID,\n} from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video || location;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { asTextWithSpoilers: isEmbedded },\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{content}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { renderMessageSummary } from './helpers/renderMessageText';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderMessageSummary(lang, message, Boolean(mediaThumbnail))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect}\n            play\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  reactionMessage?: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n  reactionMessage,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && reactionMessage?.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { NO_STICKER_SET_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\nimport safePlay from '../../../util/safePlay';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isLottie, stickerSetId, isVideo } = sticker;\n  const canDisplayVideo = IS_WEBM_SUPPORTED;\n  const isMemojiSticker = stickerSetId === NO_STICKER_SET_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const previewMediaHash = isVideo && !canDisplayVideo && (\n    sticker.isPreloadedGlobally ? `sticker${sticker.id}?size=m` : getMessageMediaHash(message, 'pictogram'));\n  const previewBlobUrl = useMedia(previewMediaHash);\n  const thumbDataUri = useWebpThumbnail(message);\n  const previewUrl = previewBlobUrl || thumbDataUri;\n\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isLottieLoaded, markLottieLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isLottie ? isLottieLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  useEffect(() => {\n    if (!isVideo || !ref.current) return;\n    const video = ref.current.querySelector('video');\n    if (!video) return;\n    if (shouldPlay) {\n      safePlay(video);\n    } else {\n      video.pause();\n    }\n  }, [isVideo, shouldPlay]);\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {(!isMediaReady || (isVideo && !canDisplayVideo)) && (\n        <img\n          src={previewUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isLottie && !isVideo && (\n        <img\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isVideo && canDisplayVideo && isMediaReady && (\n        <video\n          src={mediaData as string}\n          width={width}\n          height={height}\n          autoPlay={shouldPlay}\n          playsInline\n          loop={shouldLoop}\n          muted\n        />\n      )}\n      {isLottie && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markLottieLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  withAspectRatio?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n  withAspectRatio,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const aspectRatio = withAspectRatio ? `aspect-ratio: ${(width / height).toFixed(3)}/ 1` : '';\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;${aspectRatio}`\n    : '';\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        style={`width: ${width}px; height: ${height}px;${aspectRatio}`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          style={aspectRatio}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          withAspectRatio\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, {\n  FC, memo, useLayoutEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n    photoWidth,\n    photoHeight,\n  } = invoice!;\n\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (photoUrl) {\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const photoStyle = photoHeight && photoWidth ? `aspect-ratio: ${photoWidth / photoHeight};` : undefined;\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            style={photoStyle}\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","const PROVIDER = 'http://maps.google.com/maps';\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// eslint-disable-next-line max-len\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport './Skeleton.scss';\n\ntype OwnProps = {\n  variant?: 'rectangular' | 'rounded-rect' | 'round';\n  animation?: 'wave' | 'pulse';\n  width?: number;\n  height?: number;\n  className?: string;\n};\n\nconst Skeleton: FC<OwnProps> = ({\n  variant = 'rectangular',\n  animation = 'wave',\n  width,\n  height,\n  className,\n}) => {\n  const classNames = buildClassName('Skeleton', variant, animation, className);\n  const style = (width ? `width: ${width}px;` : '') + (height ? `height: ${height}px;` : '');\n  return (\n    <div className={classNames} style={style} />\n  );\n};\n\nexport default Skeleton;\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    window.open(url, '_blank')?.focus();\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffect(() => {\n    if (shouldRenderText) return;\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n    if (mapBlobUrl) {\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [isOwn, isInSelectMode, isSelected, theme, mapBlobUrl, shouldRenderText]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        width={DEFAULT_MAP_CONFIG.width}\n        height={DEFAULT_MAP_CONFIG.height}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {['buy', 'receipt'].includes(button.type) && <i className=\"icon-card\" />}\n              {button.type === 'url' && !RE_TME_LINK.test(button.url) && <i className=\"icon-arrow-right\" />}\n              {button.type === 'switchBotInline' && <i className=\"icon-share-filled\" />}\n              {['webView', 'simpleWebView'].includes(button.type) && <i className=\"icon-webapp\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getActions();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<string>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          forceOnHeavyAnimation\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-message-MessagePhoneCall-module__root\",\"button\":\"src-components-middle-message-MessagePhoneCall-module__button\",\"info\":\"src-components-middle-message-MessagePhoneCall-module__info\",\"reason\":\"src-components-middle-message-MessagePhoneCall-module__reason\",\"arrow\":\"src-components-middle-message-MessagePhoneCall-module__arrow\",\"incoming\":\"src-components-middle-message-MessagePhoneCall-module__incoming\",\"missed\":\"src-components-middle-message-MessagePhoneCall-module__missed\",\"meta\":\"src-components-middle-message-MessagePhoneCall-module__meta\",\"duration\":\"src-components-middle-message-MessagePhoneCall-module__duration\"};","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n  selectReplySender,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && !isProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (hasReactions) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        reactionMessage={reactionMessage}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReaction: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botInfo?.description || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 0) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys([['meta+C', handleCopy]]);\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, { FC, memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-ScrollDownButton-module__root\",\"animation-level-0\":\"src-components-middle-ScrollDownButton-module__animation-level-0\",\"animationLevel0\":\"src-components-middle-ScrollDownButton-module__animation-level-0\",\"Main\":\"src-components-middle-ScrollDownButton-module__Main\",\"main\":\"src-components-middle-ScrollDownButton-module__Main\",\"right-column-open\":\"src-components-middle-ScrollDownButton-module__right-column-open\",\"rightColumnOpen\":\"src-components-middle-ScrollDownButton-module__right-column-open\",\"button\":\"src-components-middle-ScrollDownButton-module__button\",\"icon\":\"src-components-middle-ScrollDownButton-module__icon\",\"unread-count\":\"src-components-middle-ScrollDownButton-module__unread-count\",\"unreadCount\":\"src-components-middle-ScrollDownButton-module__unread-count\"};","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-FloatingActionButtons-module__root\",\"revealed\":\"src-components-middle-FloatingActionButtons-module__revealed\",\"no-composer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"noComposer\":\"src-components-middle-FloatingActionButtons-module__no-composer\",\"no-extra-shift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"noExtraShift\":\"src-components-middle-FloatingActionButtons-module__no-extra-shift\",\"only-reactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"onlyReactions\":\"src-components-middle-FloatingActionButtons-module__only-reactions\",\"unread\":\"src-components-middle-FloatingActionButtons-module__unread\",\"is-symbol-menu-open\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\",\"isSymbolMenuOpen\":\"src-components-middle-FloatingActionButtons-module__is-symbol-menu-open\"};","import { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments, isActive]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getActions();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (editedMessage) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else if (currentHtml !== undefined) {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={onActivate}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__root\",\"compact\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__compact\",\"image\":\"src-components-middle-composer-AttachmentMenuBotIcon-module__image\"};","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\n\nimport { ISettings } from '../../../types';\nimport { ApiDocument, ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachmentMenuBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachmentMenuBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((l) => {\n      l.style.stroke = color;\n      l.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachmentMenuBotIcon);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { IAnchorPosition, ISettings } from '../../../types';\nimport { ApiAttachMenuBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotIcon from './AttachmentMenuBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachMenuBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachmentMenuBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachMenuBot, toggleBotInAttachMenu } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleBotInAttachMenu]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachmentMenuBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachMenuBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachmentMenuBotItem);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachmentMenuBotItem from './AttachmentMenuBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  isPrivateChat?: boolean;\n  attachMenuBots: GlobalState['attachMenu']['bots'];\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachMenuBots,\n  isScheduled,\n  isPrivateChat,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && isPrivateChat && Object.values(attachMenuBots).map((bot) => (\n          <AttachmentMenuBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = useCallback(() => {\n    unmarkForceOpen();\n    onClose();\n  }, [onClose, unmarkForceOpen]);\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getActions();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n  ApiBotMenuButton,\n} from '../../../api/types';\nimport { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedText,\n  selectTheme,\n  selectCurrentMessageList,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedText?: string;\n    attachMenuBots: GlobalState['attachMenu']['bots'];\n    isPrivateChat?: boolean;\n    theme: ISettings['theme'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedText,\n  botMenuButton,\n  attachMenuBots,\n  isPrivateChat,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    loadFullChat,\n    resetOpenChatWithText,\n    callAttachMenuBot,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const canShowSendAs = sendAsIds && (sendAsIds.length > 1 || !sendAsIds.includes(currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !chat.fullInfo && isReady && isChatSuperGroup(chat)) {\n      loadFullChat({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadFullChat]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    htmlRef,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(isForCurrentMessageList, insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachMenuBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachMenuBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedText) {\n      setHtml(requestedText);\n      resetOpenChatWithText();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedText, resetOpenChatWithText]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean, shouldPreserveInput = false,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete, activeVoiceRecording, requestCalendar,\n    pauseRecordingVoice, handleMessageSchedule,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record && !canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonimous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {isChatWithBot && isBotMenuButtonCommands && botCommands !== false && !activeVoiceRecording\n            && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            isPrivateChat={isPrivateChat}\n            attachMenuBots={attachMenuBots}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isPrivateChat = Boolean(selectUser(global, chatId));\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsIds && defaultSendAsId && chat.sendAsIds.includes(defaultSendAsId)\n      ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedText = selectRequestedText(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n        && threadId === currentMessageList?.threadId\n        && messageListType === currentMessageList?.type;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isPrivateChat,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedText,\n      attachMenuBots: global.attachMenu.bots,\n      theme: selectTheme(global),\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n\n    const html = getTextWithEntitiesAsHtml(editingDraft?.text.length ? editingDraft : editedMessage.content.text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <PaymentModal\n                  isOpen={Boolean(isPaymentModalOpen)}\n                  onClose={closePaymentModal}\n                />\n                <ReceiptModal\n                  isOpen={Boolean(isReceiptModalOpen)}\n                  onClose={clearReceipt}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { FC } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n        if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { GlobalState } from '../../global/types';\n\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\nconst GameModal: FC<OwnProps> = ({ openedGame, gameTitle }) => {\n  const { closeGame, showNotification, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        showNotification({ message: 'Unsupported game action' });\n      }\n    } catch (e) {\n      // Ignore messages from other origins\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu, showNotification]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(GameModal);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './BotAttachModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotAttachModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotAttachModal = useModuleLoader(Bundles.Extra, 'BotAttachModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotAttachModal ? <BotAttachModal {...props} /> : undefined;\n};\n\nexport default memo(BotAttachModalAsync);\n","import React, {\n  FC, useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LangCode } from '../../types';\nimport {\n  ApiChat, ApiMessage, ApiUpdateAuthorizationStateType, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { fastRaf } from '../../util/schedulers';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport BotAttachModal from './BotAttachModal.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  connectionState?: ApiUpdateConnectionStateType;\n  authState?: ApiUpdateAuthorizationStateType;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botAttachRequest?: GlobalState['botAttachRequest'];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  connectionState,\n  authState,\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botAttachRequest,\n  webApp,\n}) => {\n  const {\n    sync,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n    loadAttachMenuBots,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n      sync();\n    }\n  }, [connectionState, authState, sync]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachMenuBots();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachMenuBots,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequest?.bot} type={botTrustRequest?.type} />\n      <BotAttachModal bot={botAttachRequest?.bot} />\n      <MessageListHistoryHandler />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n\n    return {\n      connectionState: global.connectionState,\n      authState: global.authState,\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest: global.botTrustRequest,\n      botAttachRequest: global.botAttachRequest,\n      webApp: global.webApp,\n    };\n  },\n)(Main));\n","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","lang","langProvider","chatMessages","selectChatMessages","result","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","reduce","acc","sender","selectSender","push","getSenderTitle","getMessageSummaryText","copyTextToClipboard","join","scrollOffset","messageId","paramName","text","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","isOpen","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","bot","selectChatBot","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","avatarOwnerId","profilePhotoIndex","mediaViewer","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","unreadMentionsCount","fetchUnreadMentions","markMessagesRead","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","cached","setsById","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","newGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","currentResults","timestamp","getActions","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","current","managementState","offsetDate","offsetUserId","offsetUser","currentInviteInfo","importers","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","releaseStatusTimeout","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","userOrChat","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","open","blur","location","href","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleBotInAttachMenu","isEnabled","loadAttachMenuBots","attachMenu","bots","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","showDialog","toggleSafeLinkModal","openGame","alert","isError","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","openPollModal","receiptMessageId","getReceipt","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","botUsername","openChatWithText","queryId","resultId","scheduleDate","param","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","botAttachRequest","callAttachMenuBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","status","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","requestedInfoId","sendPaymentForm","save","selectStripeCredentials","selectSmartGlocalCredentials","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","sendReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","reactions","some","isChosen","animationLevel","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","msgId","updateStatistics","views","forwards","updateMessageStatistics","name","isPercentage","dcId","statisticsDcId","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","currentReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","targetUser","botInfo","menuButton","isBlocked","addBlockedContact","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","isCallPanelVisible","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","className","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","hostname","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","useCallback","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleChangelogClick","BETA_CHANGELOG_URL","handleRuDiscussionClick","BETA_DISCUSSION_CHAT_RU","handleEnDiscussionClick","BETA_DISCUSSION_CHAT_EN","handleSwitchToWebK","setPermanentWebVersion","clearWebsync","handleOpenTipsChat","isSearchFocused","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","folderTabs","ALL_FOLDER_ID","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","ref","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","handleMouseEnter","handleMouseLeave","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","useFlag","timeout","reload","useAppOutdatedCheck","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","useHotkeys","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","classList","remove","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","searchInput","handleHotkeySearchClick","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","renderMessageSummary","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","RippleEffect","shouldStopPropagation","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","Promise","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","audio","voice","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","_","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","getUserFullName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","pinnedIds","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asTextWithSpoilers","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","getMessageHtmlId","customText","isIntersecting","useIsIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","reactionMessage","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isLottie","isVideo","canDisplayVideo","IS_WEBM_SUPPORTED","isMemojiSticker","NO_STICKER_SET_ID","shouldLoad","mediaHash","previewMediaHash","previewUrl","getMessageMediaFormat","isMediaLoaded","isLottieLoaded","markLottieLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","safePlay","autoPlay","playsInline","loop","muted","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","canAutoLoad","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","withAspectRatio","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","aspectRatio","toFixed","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","useHeavyAnimationCheck","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","formatPhoneNumberWithCode","getPercentage","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","photoWidth","photoHeight","photoStyle","formatCurrency","VENUE_COLORS","entries","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","variant","animation","classNames","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","useTimeout","useInterval","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","peerId","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","selectIsDownloading","actualThreadInfo","hasUnreadReaction","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","messageSender","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","chatInviteHash","chatInviteTitle","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","markMentionsRead","throttleMs","margin","freeze","freezeForReading","unfreeze","unfreezeForReading","mentionIds","reactionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useOnChange","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","insertHtmlInSelection","html","selection","getSelection","getRangeAt","rangeCount","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","isPending","handleUnfreeze","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","getDocumentMediaHash","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","documentElement","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","customIcon","shortName","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachMenuBots","isPrivateChat","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","files","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","noCompact","forwardMessageIds","forwardedMessagesCount","onClear","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedText","selectRequestedText","isForCurrentMessageList","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithText","appendixRef","setHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","EDITABLE_INPUT_ID","newHtml","selectionRange","isSelectionInsideInput","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","getTextWithEntitiesAsHtml","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","items","getFilesFromDataTransferItems","newAttachments","all","file","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","onSend","isBotMenuButtonCommands","DropAreaState","withQuick","onHide","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonimous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","backButtonRef","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","flat","downloadHash","getMessageContentFilename","gameTitle","closeGame","handleMessage","parse","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","BotAttachModal","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","gameMessage","authState","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","ratingPhoneCall","sync","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","langCode","LOCATION_HASH","processDeepLink","decodeURIComponent","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","toggle","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}