{"version":3,"file":"700.f057ed004e34fabd3032.js","mappings":"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","sources":["webpack://telegram-t/./src/modules/actions/ui/localSearch.ts","webpack://telegram-t/./src/modules/actions/ui/chats.ts","webpack://telegram-t/./src/modules/actions/ui/messages.ts","webpack://telegram-t/./src/versionNotification.txt","webpack://telegram-t/./src/modules/actions/ui/globalSearch.ts","webpack://telegram-t/./src/modules/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/modules/actions/ui/users.ts","webpack://telegram-t/./src/modules/actions/ui/misc.ts","webpack://telegram-t/./src/modules/actions/ui/payments.ts","webpack://telegram-t/./src/modules/actions/api/messages.ts","webpack://telegram-t/./src/modules/actions/api/symbols.ts","webpack://telegram-t/./src/modules/actions/api/globalSearch.ts","webpack://telegram-t/./src/modules/actions/api/localSearch.ts","webpack://telegram-t/./src/modules/actions/api/management.ts","webpack://telegram-t/./src/modules/actions/api/sync.ts","webpack://telegram-t/./src/modules/actions/api/users.ts","webpack://telegram-t/./src/modules/reducers/bots.ts","webpack://telegram-t/./src/modules/actions/api/bots.ts","webpack://telegram-t/./src/modules/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/modules/reducers/reactions.ts","webpack://telegram-t/./src/modules/actions/api/reactions.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/modules/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/ConnectionState.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useThrottledMemo.ts","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/hooks/useWindowSize.ts","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/HeaderActions.tsx","webpack://telegram-t/./src/hooks/useWebpThumbnail.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/hooks/useAsync.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/calls/group/GroupCallTopPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useVideoAutoPause.ts","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/common/LocalAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./node_modules/opus-recorder/dist/encoderWorker.min.js","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/helpers/getMessageTextAsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/insertHtmlInSelection.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/CallFallbackConfirm.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addReducer } from '../../../lib/teact/teactn';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddReducer('closeLocalTextSearch', closeLocalTextSearch);\n\naddReducer('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddReducer('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddReducer('openChat', (global, actions, payload) => {\n  const {\n    id, threadId = -1, type = 'thread', shouldReplaceHistory = false,\n  } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n\n    setGlobal(global);\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddReducer('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddReducer('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddReducer('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddReducer('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddReducer('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\n// @ts-ignore\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddReducer('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddReducer('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddReducer('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddReducer('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddReducer('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddReducer('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n  } = payload!;\n\n  return {\n    ...global,\n    mediaViewer: {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    },\n    forwardMessages: {},\n  };\n});\n\naddReducer('closeMediaViewer', (global) => {\n  return {\n    ...global,\n    mediaViewer: {},\n  };\n});\n\naddReducer('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n    },\n  };\n});\n\naddReducer('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddReducer('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddReducer('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload!;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddReducer('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddReducer('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      const newGlobal = getGlobal();\n\n      setGlobal({\n        ...newGlobal,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    setGlobal({\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    });\n  }\n});\n\naddReducer('closePollResults', (global) => {\n  setGlobal({\n    ...global,\n    pollResults: {},\n  });\n});\n\naddReducer('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddReducer('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddReducer('openForwardMenu', (global, actions, payload) => {\n  const { fromChatId, messageIds, groupedId } = payload!;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n    },\n  };\n});\n\naddReducer('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddReducer('setForwardChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddReducer('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddReducer('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload!;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddReducer('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload!;\n  if (!message) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddReducer('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddReducer('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddReducer('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddReducer('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddReducer('exitMessageSelectMode', exitMessageSelectMode);\n\naddReducer('openPollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: true,\n  };\n});\n\naddReducer('closePollModal', (global) => {\n  return {\n    ...global,\n    isPollModalOpen: false,\n  };\n});\n\naddReducer('checkVersionNotification', (global, actions) => {\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddReducer('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddReducer('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddReducer('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddReducer('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n","export default \"**Telegram Web Z was updated to version 1.30**\\n\\n👏 **Harder**\\n• Meet Message Reactions:\\n  - React to a message with ❤️🔥🎉😁😱🤩😢👎💩🤮 in the context menu.\\n  - Send a quick 👍 reaction by hovering over the bottom corner of a message.\\n  - You can change your default reaction to another emoji in Settings > General.\\n  - Group and Channel admins can enable and control reactions via their chat's Info Page > Edit > Reactions.\\n\\n• Interactive Emoji:\\n  - Added support for all interactive emoji, including fullscreen animations and sound effects. Try 🔥, 🍆, 🍑 and more.\\n  - Animations play simultaneously when both users have the chat open.\\n  – The “is watching…” status will appear when your chat partner is also seeing the animations.\\n\\n• Manage invite links for Groups and Channels:\\n  – Enable admin approval or limited duration and users.\\n\\n🤩 **Better**\\n• Better quality for uploaded profile pictures.\\n• Various UI improvements.\\n\\n🚀 **Faster**\\n• Several optimizations for older devices – no more freezing while typing.\\n\\n💪 **Stronger**\\n• Saved Messages now correctly renders in search results.\\n• Fixed missing icons for muted chats in the chat list.\\n• The context menu no longer flickers on older devices.\\n• Fix re-scheduling messages to a previous date.\\n\";","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddReducer('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddReducer('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddReducer('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddReducer('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { updateSelectedUserId, updateUserSearch } from '../../reducers';\n\naddReducer('openUserInfo', (global, actions, payload) => {\n  const { id } = payload!;\n\n  actions.openChat({ id });\n});\n\nconst clearSelectedUserId = (global: GlobalState) => updateSelectedUserId(global, undefined);\n\naddReducer('openChat', clearSelectedUserId);\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiError } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectCurrentMessageList } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\n\nconst MAX_STORED_EMOJIS = 18; // Represents two rows of recent emojis\n\naddReducer('toggleChatInfo', (global) => {\n  return {\n    ...global,\n    isChatInfoShown: !global.isChatInfoShown,\n  };\n});\n\naddReducer('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddReducer('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddReducer('toggleManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddReducer('closeManagement', (global): GlobalState | undefined => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddReducer('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddReducer('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddReducer('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload!;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddReducer('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload!;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddReducer('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddReducer('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddReducer('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddReducer('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddReducer('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddReducer('openPaymentModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      chatId,\n      messageId,\n      isPaymentModalOpen: true,\n    },\n  };\n});\n\naddReducer('closePaymentModal', (global) => {\n  const newGlobal = clearPayment(global);\n  return closeInvoice(newGlobal);\n});\n\naddReducer('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      error,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n} from '../../selectors';\nimport { debounce, rafPromise } from '../../../util/schedulers';\nimport { isServiceNotificationMessage } from '../../helpers';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddReducer('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    // Let reducer return and update global\n    await Promise.resolve();\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddReducer('loadMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const message = await loadMessage(chat, messageId, replyOriginForId);\n    if (message && threadUpdate) {\n      const { lastMessageId, isDeleting } = threadUpdate;\n\n      setGlobal(updateThreadUnreadFromForwardedMessage(\n        getGlobal(),\n        message,\n        chatId,\n        lastMessageId,\n        isDeleting,\n      ));\n    }\n  })();\n});\n\naddReducer('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments, MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      });\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddReducer('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddReducer('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(message.previousLocalId || message.id);\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddReducer('saveDraft', (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return undefined;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n\n  if (threadId === MAIN_THREAD_ID) {\n    void callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  return global;\n});\n\naddReducer('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddReducer('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddReducer('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddReducer('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddReducer('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddReducer('deleteHistory', (global, actions, payload) => {\n  (async () => {\n    const { chatId, shouldDeleteForAll } = payload!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return;\n    }\n\n    const maxId = chat.lastMessage?.id;\n\n    await callApi('deleteHistory', { chat, shouldDeleteForAll, maxId });\n\n    const activeChat = selectCurrentMessageList(global);\n    if (activeChat && activeChat.chatId === chatId) {\n      actions.openChat({ id: undefined });\n    }\n  })();\n});\n\naddReducer('reportMessages', (global, actions, payload) => {\n  (async () => {\n    const {\n      messageIds, reason, description,\n    } = payload!;\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { chatId } = currentMessageList;\n    const chat = selectChat(global, chatId)!;\n\n    const result = await callApi('reportMessages', {\n      peer: chat, messageIds, reason, description,\n    });\n\n    actions.showNotification({\n      message: result\n        ? 'Thank you! Your report will be reviewed by our team.'\n        : 'Error occured while submiting report. Please, try again later.',\n    });\n  })();\n});\n\naddReducer('sendMessageAction', (global, actions, payload) => {\n  (async () => {\n    const { action, chatId, threadId } = payload!;\n    if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n    const chat = selectChat(global, chatId)!;\n    if (!chat) return;\n\n    await callApi('sendMessageAction', {\n      peer: chat, threadId, action,\n    });\n  })();\n});\n\naddReducer('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddReducer('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddReducer('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddReducer('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddReducer('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddReducer('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddReducer('forwardMessages', (global, action, payload) => {\n  const { fromChatId, messageIds, toChatId } = global.forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter<ApiMessage>(Boolean as any)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddReducer('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddReducer('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddReducer('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddReducer('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  serverTimeOffset?: number;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddReducer('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddReducer('loadSeenBy', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSeenBy', { chat, messageId });\n    if (!result) {\n      return;\n    }\n\n    setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n      seenByUserIds: result,\n    }));\n  })();\n});\n\naddReducer('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddReducer('loadSendAs', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSendAs', { chat });\n    if (!result) {\n      global = updateChat(global, chatId, {\n        sendAsIds: [],\n      });\n      setGlobal(global);\n      return;\n    }\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChat(global, chatId, {\n      sendAsIds: result.ids,\n    });\n    setGlobal(global);\n  })();\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddReducer('loadSponsoredMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchSponsoredMessages', { chat });\n    if (!result) {\n      return;\n    }\n\n    let newGlobal = updateSponsoredMessage(getGlobal(), chatId, result.messages[0]);\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users, 'id'));\n    newGlobal = addChats(newGlobal, buildCollectionByKey(result.chats, 'id'));\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectStickerSet } from '../../selectors';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('loadStickerSets', (global) => {\n  const { hash } = global.stickers.added || {};\n  void loadStickerSets(hash);\n});\n\naddReducer('loadAddedStickers', (global, actions) => {\n  const { setIds: addedSetIds } = global.stickers.added;\n  if (!addedSetIds || !addedSetIds.length) {\n    return;\n  }\n\n  (async () => {\n    for (let i = 0; i < addedSetIds.length; i++) {\n      actions.loadStickers({ stickerSetId: addedSetIds[i] });\n\n      if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n        await pause(ADDED_SETS_THROTTLE);\n      }\n    }\n  })();\n});\n\naddReducer('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddReducer('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddReducer('loadGreetingStickers', (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  (async () => {\n    const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n\n    if (!greeting) {\n      return;\n    }\n\n    const newGlobal = getGlobal();\n\n    setGlobal({\n      ...newGlobal,\n      stickers: {\n        ...newGlobal.stickers,\n        greeting: {\n          hash: greeting.hash,\n          stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n        },\n      },\n    });\n  })();\n});\n\naddReducer('loadFeaturedStickers', (global) => {\n  const { hash } = global.stickers.featured || {};\n  void loadFeaturedStickers(hash);\n});\n\naddReducer('loadStickers', (global, actions, payload) => {\n  const { stickerSetId, stickerSetShortName } = payload!;\n  let { stickerSetAccessHash } = payload!;\n\n  if (!stickerSetAccessHash && !stickerSetShortName) {\n    const stickerSet = selectStickerSet(global, stickerSetId);\n    if (!stickerSet) {\n      return;\n    }\n\n    stickerSetAccessHash = stickerSet.accessHash;\n  }\n\n  void loadStickers(stickerSetId, stickerSetAccessHash, stickerSetShortName);\n});\n\naddReducer('loadAnimatedEmojis', () => {\n  void loadAnimatedEmojis();\n  void loadAnimatedEmojiEffects();\n});\n\naddReducer('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddReducer('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddReducer('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddReducer('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddReducer('loadEmojiKeywords', (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  (async () => {\n    const emojiKeywords = await callApi('fetchEmojiKeywords', {\n      language,\n      fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n    });\n\n    global = getGlobal();\n    currentEmojiKeywords = global.emojiKeywords[language];\n\n    if (!emojiKeywords) {\n      setGlobal({\n        ...global,\n        emojiKeywords: {\n          ...global.emojiKeywords,\n          [language]: {\n            ...currentEmojiKeywords,\n            isLoading: false,\n          },\n        },\n      });\n\n      return;\n    }\n\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          isLoading: false,\n          version: emojiKeywords.version,\n          keywords: {\n            ...(currentEmojiKeywords?.keywords),\n            ...emojiKeywords.keywords,\n          },\n        },\n      },\n    });\n  })();\n});\n\nasync function loadStickerSets(hash?: string) {\n  const addedStickers = await callApi('fetchStickerSets', { hash });\n  if (!addedStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  ));\n}\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadFeaturedStickers(hash?: string) {\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  setGlobal(updateStickerSets(\n    getGlobal(),\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n}\n\nasync function loadStickers(stickerSetId: string, accessHash: string, stickerSetShortName?: string) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetShortName, stickerSetId, accessHash },\n  );\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  let global = getGlobal();\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadAnimatedEmojis() {\n  const stickerSet = await callApi('fetchAnimatedEmojis');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal(replaceAnimatedEmojis(getGlobal(), { ...set, stickers }));\n}\n\nasync function loadAnimatedEmojiEffects() {\n  const stickerSet = await callApi('fetchAnimatedEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    animatedEmojiEffects: { ...set, stickers },\n  });\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddReducer('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddReducer('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query);\n    });\n  }\n});\n\naddReducer('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, offset);\n    });\n  }\n});\n\naddReducer('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload!;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddReducer('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddReducer('openStickerSetShortName', (global, actions, payload) => {\n  const { stickerSetShortName } = payload!;\n  return {\n    ...global,\n    openedStickerSetShortName: stickerSetShortName,\n  };\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddReducer('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddReducer('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const newGlobal = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(newGlobal);\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddReducer('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chatOrUser: chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearchPeerId,\n  selectCurrentMediaSearch, selectCurrentMessageList, selectChat, selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport { SharedMediaType } from '../../../types';\n\naddReducer('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddReducer('searchMediaMessagesLocal', (global) => {\n  const peerId = selectCurrentMediaSearchPeerId(global);\n  const chatOrUser = peerId\n    ? global.users.byId[peerId] || global.chats.byId[peerId]\n    : undefined;\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chatOrUser || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chatOrUser, type, offsetId);\n});\n\naddReducer('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chatOrUser: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || (query && query !== currentSearch.query)) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalTextSearchResults(global, chatOrUser.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chatOrUser: ApiChat | ApiUser,\n  type: SharedMediaType,\n  offsetId?: number,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chatOrUser,\n    type,\n    limit: SHARED_MEDIA_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChatMessagesById(global, chatOrUser.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateLocalMediaSearchResults(global, chatOrUser.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\n/**\n * @param timestamp start of target date in seconds\n */\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getDispatch().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementProgress } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateManagement, updateManagementProgress } from '../../reducers';\nimport { selectChat, selectCurrentMessageList } from '../../selectors';\nimport { isChatBasicGroup } from '../../helpers';\n\naddReducer('checkPublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n\n    const isUsernameAvailable = await callApi('checkChatUsername', { username })!;\n\n    global = getGlobal();\n    global = updateManagementProgress(\n      global, isUsernameAvailable ? ManagementProgress.Complete : ManagementProgress.Error,\n    );\n    global = updateManagement(global, chatId, { isUsernameAvailable });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePublicLink', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  (async () => {\n    global = updateManagementProgress(global, ManagementProgress.InProgress);\n    setGlobal(global);\n\n    if (isChatBasicGroup(chat)) {\n      chat = await callApi('migrateChat', chat);\n\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({ id: chat.id });\n    }\n\n    const result = await callApi('setChatUsername', { chat, username });\n\n    global = getGlobal();\n    global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n    global = updateManagement(global, chatId, { isUsernameAvailable: undefined });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddReducer('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n","import {\n  addReducer, getGlobal, setGlobal, getDispatch,\n} from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiFormattedText, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport {\n  CHAT_LIST_LOAD_SLICE, DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  replaceChatListIds,\n  replaceChats,\n  replaceUsers,\n  replaceUserStatuses,\n  updateUsers,\n  addUserStatuses,\n  updateChats,\n  updateChatListSecondaryInfo,\n  updateThreadInfos,\n  replaceThreadParam,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n} from '../../reducers';\nimport {\n  selectUser,\n  selectChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectCountNotMutedUnread,\n  selectLastServiceNotification,\n} from '../../selectors';\nimport { isUserId } from '../../helpers';\n\naddReducer('sync', (global, actions) => {\n  void sync(actions.afterSync);\n});\n\naddReducer('afterSync', () => {\n  void afterSync();\n});\n\nasync function sync(afterSyncCallback: () => void) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  await callApi('fetchCurrentUser');\n\n  // This fetches only active chats and clears archived chats, which will be fetched in `afterSync`\n  const savedUsers = await loadAndReplaceChats();\n  await loadAndReplaceMessages(savedUsers);\n\n  setGlobal({\n    ...getGlobal(),\n    lastSyncTime: Date.now(),\n  });\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH SYNC');\n  }\n\n  afterSyncCallback();\n}\n\nasync function afterSync() {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START AFTER-SYNC');\n  }\n\n  await Promise.all([\n    loadAndUpdateUsers(),\n    loadAndReplaceArchivedChats(),\n  ]);\n\n  await callApi('fetchCurrentUser');\n\n  updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> FINISH AFTER-SYNC');\n  }\n}\n\nasync function loadAndReplaceChats() {\n  let global = getGlobal();\n\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    withPinned: true,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage: selectLastServiceNotification(global)?.message,\n  });\n\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  const { currentUserId } = global;\n\n  const savedPrivateChatIds = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n    ...(currentUserId ? [currentUserId] : []),\n  ];\n\n  const savedUsers = savedPrivateChatIds\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  const savedChats = savedPrivateChatIds\n    .map((id) => selectChat(global, id))\n    .filter<ApiChat>(Boolean as any);\n\n  const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n  if (currentChatId) {\n    const selectedChat = selectChat(global, currentChatId);\n    if (selectedChat && !savedPrivateChatIds.includes(currentChatId)) {\n      savedChats.push(selectedChat);\n    }\n\n    if (isUserId(currentChatId)) {\n      const selectedChatUser = selectUser(global, currentChatId);\n      if (selectedChatUser && !savedPrivateChatIds.includes(currentChatId)) {\n        savedUsers.push(selectedChatUser);\n      }\n    }\n  }\n\n  savedUsers.push(...result.users);\n  savedChats.push(...result.chats);\n\n  global = replaceUserStatuses(global, result.userStatusesById);\n\n  global = replaceChats(global, buildCollectionByKey(savedChats, 'id'));\n  global = replaceChatListIds(global, 'active', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'active', result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId]);\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  setGlobal(global);\n\n  if (currentChatId && !global.chats.byId[currentChatId]) {\n    getDispatch().openChat({ id: undefined });\n  }\n\n  return savedUsers;\n}\n\nasync function loadAndReplaceArchivedChats() {\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    archived: true,\n    withPinned: true,\n    serverTimeOffset: getGlobal().serverTimeOffset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addUserStatuses(global, result.userStatusesById);\n\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = replaceChatListIds(global, 'archived', result.chatIds);\n  global = updateChatListSecondaryInfo(global, 'archived', result);\n\n  setGlobal(global);\n}\n\nasync function loadAndReplaceMessages(savedUsers?: ApiUser[]) {\n  let areMessagesLoaded = false;\n  let users = savedUsers || [];\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, ApiFormattedText>>((acc, chatId) => {\n    const draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    if (draft) {\n      acc[chatId] = draft;\n    }\n\n    return acc;\n  }, {});\n\n  if (currentChatId) {\n    const result = await loadTopMessages(global.chats.byId[currentChatId]);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n      users = Array.prototype.concat(users, result.users);\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', draftsByChatId[chatId]);\n  });\n\n  if (savedUsers) {\n    global = replaceUsers(global, buildCollectionByKey(users, 'id'));\n  } else if (users) {\n    // If `fetchChats` has failed for some reason, we don't have saved chats, thus we can not replace\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getDispatch().closeAudioPlayer();\n  }\n}\n\nasync function loadAndUpdateUsers() {\n  let global = getGlobal();\n  const { recentlyFoundChatIds } = global.globalSearch;\n  const { userIds: contactIds } = global.contactList || {};\n  if (\n    (!contactIds || !contactIds.length)\n    && (!recentlyFoundChatIds || !recentlyFoundChatIds.length)\n  ) {\n    return;\n  }\n\n  const users = [\n    ...(recentlyFoundChatIds || []),\n    ...(contactIds || []),\n  ].map((id) => selectUser(global, id)).filter<ApiUser>(Boolean as any);\n\n  const result = await callApi('fetchUsers', { users });\n  if (!result) {\n    return;\n  }\n\n  const { users: updatedUsers, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(updatedUsers, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  setGlobal(global);\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { debounce, throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, pick, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats, addUsers, replaceUserStatuses, updateChat, updateManagementProgress, updateUser, updateUsers,\n  updateUserSearch, updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst runDebouncedForFetchFullUser = debounce((cb) => cb(), 500, false, true);\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddReducer('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  runDebouncedForFetchFullUser(() => callApi('fetchFullUser', { id, accessHash }));\n});\n\naddReducer('loadUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchUsers', { users: [user] });\n    if (!result) {\n      return;\n    }\n\n    const { users, userStatusesById } = result;\n\n    global = getGlobal();\n\n    global = updateUsers(global, buildCollectionByKey(users, 'id'));\n    setGlobal(replaceUserStatuses(global, {\n      ...global.users.statusesById,\n      ...userStatusesById,\n    }));\n\n    setGlobal(global);\n  })();\n});\n\naddReducer('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddReducer('loadContactList', () => {\n  void loadContactList();\n});\n\naddReducer('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddReducer('loadCommonChats', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  (async () => {\n    const maxId = user.commonChats?.maxId;\n    const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n    if (!result) {\n      return;\n    }\n\n    const { chats, chatIds, isFullyLoaded } = result;\n\n    global = getGlobal();\n    if (chats.length) {\n      global = addChats(global, buildCollectionByKey(chats, 'id'));\n    }\n    global = updateUser(global, user.id, {\n      commonChats: {\n        maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n        ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n        isFullyLoaded,\n      },\n    });\n    setGlobal(global);\n  })();\n});\n\naddReducer('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted, firstName, lastName,\n  } = payload!;\n\n  void updateContact(userId, isMuted, firstName, lastName);\n});\n\naddReducer('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getDispatch().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (user.phoneNumber) {\n    result = await callApi('updateContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('addContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n    });\n  }\n\n  if (result) {\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddReducer('loadProfilePhotos', (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n\n  if (!user && !chat) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchProfilePhotos', user, chat);\n    if (!result || !result.photos) {\n      return;\n    }\n\n    let newGlobal = getGlobal();\n    if (isPrivate) {\n      newGlobal = updateUser(newGlobal, profileId, { photos: result.photos });\n    } else {\n      newGlobal = addUsers(newGlobal, buildCollectionByKey(result.users!, 'id'));\n      newGlobal = updateChat(newGlobal, profileId, { photos: result.photos });\n    }\n\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddReducer('addContact', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  void callApi('addContact', pick(user, ['id', 'accessHash', 'firstName', 'lastName', 'phoneNumber']));\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import { GlobalState } from '../../global/types';\nimport { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import {\n  addReducer, getDispatch, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiContact, ApiUser } from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  RE_TG_LINK, RE_TME_LINK,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddReducer('clickInlineButton', (global, actions, payload) => {\n  const { button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.value });\n      break;\n    case 'url':\n      if (button.value.match(RE_TME_LINK) || button.value.match(RE_TG_LINK)) {\n        actions.openTelegramLink({ url: button.value });\n      } else {\n        actions.toggleSafeLinkModal({ url: button.value });\n      }\n      break;\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, button.messageId, button.value);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal();\n      break;\n    case 'requestSelfContact': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      const { messageId, value } = button;\n      if (!chat) {\n        return;\n      }\n\n      if (value) {\n        actions.getReceipt({ receiptMessageId: value, chatId: chat.id, messageId });\n      } else {\n        actions.getPaymentForm({ chat, messageId });\n        actions.setInvoiceMessageInfo(selectChatMessage(global, chat.id, messageId));\n        actions.openPaymentModal({ chatId: chat.id, messageId });\n      }\n      break;\n    }\n  }\n});\n\naddReducer('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddReducer('restartBot', (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('unblockContact', bot.id, bot.accessHash);\n    if (!result) {\n      return;\n    }\n\n    setGlobal(removeBlockedContact(getGlobal(), bot.id));\n    void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n  })();\n});\n\naddReducer('loadTopInlineBots', (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  (async () => {\n    const result = await callApi('fetchTopInlineBots');\n    if (!result) {\n      return;\n    }\n\n    const { ids, users } = result;\n\n    let newGlobal = getGlobal();\n    newGlobal = addUsers(newGlobal, buildCollectionByKey(users, 'id'));\n    newGlobal = {\n      ...newGlobal,\n      topInlineBots: {\n        ...newGlobal.topInlineBots,\n        userIds: ids,\n        lastRequestedAt: getServerTime(global.serverTimeOffset),\n      },\n    };\n    setGlobal(newGlobal);\n  })();\n});\n\naddReducer('queryInlineBot', ((global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  (async () => {\n    let inlineBotData = global.inlineBots.byUsername[username];\n\n    if (inlineBotData === false) {\n      return;\n    }\n\n    if (inlineBotData === undefined) {\n      const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n      global = getGlobal();\n      if (!inlineBot || !chat) {\n        setGlobal(replaceInlineBotSettings(global, username, false));\n        return;\n      }\n\n      global = addUsers(global, { [inlineBot.id]: inlineBot });\n      global = addChats(global, { [chat.id]: chat });\n      inlineBotData = {\n        id: inlineBot.id,\n        query: '',\n        offset: '',\n        switchPm: undefined,\n        canLoadMore: true,\n        results: [],\n      };\n\n      global = replaceInlineBotSettings(global, username, inlineBotData);\n      setGlobal(global);\n    }\n\n    if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n      return;\n    }\n\n    void runDebouncedForSearch(() => {\n      searchInlineBot({\n        username,\n        inlineBotData: inlineBotData as InlineBotSettings,\n        chatId,\n        query,\n        offset,\n      });\n    });\n  })();\n}));\n\naddReducer('sendInlineBotResult', (global, actions, payload) => {\n  const { id, queryId } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  });\n});\n\naddReducer('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddReducer('startBot', (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  (async () => {\n    await callApi('startBot', {\n      bot,\n      startParam: param,\n    });\n  })();\n});\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data: string) {\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { showDialog, showNotification, toggleSafeLinkModal } = getDispatch();\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    toggleSafeLinkModal({ url });\n  }\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddReducer('loadPasswordInfo', () => {\n  (async () => {\n    const result = await callApi('getPasswordInfo');\n    if (!result) {\n      return;\n    }\n\n    let global = getGlobal();\n    global = replaceSettings(global, { hasPassword: result.hasPassword });\n    global = updateTwoFaSettings(global, { hint: result.hint });\n    setGlobal(global);\n  })();\n});\n\naddReducer('checkPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('checkPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('clearPassword', (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('clearPassword', currentPassword);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updatePassword', (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('updateRecoveryEmail', (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  (async () => {\n    const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n    setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n    if (isSuccess) {\n      onSuccess();\n    }\n  })();\n});\n\naddReducer('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddReducer('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { PaymentStep } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  selectPaymentMessageId,\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectPaymentChatId,\n  selectChat,\n  selectPaymentFormId,\n} from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\n\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setInvoiceMessageInfo,\n  setReceipt,\n  clearPayment,\n  closeInvoice,\n} from '../../reducers';\n\naddReducer('validateRequestedInfo', (global, actions, payload) => {\n  const { requestInfo, saveInfo } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  if (!chat || !messageId) {\n    return;\n  }\n  void validateRequestedInfo(chat, messageId, requestInfo, saveInfo);\n});\n\nasync function validateRequestedInfo(chat: ApiChat, messageId: number, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    chat, messageId, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  if (!id) {\n    return;\n  }\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.PaymentInfo);\n  }\n  setGlobal(global);\n}\n\naddReducer('getPaymentForm', (global, actions, payload) => {\n  const { chat, messageId } = payload;\n  if (!chat || !messageId) {\n    return;\n  }\n  void getPaymentForm(chat, messageId);\n});\n\nasync function getPaymentForm(chat: ApiChat, messageId: number) {\n  const result = await callApi('getPaymentForm', { chat, messageId });\n  if (!result) {\n    return;\n  }\n  let global = setPaymentForm(getGlobal(), result);\n  let step = PaymentStep.PaymentInfo;\n  if (global.payment.invoice\n    && (global.payment.invoice.shippingAddressRequested\n    || global.payment.invoice.nameRequested\n    || global.payment.invoice.phoneRequested\n    || global.payment.invoice.emailRequested)) {\n    step = PaymentStep.ShippingInfo;\n  }\n  global = setPaymentStep(global, step);\n  setGlobal(global);\n}\n\naddReducer('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddReducer('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddReducer('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddReducer('sendCredentialsInfo', (global, actions, payload) => {\n  const publishableKey = selectProviderPublishableKey(global);\n  if (!publishableKey) {\n    return;\n  }\n  const { credentials } = payload;\n  const { data } = credentials;\n  void sendStripeCredentials(data, publishableKey);\n});\n\naddReducer('sendPaymentForm', (global, actions, payload) => {\n  const { shippingOptionId, saveCredentials } = payload;\n  const chatId = selectPaymentChatId(global);\n  const chat = chatId && selectChat(global, chatId);\n  const messageId = selectPaymentMessageId(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const publishableKey = selectProviderPublishableKey(global);\n  const stripeCredentials = selectStripeCredentials(global);\n  if (!chat || !messageId || !publishableKey || !formId) {\n    return;\n  }\n\n  void sendPaymentForm(chat, messageId, formId, {\n    save: saveCredentials,\n    data: stripeCredentials,\n  }, requestInfoId, shippingOptionId);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendPaymentForm(\n  chat: ApiChat,\n  messageId: number,\n  formId: string,\n  credentials: any,\n  requestedInfoId?: string,\n  shippingOptionId?: string,\n) {\n  const result = await callApi('sendPaymentForm', {\n    chat, messageId, formId, credentials, requestedInfoId, shippingOptionId,\n  });\n  if (result) {\n    const global = clearPayment(getGlobal());\n    setGlobal(closeInvoice(global));\n  }\n}\n\naddReducer('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step || PaymentStep.ShippingInfo);\n});\n\naddReducer('setInvoiceMessageInfo', (global, actions, payload) => {\n  return setInvoiceMessageInfo(global, payload);\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\n\nconst REM = 16; // px\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import { updateChatMessage } from './messages';\nimport { GlobalState } from '../../global/types';\nimport { selectChatMessage } from '../selectors';\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(global: GlobalState, chatId: string, messageId: number, reaction: string) {\n  const { reactions } = selectChatMessage(global, chatId, messageId) || {};\n\n  if (!reactions) {\n    return global;\n  }\n\n  // Update UI without waiting for server response\n  let results = reactions.results.map((l) => (l.reaction === reaction\n    ? {\n      ...l,\n      count: l.isChosen ? l.count : l.count + 1,\n      isChosen: true,\n    } : (l.isChosen ? {\n      ...l,\n      isChosen: false,\n      count: l.count - 1,\n    } : l)))\n    .filter((l) => l.count > 0);\n\n  let { recentReactions } = reactions;\n\n  if (reaction && !results.some((l) => l.reaction === reaction)) {\n    const { currentUserId } = global;\n\n    results = [...results, {\n      reaction,\n      isChosen: true,\n      count: 1,\n    }];\n\n    if (reactions.canSeeList) {\n      recentReactions = [...(recentReactions || []), {\n        userId: currentUserId!,\n        reaction,\n      }];\n    }\n  }\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiAppConfig, ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction } from '../../reducers/reactions';\nimport { addUsers, updateChatMessage } from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\naddReducer('loadAvailableReactions', () => {\n  (async () => {\n    const result = await callApi('getAvailableReactions');\n\n    if (!result) {\n      return;\n    }\n\n    // Preload animations\n    result.forEach((availableReaction) => {\n      if (availableReaction.aroundAnimation) {\n        mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.Lottie);\n      }\n      if (availableReaction.centerIcon) {\n        mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.Lottie);\n      }\n    });\n\n    setGlobal({\n      ...getGlobal(),\n      availableReactions: result,\n    });\n  })();\n});\n\naddReducer('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      animatedEffect: emoji || localEffect,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n\naddReducer('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n    x, y, startX, startY, startSize,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect)) {\n    return undefined;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n\n  if (!global.activeEmojiInteraction) return undefined;\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      endX: subtractXForEmojiInteraction(global, x),\n      endY: y,\n      ...(startX && { x: subtractXForEmojiInteraction(global, startX) }),\n      ...(startY && { y: startY }),\n      ...(startSize && { startSize }),\n    },\n  };\n});\n\naddReducer('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId, x, y,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n\n  if (!reaction) return;\n\n  actions.sendReaction({\n    chatId,\n    messageId,\n    reaction,\n    x,\n    y,\n  });\n});\n\naddReducer('sendReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  }: { messageId: number; chatId: string } = payload;\n\n  let { reaction } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  if (message.reactions?.results?.some((l) => l.reaction === reaction && l.isChosen)) {\n    reaction = undefined;\n  }\n\n  void callApi('sendReaction', { chat, messageId, reaction });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    global = {\n      ...global,\n      activeReactions: {\n        ...(reaction ? global.activeReactions : omit(global.activeReactions, [messageId])),\n        ...(reaction && {\n          [messageId]: {\n            reaction,\n            messageId,\n          },\n        }),\n      },\n    };\n  }\n\n  return addMessageReaction(global, chatId, messageId, reaction);\n});\n\naddReducer('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddReducer('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (global.activeReactions[messageId]?.reaction !== reaction) {\n    return global;\n  }\n\n  return {\n    ...global,\n    activeReactions: omit(global.activeReactions, [messageId]),\n  };\n});\n\naddReducer('setDefaultReaction', (global, actions, payload) => {\n  const { reaction } = payload;\n\n  (async () => {\n    const result = await callApi('setDefaultReaction', { reaction });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      appConfig: {\n        ...global.appConfig,\n        defaultReaction: reaction,\n      } as ApiAppConfig,\n    });\n  })();\n});\n\naddReducer('stopActiveEmojiInteraction', (global) => {\n  return {\n    ...global,\n    activeEmojiInteraction: undefined,\n  };\n});\n\naddReducer('loadReactors', (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n\n  (async () => {\n    const result = await callApi('fetchMessageReactionsList', {\n      reaction,\n      chat,\n      messageId,\n      offset,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    if (result.users?.length) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    }\n\n    const { nextOffset, count, reactions } = result;\n\n    setGlobal(updateChatMessage(global, chatId, messageId, {\n      reactors: {\n        nextOffset,\n        count,\n        reactions: [\n          ...(message.reactors?.reactions || []),\n          ...reactions,\n        ],\n      },\n    }));\n  })();\n});\n\naddReducer('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddReducer('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteraction) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteraction: {\n      ...global.activeEmojiInteraction,\n      x: subtractXForEmojiInteraction(global, x),\n      y,\n      startSize,\n      isReversed,\n    },\n  };\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutNewMessage } from '../../../util/notifications';\nimport { updateAppBadge } from '../../../util/appBadge';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectCountNotMutedUnread,\n} from '../../selectors';\nimport { throttle } from '../../../util/schedulers';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\nconst runThrottledForUpdateAppBadge = throttle((cb) => cb(), 500, true);\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      const newGlobal = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(newGlobal);\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n      break;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        break;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n      break;\n    }\n\n    case 'updateChatLeave': {\n      setGlobal(leaveChat(global, update.id));\n\n      break;\n    }\n\n    case 'updateChatInbox': {\n      setGlobal(updateChat(global, update.id, update.chat));\n\n      runThrottledForUpdateAppBadge(() => updateAppBadge(selectCountNotMutedUnread(getGlobal())));\n\n      break;\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        const newGlobal = getGlobal();\n        const chat = selectChat(newGlobal, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(newGlobal, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      break;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        setGlobal(updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n          ...(update.message.hasUnreadMention && {\n            unreadMentionsCount: chat.unreadMentionsCount ? chat.unreadMentionsCount + 1 : 1,\n          }),\n        }));\n      }\n\n      updateAppBadge(selectCountNotMutedUnread(getGlobal()));\n      notifyAboutNewMessage({\n        chat,\n        message,\n      });\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: chat.unreadMentionsCount - 1,\n          });\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return;\n      }\n\n      setGlobal(updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      }));\n\n      break;\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      global = {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (listType) {\n        const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n        let newOrderedPinnedIds = orderedPinnedIds || [];\n        if (!isPinned) {\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n        } else if (!newOrderedPinnedIds.includes(id)) {\n          // When moving pinned chats to archive, active ordered pinned ids don't get updated\n          // (to preserve chat pinned state when it returns from archive)\n          // If user already has max pinned chats, we should check for orderedIds\n          // that don't point to listed chats\n          if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n            const listIds = global.chats.listIds.active;\n            newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n          }\n\n          newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n        }\n\n        global = {\n          ...global,\n          chats: {\n            ...global.chats,\n            orderedPinnedIds: {\n              ...global.chats.orderedPinnedIds,\n              [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n            },\n          },\n        };\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      setGlobal(updateChatListType(global, id, folderId));\n\n      break;\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      setGlobal({\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      });\n\n      break;\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        setGlobal(updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembers,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        setGlobal(updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        }));\n      }\n      break;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n        global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n        global = updateChat(global, chatId, { draftDate: date });\n\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n      break;\n    }\n  }\n});\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiUpdate, ApiMessage, ApiPollResult, ApiThreadInfo, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../../global/types';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  isMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport { getMessageContent, isUserId, isMessageLocal } from '../../helpers';\n\nconst ANIMATION_DELAY = 350;\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      setGlobal(global);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (isMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isMessageLocal(message as ApiMessage)) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        setGlobal(updateChatLastMessage(getGlobal(), chatId, newMessage));\n      }\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (global.activeEmojiInteraction || currentChatId !== update.id) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteraction: {\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction,\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      const chat = selectChat(global, chatId);\n      if (\n        chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && isMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, global);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const updatedPoll = { ...message.content.poll, ...pollUpdate };\n\n        // Workaround for poll update bug: `chosen` option gets reset when someone votes after current user\n        const { results: updatedResults } = updatedPoll.results || {};\n        if (updatedResults && !updatedResults.some(((result) => result.isChosen))) {\n          const { results } = message.content.poll.results;\n          const chosenAnswers = results && results.filter((result) => result.isChosen);\n          if (chosenAnswers) {\n            chosenAnswers.forEach((chosenAnswer) => {\n              const chosenAnswerIndex = updatedResults.findIndex((result) => result.option === chosenAnswer.option);\n              if (chosenAnswerIndex >= 0) {\n                updatedPoll.results.results![chosenAnswerIndex].isChosen = true;\n              }\n            });\n          }\n        }\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOption = newResults.find((result) => result.option === option);\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      setGlobal(updateChatMessage(\n        global,\n        update.chatId,\n        update.id,\n        {\n          reactions: update.reactions,\n        },\n      ));\n      break;\n    }\n  }\n});\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const newGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(newGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = newGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    setGlobal(global);\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addReducer, getGlobal, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate, ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\n\nimport { updateStickerSet } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import {\n  addReducer, getGlobal, setGlobal,\n} from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { ApiPrivacyKey } from '../../../types';\n\nimport { addBlockedContact, removeBlockedContact } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updatePrivacy':\n      global.settings.privacy[update.key as ApiPrivacyKey] = update.rules;\n      break;\n  }\n\n  return undefined;\n});\n","import { addReducer, setGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer } from '../../../lib/teact/teactn';\n\nimport { ApiUpdate } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate): GlobalState | undefined => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addReducer, getGlobal } from '../../../lib/teact/teactn';\nimport { ApiUpdate } from '../../../api/types';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\n\naddReducer('apiUpdate', (global, actions, update: ApiUpdate) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount);\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(global, groupCallId, participant.id, participant,\n            !!nextOffset || currentUserId === participant.id);\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React, {\n  FC, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { LeftColumnContent, ISettings } from '../../../types';\nimport { ApiChat } from '../../../api/types';\n\nimport {\n  ANIMATION_LEVEL_MAX, APP_NAME, APP_VERSION, FEEDBACK_URL,\n} from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectTheme } from '../../../modules/selectors';\nimport { isChatArchived } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport { disableHistoryBack } from '../../../hooks/useHistoryBack';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  searchQuery?: string;\n  isLoading: boolean;\n  currentUserId?: string;\n  globalSearchChatId?: string;\n  searchDate?: number;\n  theme: ISettings['theme'];\n  animationLevel: 0 | 1 | 2;\n  chatsById?: Record<string, ApiChat>;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\n\nconst PRODUCTION_HOSTNAME = 'web.telegram.org';\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n}) => {\n  const {\n    openChat,\n    openTipsChat,\n    setGlobalSearchDate,\n    setSettingOption, setGlobalSearchChatId,\n  } = getDispatch();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleSwitchToWebK = () => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    disableHistoryBack();\n  };\n\n  const handleOpenTipsChat = () => {\n    openTipsChat({ langCode: lang.code });\n  };\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${APP_VERSION}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={disableHistoryBack}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId } = global;\n    const { byId: chatsById } = global.chats;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n    };\n  },\n)(LeftMainHeader));\n","import React, { memo, FC } from '../../lib/teact/teact';\n\nimport { GlobalState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\n\nimport './ConnectionState.scss';\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst ConnectionState: FC<StateProps> = () => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionState\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">{lang('WaitingForNetwork')}</div>\n    </div>\n  );\n};\n\nexport default memo(ConnectionState);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatFolder, ApiUser } from '../../../api/types';\nimport { GlobalState } from '../../../global/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { getFolderUnreadDialogs } from '../../../modules/helpers';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../modules/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport useThrottledMemo from '../../../hooks/useThrottledMemo';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  allListIds: GlobalState['chats']['listIds'];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  chatFoldersById: Record<number, ApiChatFolder>;\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst INFO_THROTTLE = 3000;\nconst SAVED_MESSAGES_HOTKEY = '0';\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  allListIds,\n  chatsById,\n  usersById,\n  chatFoldersById,\n  notifySettings,\n  notifyExceptions,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  foldersDispatch,\n  onScreenSelect,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => chatFoldersById[id] || {}).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, orderedFolderIds]);\n\n  const folderCountersById = useThrottledMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    const counters = displayedFolders.map((folder) => {\n      const {\n        unreadDialogsCount, hasActiveDialogs,\n      } = getFolderUnreadDialogs(allListIds, chatsById, usersById, folder, notifySettings, notifyExceptions) || {};\n\n      return {\n        id: folder.id,\n        badgeCount: unreadDialogsCount,\n        isBadgeActive: hasActiveDialogs,\n      };\n    });\n\n    return buildCollectionByKey(counters, 'id');\n  }, INFO_THROTTLE, [displayedFolders, allListIds, chatsById, usersById, notifySettings, notifyExceptions]);\n\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return [\n      { title: lang.code === 'en' ? 'All' : lang('FilterAllChats'), id: ALL_FOLDER_ID },\n      ...displayedFolders.map((folder) => ({\n        title: folder.title,\n        ...(folderCountersById?.[folder.id]),\n      })),\n    ];\n  }, [displayedFolders, folderCountersById, lang]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(0);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInAllTabRef = useRef();\n  isNotInAllTabRef.current = activeChatFolder !== 0;\n  useEffect(() => (isNotInAllTabRef.current ? captureEscKeyListener(() => {\n    if (isNotInAllTabRef.current) {\n      setActiveChatFolder(0);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack(activeChatFolder !== 0, () => setActiveChatFolder(0, { forceOnHeavyAnimation: true }));\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  });\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || activeChatFolder === 0) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  return (\n    <div className=\"ChatFolders\">\n      {folderTabs?.length ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={folderTabs ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { listIds: allListIds, byId: chatsById },\n      users: { byId: usersById },\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      allListIds,\n      chatsById,\n      usersById,\n      chatFoldersById,\n      orderedFolderIds,\n      lastSyncTime,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(ChatFolders));\n","import { useState } from '../lib/teact/teact';\n\nimport useThrottle from './useThrottle';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useThrottledMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runThrottled = useThrottle(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runThrottled(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import React, {\n  FC, useCallback, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\nconst MENU_CLOSE_DELAY_MS = 750;\nlet closeTimeout: number | undefined;\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n\n  const handleClose = () => {\n    setIsMenuOpen(false);\n  };\n\n  const handleMouseEnter = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      setIsMenuOpen(false);\n    }, MENU_CLOSE_DELAY_MS);\n  }, []);\n\n  return (\n    <div\n      className={fabClassName}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import React, {\n  FC, useState, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport useBrowserOnline from '../../../hooks/useBrowserOnline';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ConnectionState from '../ConnectionState';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport ShowTransition from '../../ui/ShowTransition';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<GlobalState, 'connectionState'>;\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst APP_OUTDATED_TIMEOUT = 3 * 24 * 60 * 60 * 1000; // 3 days\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps & StateProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  connectionState,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = !isBrowserOnline || connectionState === 'connectionStateConnecting';\n\n  const isMouseInside = useRef(false);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const [shouldRenderUpdateButton, updateButtonClassNames, handleUpdateClick] = useAppOutdatedCheck();\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <ShowTransition isOpen={isConnecting} isCustom className=\"connection-state-wrapper opacity-transition slow\">\n        {() => <ConnectionState />}\n      </ShowTransition>\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        className={isConnecting ? 'pull-down' : undefined}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nfunction useAppOutdatedCheck() {\n  const [isAppOutdated, markIsAppOutdated] = useFlag(false);\n\n  useEffect(() => {\n    const timeout = window.setTimeout(markIsAppOutdated, APP_OUTDATED_TIMEOUT);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [markIsAppOutdated]);\n\n  const { shouldRender, transitionClassNames } = useShowTransition(isAppOutdated);\n\n  const handleUpdateClick = () => {\n    window.location.reload();\n  };\n\n  return [shouldRender, transitionClassNames, handleUpdateClick] as const;\n}\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['connectionState']),\n)(LeftMain);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  activeChatFolder: number;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  activeChatFolder,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: boolean) => {\n    if (content === LeftColumnContent.NewGroupStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2\n      && !forceReturnToChatList\n    ) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Language:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n        case SettingsScreens.QuickReaction:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyActiveSessions:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && activeChatFolder === 0) {\n      setContent(LeftColumnContent.GlobalSearch);\n      return;\n    }\n\n    setContent(LeftColumnContent.ChatList);\n    setContactsFilter('');\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchDate({ date: undefined });\n    setGlobalSearchChatId({ id: undefined });\n    resetChatCreation();\n    setTimeout(() => {\n      setLastResetTime(Date.now());\n    }, RESET_TRANSITION_DELAY_MS);\n  }, [\n    content, activeChatFolder, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || activeChatFolder === 0\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [activeChatFolder, content, handleReset],\n  );\n\n  useEffect(() => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && e.shiftKey && getKeyFromEvent(e) === 'f') {\n        e.preventDefault();\n        setContent(LeftColumnContent.GlobalSearch);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [content]);\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = (screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  };\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n    } = global;\n    return {\n      searchQuery: query, searchDate: date, activeChatFolder, shouldSkipHistoryAnimations, leftColumnWidth,\n    };\n  },\n)(LeftColumn));\n","import { RefObject } from 'react';\nimport { useState, useEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport const useResize = (\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) => {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  const handleMouseUp = () => {\n    document.body.classList.remove('no-selection', 'cursor-ew-resize');\n  };\n\n  const initResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    document.body.classList.add('no-selection', 'cursor-ew-resize');\n\n    setInitialMouseX(event.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  };\n\n  const resetResize = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    event.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  };\n\n  useEffect(() => {\n    if (!isActive) return;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + event.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    const stopDrag = () => {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      onResize(elementRef.current!.offsetWidth);\n      unmarkIsActive();\n    };\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nexport default (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport { throttle } from '../util/schedulers';\nimport windowSize from '../util/windowSize';\nimport { ApiDimensions } from '../api/types';\n\nconst THROTTLE = 250;\n\nexport default () => {\n  const [size, setSize] = useState<ApiDimensions>(windowSize.get());\n\n  useEffect(() => {\n    const handleResize = throttle(() => {\n      setSize(windowSize.get());\n    }, THROTTLE, false);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return size;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import React, {\n  FC,\n  memo,\n  useRef,\n  useCallback,\n  useState,\n  useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport {\n  ARE_CALLS_SUPPORTED, IS_MAC_OS, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport getKeyFromEvent from '../../util/getKeyFromEvent';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../modules/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 400;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  isRightColumnShown,\n  canExpandActions,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    openCallFallbackConfirm,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else {\n      setTimeout(() => {\n        const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n        if (searchInput) {\n          searchInput.focus();\n        }\n      }, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [openLocalTextSearch]);\n\n  useEffect(() => {\n    if (!canSearch) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (\n        IS_PWA && ((IS_MAC_OS && e.metaKey) || (!IS_MAC_OS && e.ctrlKey)) && !e.shiftKey && getKeyFromEvent(e) === 'f'\n      ) {\n        e.preventDefault();\n        handleSearchClick();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [canSearch, handleSearchClick]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && canSubscribe && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={openCallFallbackConfirm}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n    };\n  },\n)(HeaderActions));\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { ApiMessage } from '../api/types';\n\nimport { DEBUG } from '../config';\nimport { isWebpSupported } from '../util/environment';\nimport { EMPTY_IMAGE_DATA_URI, webpToPngBase64 } from '../util/webpToPng';\nimport { getMessageMediaThumbDataUri } from '../modules/helpers';\n\nexport default function useWebpThumbnail(message?: ApiMessage) {\n  const thumbDataUri = message && getMessageMediaThumbDataUri(message);\n  const sticker = message?.content?.sticker;\n  const shouldDecodeThumbnail = thumbDataUri && sticker && !isWebpSupported() && thumbDataUri.includes('image/webp');\n  const [thumbnailDecoded, setThumbnailDecoded] = useState(EMPTY_IMAGE_DATA_URI);\n  const messageId = message?.id;\n\n  useLayoutEffect(() => {\n    if (!shouldDecodeThumbnail) {\n      return;\n    }\n\n    webpToPngBase64(`b64-${messageId}`, thumbDataUri!)\n      .then(setThumbnailDecoded)\n      .catch((err) => {\n        if (DEBUG) {\n          // eslint-disable-next-line no-console\n          console.error(err);\n        }\n      });\n  }, [messageId, shouldDecodeThumbnail, thumbDataUri]);\n\n  return shouldDecodeThumbnail ? thumbnailDecoded : thumbDataUri;\n}\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        // @ts-ignore\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          // @ts-ignore\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSummaryText } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport RippleEffect from '../ui/RippleEffect';\nimport buildClassName from '../../util/buildClassName';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const lang = useLang();\n  const mediaThumbnail = useWebpThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const text = getMessageSummaryText(lang, message, Boolean(mediaThumbnail));\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div className=\"HeaderPinnedMessage\" onClick={onClick} dir={lang.isRtl ? 'rtl' : undefined}>\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">{renderText(text)}</p>\n        </div>\n\n        <RippleEffect />\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","export function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => URL.createObjectURL(blob))\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n) {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          canvas.getContext('2d')!.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nfunction steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport useMedia from './useMedia';\nimport { useAsync } from './useAsync';\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../modules/helpers';\nimport { getTranslation } from '../util/langProvider';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\n// @ts-ignore\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nexport default (message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat): MediaMetadata | undefined => {\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = (audio && audio.performer) || (sender && getSenderTitle(getTranslation, sender));\n  const album = (chat && getChatTitle(getTranslation, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => makeGoodArtwork(media, size), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes || audio.thumbnailSizes.length === 0) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport const useAsync = <T>(fn: () => Promise<T>, deps: any[], defaultValue?: T) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<Error | undefined>();\n  const [result, setResult] = useState<T | undefined>(defaultValue);\n  useEffect(() => {\n    setIsLoading(true);\n    let wasCancelled = false;\n    fn().then((res) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setResult(res);\n    }, (err) => {\n      if (wasCancelled) return;\n      setIsLoading(false);\n      setError(err);\n    });\n    return () => {\n      wasCancelled = true;\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  return { isLoading, error, result };\n};\n","import React, {\n  FC, useCallback, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { AudioOrigin } from '../../types';\nimport {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../modules/helpers';\nimport { selectChat, selectSender } from '../../modules/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useLang from '../../hooks/useLang';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport renderText from '../common/helpers/renderText';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst FAST_PLAYBACK_RATE = 1.8;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getDispatch();\n\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n    setAudioPlayerMuted({ isMuted: false });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerMuted, setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (playbackRate === 1) {\n      setPlaybackRate(FAST_PLAYBACK_RATE);\n      setAudioPlayerPlaybackRate({ playbackRate: FAST_PLAYBACK_RATE });\n    } else {\n      setPlaybackRate(1);\n      setAudioPlayerPlaybackRate({ playbackRate: 1 });\n    }\n  }, [playbackRate, setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        withClickPropagation\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {isVoice && (\n        <Button\n          round\n          className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          onClick={handlePlaybackClick}\n        >\n          <span className=\"playback-button-inner\">2Х</span>\n        </Button>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\n\nimport { selectChatGroupCall } from '../../../modules/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getDispatch();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n    };\n  },\n)(GroupCallTopPane));\n","import React, {\n  FC, useCallback, useMemo, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport { MessageListType } from '../../global/types';\nimport {\n  ApiMessage,\n  ApiChat,\n  ApiUser,\n  ApiTypingStatus,\n  MAIN_THREAD_ID, ApiUpdateConnectionStateType,\n} from '../../api/types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  EDITABLE_INPUT_ID,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  isUserId,\n  getMessageKey,\n  getChatTitle,\n  getSenderTitle,\n} from '../../modules/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectAllowedMessageActions,\n  selectIsRightColumnShown,\n  selectThreadTopMessageId,\n  selectThreadInfo,\n  selectChatMessages,\n  selectPinnedIds,\n  selectIsChatWithSelf,\n  selectForwardedSender,\n  selectScheduledIds,\n  selectIsInSelectMode,\n  selectIsChatWithBot,\n  selectCountNotMutedUnread,\n} from '../../modules/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useBrowserOnline from '../../hooks/useBrowserOnline';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  chatsById?: Record<string, ApiChat>;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  isChatWithBot?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  chatsById,\n  messagesCount,\n  isChatWithSelf,\n  isChatWithBot,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getDispatch();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID);\n      if (messageInput) {\n        messageInput.blur();\n      }\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const unreadCount = useMemo(() => {\n    if (!isLeftColumnHideable || !chatsById) {\n      return undefined;\n    }\n\n    return selectCountNotMutedUnread(getGlobal()) || undefined;\n  }, [isLeftColumnHideable, chatsById]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const isBrowserOnline = useBrowserOnline();\n  const isConnecting = (!isBrowserOnline || connectionState === 'connectionStateConnecting')\n    && (IS_SINGLE_COLUMN_LAYOUT || (IS_TABLET_COLUMN_LAYOUT && !shouldShowCloseButton));\n\n  function renderInfo() {\n    if (isConnecting) {\n      return (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('WaitingForNetwork')}\n          </h3>\n        </>\n      );\n    }\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              userId={chatId}\n              typingStatus={typingStatus}\n              withFullInfo={isChatWithBot}\n              withMediaViewer\n              withUpdatingStatus\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              chatId={chatId}\n              typingStatus={typingStatus}\n              noRtl\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCount = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCount && unreadCount && (\n          <div className=\"unread-count active\">\n            {formatIntegerCompact(unreadCount)}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={isConnecting ? Infinity : currentTransitionKey}\n      >\n        {renderInfo}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && !!renderingPinnedMessage)\n          || (shouldRenderAudioPlayer && !!renderingAudioMessage)\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isAudioPlayerRendered && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const { byId: chatsById } = global.chats;\n    const chat = selectChat(global, chatId);\n\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      chatsById,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isChatWithBot: chat && selectIsChatWithBot(global, chat),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import { ApiMessage } from '../../../api/types';\nimport { IAlbum } from '../../../types';\n\nimport { getDayStart } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../modules/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: Number(getDayStart(messages[0].date * 1000)),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = Number(getDayStart(nextMessage.date * 1000));\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_MEDIA = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMessagesRead } = getDispatch();\n\n  const {\n    observe: observeIntersectionForMedia,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_MEDIA,\n  });\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMessagesRead({ messageIds: mentionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const { observe: observeIntersectionForAnimatedStickers } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  };\n}\n","import { ApiMessage } from '../../../../api/types';\n\nimport { getMessageContent } from '../../../../modules/helpers';\n\nexport function isEmojiOnlyMessage(customShape?: boolean | number) {\n  return typeof customShape === 'number';\n}\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n  }: {\n    hasReply?: boolean;\n    customShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact,\n  } = getMessageContent(message);\n\n  const classNames = ['message-content'];\n  const isMedia = photo || video;\n  const isMediaWithNoText = isMedia && !text;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (isEmojiOnlyMessage(customShape)) {\n    classNames.push(`emoji-only emoji-only-${customShape}`);\n  } else if (text) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (customShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (photo || video) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!customShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || !isMediaWithNoText || isViaBot || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isForwardedMessage,\n  isOwnMessage,\n  getMessageVideo,\n} from '../../../../modules/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, isForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, isForwarded, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport { IAlbum } from '../../../../types';\nimport { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction clamp(num: number, low: number, high: number) {\n  return num < low ? low : (num > high ? high : num);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1)));\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  isForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, isForwarded, false, noAvatars) - (isForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet element: HTMLSpanElement | undefined;\n\nexport default function calculateAuthorWidth(text: string) {\n  if (!element) {\n    element = document.createElement('span');\n    // eslint-disable-next-line max-len\n    element.style.font = IS_IOS\n      // eslint-disable-next-line max-len\n      ? '400 12px system-ui, -apple-system, BlinkMacSystemFont, \"Roboto\", \"Apple Color Emoji\", \"Helvetica Neue\", sans-serif'\n      : '400 12px \"Roboto\", -apple-system, \"Apple Color Emoji\", BlinkMacSystemFont, \"Helvetica Neue\", sans-serif';\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.innerHTML = text;\n\n  return element.offsetWidth;\n}\n","import { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import { RefObject } from 'react';\nimport React, { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getDispatch();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction(e: React.MouseEvent) {\n    const { x, y } = e.currentTarget.getBoundingClientRect();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    const { pageX: x, pageY: y } = e;\n\n    sendDefaultReaction({\n      chatId,\n      messageId,\n      x,\n      y,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap(e);\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]')) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, {\n  FC, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\nimport { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../modules/selectors';\nimport { isChatChannel } from '../../modules/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { ObserveFn, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  sender?: ApiUser | ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersection,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  sender,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter<ApiUser>(Boolean as any)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    sender,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    isEmbedded ? { isEmbedded: true, asPlain: true } : undefined,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  if (isEmbedded) {\n    return <span className=\"embedded-action-message\">{renderText(content as string)}</span>;\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={`message${message.id}`}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const sender = chat && (isChatChannel(chat) || userId === message.chatId)\n      ? chat\n      : userId ? selectUser(global, userId) : undefined;\n\n    return {\n      usersById,\n      sender,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import React, { FC, useRef } from '../../lib/teact/teact';\n\nimport { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getMessageSummaryText,\n  getSenderTitle,\n  getMessageRoundVideo,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useWebpThumbnail from '../../hooks/useWebpThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  observeIntersection?: ObserveFn;\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  isProtected?: boolean;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  observeIntersection,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const pictogramId = message && `sticker-reply-thumb${message.id}`;\n  const mediaThumbnail = useWebpThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender && getSenderTitle(lang, sender);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('EmbeddedMessage', className)}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(pictogramId, mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage message={message} isEmbedded />\n          ) : (\n            renderText(getMessageSummaryText(lang, message, Boolean(mediaThumbnail)))\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  id: string | undefined,\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        id={id}\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={isRoundVideo ? 'round' : ''}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ActiveReaction } from '../../../global/types';\nimport { ApiAvailableReaction, ApiMediaFormat } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionAnimatedEmoji.scss';\n\ntype OwnProps = {\n  reaction: string;\n  activeReaction?: ActiveReaction;\n  isInMeta?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CENTER_ICON_SIZE = 30;\nconst EFFECT_SIZE = 100;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  activeReaction,\n  isInMeta,\n  availableReactions,\n}) => {\n  const { stopActiveReaction } = getDispatch();\n\n  const availableReaction = availableReactions?.find((r) => r.reaction === reaction);\n  const centerIconId = availableReaction?.centerIcon?.id;\n  const effectId = availableReaction?.aroundAnimation?.id;\n  const mediaDataCenterIcon = useMedia(`sticker${centerIconId}`, !centerIconId, ApiMediaFormat.Lottie);\n  const mediaDataEffect = useMedia(`sticker${effectId}`, !effectId, ApiMediaFormat.Lottie);\n\n  const shouldPlay = Boolean(activeReaction?.reaction === reaction && mediaDataCenterIcon && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    stopActiveReaction({ messageId: activeReaction?.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !shouldPlay || !isAnimationLoaded;\n\n  const className = buildClassName(\n    'ReactionAnimatedEmoji',\n    isInMeta && 'in-meta',\n    shouldRenderAnimation && 'is-animating',\n  );\n\n  return (\n    <div className={className}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} />}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={centerIconId}\n            id={`reaction_emoji_${centerIconId}`}\n            className={animationClassNames}\n            size={CENTER_ICON_SIZE}\n            animationData={mediaDataCenterIcon as AnyLiteral}\n            play\n            noLoop\n            onLoad={markAnimationLoaded}\n            onEnded={unmarkAnimationLoaded}\n          />\n          <AnimatedSticker\n            key={effectId}\n            id={`reaction_effect_${effectId}`}\n            className={buildClassName('effect', animationClassNames)}\n            size={EFFECT_SIZE}\n            animationData={mediaDataEffect as AnyLiteral}\n            play\n            noLoop\n            onEnded={handleEnded}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, {\n  FC, memo, useMemo,\n} from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactions?: boolean;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message, outgoingStatus, signature, onClick, withReactions,\n  activeReaction, withReactionOffset, availableReactions,\n}) => {\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const reactions = withReactions && message.reactions?.results.filter((l) => l.count > 0);\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  return (\n    <span\n      className={buildClassName('MessageMeta', withReactionOffset && 'reactions-offset')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n    >\n      {reactions && reactions.map((l) => (\n        <ReactionAnimatedEmoji\n          activeReaction={activeReaction}\n          reaction={l.reaction}\n          isInMeta\n          availableReactions={availableReactions}\n        />\n      ))}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import React, { FC, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { MEMOJI_STICKER_ID } from '../../../config';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useWebpThumbnail from '../../../hooks/useWebpThumbnail';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\nimport './Sticker.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const sticker = message.content.sticker!;\n  const { isAnimated, stickerSetId } = sticker;\n  const isMemojiSticker = stickerSetId === MEMOJI_STICKER_ID;\n\n  const shouldLoad = useIsIntersecting(ref, observeIntersection);\n  const shouldPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const mediaHash = sticker.isPreloadedGlobally ? `sticker${sticker.id}` : getMessageMediaHash(message, 'inline')!;\n  const thumbDataUri = useWebpThumbnail(message);\n  const mediaData = useMedia(\n    mediaHash,\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline', true),\n    lastSyncTime,\n  );\n\n  const isMediaLoaded = Boolean(mediaData);\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag(isMediaLoaded);\n  const isMediaReady = isAnimated ? isAnimationLoaded : isMediaLoaded;\n  const transitionClassNames = useMediaTransition(isMediaReady);\n\n  const { width, height } = getStickerDimensions(sticker);\n  const thumbClassName = buildClassName('thumbnail', !thumbDataUri && 'empty');\n\n  const stickerClassName = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n  );\n\n  return (\n    <div ref={ref} className={stickerClassName} onClick={!isMemojiSticker ? openModal : undefined}>\n      {!isMediaReady && (\n        <img\n          id={`sticker-thumb-${message.id}`}\n          src={thumbDataUri}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={thumbClassName}\n        />\n      )}\n      {!isAnimated && (\n        <img\n          id={`sticker-${message.id}`}\n          src={mediaData as string}\n          width={width}\n          height={height}\n          alt=\"\"\n          className={buildClassName('full-media', transitionClassNames)}\n        />\n      )}\n      {isAnimated && isMediaLoaded && (\n        <AnimatedSticker\n          key={mediaHash}\n          className={buildClassName('full-media', transitionClassNames)}\n          id={mediaHash}\n          animationData={mediaData as AnyLiteral}\n          size={width}\n          play={shouldPlay}\n          noLoop={!shouldLoop}\n          onLoad={markAnimationLoaded}\n        />\n      )}\n      <StickerSetModal\n        isOpen={isModalOpen}\n        fromSticker={sticker}\n        onClose={closeModal}\n      />\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../modules/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, fullMediaData?: string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(fullMediaData),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import React, {\n  FC, useCallback, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ISettings } from '../../../types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n  const thumbRef = useBlurredMediaThumbRef(message, fullMediaData);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, 'download'), !isDownloading);\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(fullMediaData);\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffect(() => {\n    if (!shouldAffectAppendix) {\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>('.message-content')!;\n\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [fullMediaData, isOwn, shouldAffectAppendix, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px`}\n      />\n      <img\n        src={fullMediaData}\n        className={`full-media ${transitionClassNames}`}\n        width={width}\n        height={height}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import { useCallback, useRef } from '../../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../../util/schedulers';\nimport safePlay from '../../../../util/safePlay';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useHeavyAnimationCheck from '../../../../hooks/useHeavyAnimationCheck';\n\nexport default function useVideoAutoPause(playerRef: { current: HTMLVideoElement | null }, canPlay: boolean) {\n  const wasPlaying = useRef(playerRef.current?.paused);\n  const canPlayRef = useRef();\n  canPlayRef.current = canPlay;\n\n  const freezePlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    wasPlaying.current = !playerRef.current.paused;\n\n    if (wasPlaying.current) {\n      playerRef.current.pause();\n    }\n  }, [playerRef]);\n\n  const unfreezePlaying = useCallback(() => {\n    if (\n      playerRef.current && wasPlaying.current && canPlayRef.current\n      // At this point HTMLVideoElement can be unmounted from the DOM\n      && document.body.contains(playerRef.current)\n    ) {\n      safePlay(playerRef.current);\n    }\n  }, [playerRef]);\n\n  const unfreezePlayingOnRaf = useCallback(() => {\n    fastRaf(unfreezePlaying);\n  }, [unfreezePlaying]);\n\n  useBackgroundMode(freezePlaying, unfreezePlayingOnRaf);\n  useHeavyAnimationCheck(freezePlaying, unfreezePlaying);\n}\n","import React, {\n  FC, useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\nimport { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isForwardedMessage,\n  isOwnMessage,\n} from '../../../modules/helpers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  onClick,\n  onCancelUpload,\n  isDownloading,\n  isProtected,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const previewBlobUrl = useMedia(\n    getMessageMediaHash(message, 'pictogram'),\n    !(isIntersecting && lastSyncTime),\n    getMessageMediaFormat(message, 'pictogram'),\n    lastSyncTime,\n  );\n  const previewClassNames = useMediaTransition(previewBlobUrl);\n\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const isInline = Boolean(isIntersecting && fullMediaData);\n  // Thumbnail is always rendered so we can only disable blur if we have preview\n  const thumbRef = useBlurredMediaThumbRef(message, previewBlobUrl);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const { isBuffered, bufferingHandlers } = useBuffering(!canAutoLoad);\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isBuffered) || isDownloading,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(isLoadAllowed && !isPlayAllowed && !shouldRenderSpinner);\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = (videoRef.current?.duration) || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isForwarded = isForwardedMessage(message);\n  const { width, height } = dimensions || calculateVideoDimensions(video, isOwn, isForwarded, noAvatars);\n\n  useVideoAutoPause(videoRef, isInline);\n  useVideoCleanup(videoRef, [isInline]);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n      videoRef.current!.play();\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n  const style = dimensions\n    ? `width: ${width}px; height: ${height}px; left: ${dimensions.x}px; top: ${dimensions.y}px;`\n    : '';\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      // @ts-ignore teact feature\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <canvas\n        ref={thumbRef}\n        className=\"thumbnail\"\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n      />\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        // @ts-ignore teact feature\n        style={`width: ${width}px; height: ${height}px;`}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {isInline && (\n        <video\n          ref={videoRef}\n          className=\"full-media\"\n          width={width}\n          height={height}\n          autoPlay={isPlayAllowed}\n          muted\n          loop\n          playsInline\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          <source src={fullMediaData} />\n        </video>\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderPlayButton && <i className={buildClassName('icon-large-play', playButtonClassNames)} />}\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openUserInfo } = getDispatch();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n\n  const handleClick = useCallback(() => {\n    openUserInfo({ id: userId });\n  }, [openUserInfo, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', Boolean(userId) && 'interactive')}\n      onClick={userId ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import React, {\n  FC, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent < answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            // @ts-ignore\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n}) => {\n  const { loadMessage, openPollResults } = getDispatch();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    if (\n      isSubmitting\n      && poll.results.results\n      && poll.results.results.some((result) => result.isChosen)\n    ) {\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\">\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n    };\n  },\n)(Poll));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../modules/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  let isSquarePhoto = false;\n  if (webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n\n  const className = buildClassName(\n    'WebPage',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          nonInteractive={!isMediaInteractive}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n        />\n      )}\n      <div className=\"WebPage-text\">\n        <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n        {!inPreview && title && (\n          <p className=\"site-title\">{renderText(title)}</p>\n        )}\n        {truncatedDescription && (\n          <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n        )}\n      </div>\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersection={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../modules/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n}) => {\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photoUrl,\n  } = invoice!;\n\n  return (\n    <div\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <p>{renderText(text, ['emoji', 'br'])}</p>\n      )}\n      <div className={`description ${photoUrl ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n          />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","import { MouseEvent as ReactMouseEvent } from 'react';\nimport React, {\n  FC,\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../../lib/teact/teactn';\n\nimport { OwnProps as PhotoProps } from '../Photo';\nimport { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../modules/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getDispatch();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...props.dimensions,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : props.onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        // @ts-ignore\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import React, { FC, useCallback } from '../../../lib/teact/teact';\n\nimport { GlobalState } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, ISettings } from '../../../types';\nimport { AlbumRectPart, IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent } from '../../../modules/helpers';\nimport { getDispatch, getGlobal, withGlobal } from '../../../lib/teact/teactn';\nimport withSelectControl from './hocs/withSelectControl';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../modules/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getDispatch();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[message.previousLocalId || message.id];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${message.id}`}\n          message={message}\n          observeIntersection={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      // @ts-ignore\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import React, {\n  FC,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat, ApiMessage } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash } from '../../../modules/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useBuffering from '../../../hooks/useBuffering';\nimport useVideoCleanup from '../../../hooks/useVideoCleanup';\nimport useVideoAutoPause from './hooks/useVideoAutoPause';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet currentOnRelease: NoneToVoidFunction;\n\nfunction createCapture(onRelease: NoneToVoidFunction) {\n  return () => {\n    if (currentOnRelease) {\n      currentOnRelease();\n    }\n\n    currentOnRelease = onRelease;\n  };\n}\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const thumbRef = useBlurredMediaThumbRef(message, mediaData);\n\n  const { isBuffered, bufferingHandlers } = useBuffering();\n  const isTransferring = (isLoadAllowed && !isBuffered) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring || !isBuffered, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = () => {\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current!);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  };\n\n  const capturePlaying = createCapture(stopPlaying);\n\n  useEffect(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (shouldPlay) {\n      safePlay(playerRef.current);\n    } else {\n      playerRef.current.pause();\n    }\n  }, [shouldPlay]);\n\n  useVideoAutoPause(playerRef, shouldPlay);\n  useVideoCleanup(playerRef, [mediaData]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getDispatch().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  const videoClassName = buildClassName('full-media', transitionClassNames);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      <div className=\"thumbnail-wrapper\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // @ts-ignore teact feature\n          style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n        />\n      </div>\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            ref={playerRef}\n            className={videoClassName}\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            // eslint-disable-next-line react/jsx-props-no-spreading\n            {...bufferingHandlers}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n          >\n            <source src={mediaData} />\n          </video>\n        </div>\n      )}\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React, { FC } from '../../../lib/teact/teact';\n\nimport { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ button }: { button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'NOT_SUPPORTED'}\n              onClick={() => onClick({ button })}\n            >\n              {renderText(lang(button.text))}\n              {button.type === 'buy' && <i className=\"icon-card\" />}\n              {button.type === 'url' && !button.value!.match(RE_TME_LINK) && <i className=\"icon-arrow-right\" />}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../modules/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getDispatch();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? lang('Comments', messagesCount, 'i') : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { getDispatch, getGlobal } from '../../../lib/teact/teactn';\n\nimport {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiUser,\n} from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\n\nimport './Reactions.scss';\n\nconst MAX_REACTORS_AVATARS = 3;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n}> = ({\n  reaction,\n  message,\n  activeReaction,\n  availableReactions,\n}) => {\n  const { sendReaction } = getDispatch();\n\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!recentReactions || reaction.count > MAX_REACTORS_AVATARS) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => recentReaction.reaction === reaction.reaction)\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction, recentReactions]);\n\n  const handleClick = useCallback(() => {\n    sendReaction({\n      reaction: reaction.isChosen ? undefined : reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, sendReaction]);\n\n  return (\n    <Button\n      className={buildClassName(reaction.isChosen && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReaction={activeReaction}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : formatIntegerCompact(reaction.count)}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReaction?: ActiveReaction;\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n};\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReaction,\n  availableReactions,\n  metaChildren,\n}) => {\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={reaction.reaction}\n          reaction={reaction}\n          message={message}\n          activeReaction={activeReaction}\n          availableReactions={availableReactions}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import React, {\n  FC, memo, useEffect, useState,\n} from '../../lib/teact/teact';\n\nimport { ActiveEmojiInteraction } from '../../global/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport getAnimationData, { ANIMATED_STICKERS_PATHS } from './helpers/animatedAssets';\nimport useAnimatedEmoji from './hooks/useAnimatedEmoji';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nconst QUALITY = 1;\n\ntype OwnProps = {\n  localSticker?: string;\n  localEffect?: string;\n  isOwn?: boolean;\n  soundId?: string;\n  observeIntersection?: ObserveFn;\n  size?: 'large' | 'medium' | 'small';\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst LocalAnimatedEmoji: FC<OwnProps> = ({\n  localSticker,\n  localEffect,\n  isOwn,\n  soundId,\n  size = 'medium',\n  observeIntersection,\n  messageId,\n  chatId,\n  activeEmojiInteraction,\n}) => {\n  const {\n    playKey,\n    ref,\n    style,\n    width,\n    handleClick,\n    markAnimationLoaded,\n  } = useAnimatedEmoji(size, chatId, messageId, soundId, activeEmojiInteraction, isOwn, localEffect);\n  const id = `local_emoji_${localSticker}`;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [localStickerAnimationData, setLocalStickerAnimationData] = useState<AnyLiteral>();\n  useEffect(() => {\n    if (localSticker) {\n      getAnimationData(localSticker as keyof typeof ANIMATED_STICKERS_PATHS).then((data) => {\n        setLocalStickerAnimationData(data);\n      });\n    }\n  }, [localSticker]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      // @ts-ignore teact feature\n      style={style}\n      onClick={handleClick}\n    >\n      {localStickerAnimationData && (\n        <AnimatedSticker\n          key={id}\n          id={id}\n          animationData={localStickerAnimationData}\n          size={width}\n          quality={QUALITY}\n          play={isIntersecting && playKey}\n          noLoop\n          onLoad={markAnimationLoaded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(LocalAnimatedEmoji);\n","import React, {\n  FC,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiSticker,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n} from '../../../api/types';\nimport {\n  AudioOrigin, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectAnimatedEmoji,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectMessageIdsByGroupId,\n  selectLocalAnimatedEmoji,\n  selectIsMessageProtected,\n  selectLocalAnimatedEmojiEffect,\n  selectDefaultReaction,\n} from '../../../modules/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n} from '../../../modules/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { renderMessageText } from '../../common/helpers/renderMessageText';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName, isEmojiOnlyMessage } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from '../../common/AnimatedEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport LocalAnimatedEmoji from '../../common/LocalAnimatedEmoji';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForMedia: ObserveFn;\n    observeIntersectionForAnimatedStickers: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    areReactionsInMeta?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsername?: string;\n  sender?: ApiUser | ApiChat;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  isSingleEmoji?: boolean;\n  animatedEmoji?: ApiSticker;\n  localSticker?: string;\n  localEffect?: string;\n  animatedEmojiEffect?: ApiSticker;\n  animatedEmojiSoundId?: string;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: string;\n  activeReaction?: ActiveReaction;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'in-meta'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsername,\n  observeIntersectionForBottom,\n  observeIntersectionForMedia,\n  observeIntersectionForAnimatedStickers,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  areReactionsInMeta,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  localSticker,\n  localEffect,\n  animatedEmojiEffect,\n  animatedEmojiSoundId,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReaction,\n  activeEmojiInteraction,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickInlineButton,\n    disableContextMenuHint,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const customShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = localSticker || animatedEmoji;\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !customShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1;\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && defaultReaction && !isInDocumentGroupNotLast;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !sender) ? originSender : sender;\n  const senderPeer = forwardInfo ? originSender : sender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    Boolean(activeReaction) && 'has-active-reaction',\n  );\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    customShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const textParts = renderMessageText(message, highlight, isEmojiOnlyMessage(customShape));\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice,\n  } = getMessageContent(message);\n\n  let metaPosition!: MetaPosition;\n  if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (textParts && !hasAnimatedEmoji && !webPage) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (areReactionsInMeta) {\n    reactionsPosition = 'in-meta';\n  } else if (reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions)) {\n    if (customShape || ((photo || video || hasAnimatedEmoji) && !textParts)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, noAvatars).width;\n      }\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.adminTitle) || (!asForwarded && forwardInfo?.adminTitle) || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactions={reactionsPosition === 'in-meta'}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        activeReaction={activeReaction}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReaction={activeReaction}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !textParts && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            observeIntersectionForPlaying={observeIntersectionForAnimatedStickers}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {animatedEmoji && (\n          <AnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            sticker={animatedEmoji}\n            effect={animatedEmojiEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {localSticker && (\n          <LocalAnimatedEmoji\n            size=\"small\"\n            isOwn={isOwn}\n            localSticker={localSticker}\n            localEffect={localEffect}\n            soundId={animatedEmojiSoundId}\n            observeIntersection={observeIntersectionForMedia}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForMedia}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {!hasAnimatedEmoji && textParts && (\n          <p className={textContentClass} dir=\"auto\">\n            {textParts}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </p>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForMedia}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n          />\n        )}\n        {invoice && <Invoice message={message} />}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const shouldRender = !(customShape && !viaBotId) && (\n      (withSenderName && !photo && !video) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && customShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(customShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"auto\"\n          >\n            {renderText(senderTitle)}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.adminTitle && !isChannel ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.adminTitle}</span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      id={`message${messageId}`}\n      className={containerClassName}\n      // @ts-ignore teact feature\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          // @ts-ignore\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">{lang('ForwardedMessage')}</div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReaction && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji reaction={defaultReaction!} />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReaction={activeReaction}\n            availableReactions={availableReactions}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const { focusedMessage, forwardMessages, lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const chatUsername = chat?.username;\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectSender(global, replyMessage);\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleEmoji(message);\n    let isSelected: boolean;\n\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const localSticker = singleEmoji ? selectLocalAnimatedEmoji(global, singleEmoji) : undefined;\n\n    return {\n      theme: selectTheme(global),\n      chatUsername,\n      forceSenderName,\n      sender: canShowSender ? sender : undefined,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      canReply,\n      lastSyncTime,\n      highlight,\n      isSingleEmoji: Boolean(singleEmoji),\n      animatedEmoji: singleEmoji ? selectAnimatedEmoji(global, singleEmoji) : undefined,\n      animatedEmojiEffect: singleEmoji && isUserId(chatId) ? selectAnimatedEmojiEffect(global, singleEmoji) : undefined,\n      animatedEmojiSoundId: singleEmoji ? selectAnimatedEmojiSound(global, singleEmoji) : undefined,\n      localSticker,\n      localEffect: localSticker && isUserId(chatId) ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        !!message.groupedId && !message.isInAlbum && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: selectDefaultReaction(global, chatId),\n      activeReaction: global.activeReactions[id],\n      activeEmojiInteraction: global.activeEmojiInteraction,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import React, { useCallback } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { isUserId } from '../../../../modules/helpers';\nimport { IAlbum, MediaViewerOrigin } from '../../../../types';\nimport {\n  ApiChat, ApiMessage, ApiUser, MAIN_THREAD_ID,\n} from '../../../../api/types';\nimport { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openUserInfo, openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getDispatch();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    if (isUserId(avatarPeer.id)) {\n      openUserInfo({ id: avatarPeer.id });\n    } else {\n      openChat({ id: avatarPeer.id });\n    }\n  }, [avatarPeer, openUserInfo, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else if (isUserId(senderPeer.id)) {\n      openUserInfo({ id: senderPeer.id });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, openUserInfo, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openUserInfo({ id: botSender.id });\n  }, [botSender, openUserInfo]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId, threadId, messageId, origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import { RefObject } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { renderTextWithEntities } from '../../common/helpers/renderMessageText';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../modules/selectors';\nimport { getChatTitle, getUserFullName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Button from '../../ui/Button';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getDispatch();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  const handleClick = () => {\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId,\n          param: message.startParam,\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"SponsoredMessage Message open\" key=\"sponsored-message\">\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <p className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">{lang('SponsoredMessage')}</span>\n            </span>\n          </p>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import { RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact, flatten } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { getMessageOriginalId, isActionMessage, isOwnMessage } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport { isAlbum, MessageDateGroup } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getDispatch } from '../../lib/teact/teactn';\n\ninterface OwnProps {\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  areReactionsInMeta: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  areReactionsInMeta,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getDispatch();\n\n  const {\n    observeIntersectionForMedia,\n    observeIntersectionForReading,\n    observeIntersectionForAnimatedStickers,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + flatten(messageGroup.senderGroups).length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (senderGroup.length === 1 && !isAlbum(senderGroup[0]) && isActionMessage(senderGroup[0])) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersection={observeIntersectionForReading}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return flatten(senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === `message${message.previousLocalId}`) {\n          anchorIdRef.current = `message${message.id}`;\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Scheduled messages can have local IDs in the middle of the list,\n        // and keys should be ordered, so we prefix it with a date.\n        // However, this may lead to issues if server date is not synchronized with the local one.\n        const key = type !== 'scheduled' ? originalId : `${message.date}_${originalId}`;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForMedia={observeIntersectionForMedia}\n            observeIntersectionForAnimatedStickers={observeIntersectionForAnimatedStickers}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            areReactionsInMeta={areReactionsInMeta}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }));\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {flatten(senderGroups)}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {flatten(dateGroups)}\n      {isViewportNewest && <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import { RefObject } from 'react';\nimport { getDispatch } from '../../../lib/teact/teactn';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getDispatch();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] >= LOCAL_MESSAGE_ID_BASE;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../modules/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { MessageListType } from '../../global/types';\n\nimport useLang, { LangFn } from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiMessage, ApiRestrictionReason, MAIN_THREAD_ID,\n} from '../../api/types';\nimport { MessageListType } from '../../global/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_ID_BASE, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n} from '../../modules/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n} from '../../modules/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: number;\n  lastMessage?: ApiMessage;\n  botDescription?: string;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 20;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  botDescription,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((l) => messagesById[l]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    const container = containerRef.current!;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  useEffect(() => {\n    if (!('ResizeObserver' in window) || process.env.APP_ENV === 'perf') {\n      return undefined;\n    }\n\n    const observer = new ResizeObserver(([entry]) => {\n      // During animation\n      if (!(entry.target as HTMLDivElement).offsetParent) {\n        return;\n      }\n\n      setContainerHeight(entry.contentRect.height);\n    });\n\n    observer.observe(containerRef.current!);\n\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    if (isReady) {\n      containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n    }\n  }, [windowHeight, isReady, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] >= LOCAL_MESSAGE_ID_BASE;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]: [\n    typeof messageIds, typeof isViewportNewest, typeof containerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To workaround that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botDescription ? (\n        <div className=\"empty\"><span>{renderText(lang(botDescription), ['br', 'emoji', 'links'])}</span></div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          areReactionsInMeta={isPrivate}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let botDescription: string | undefined;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botDescription = chatBot.fullInfo.botDescription || 'NoMessages';\n      } else {\n        botDescription = 'Updating bot info...';\n      }\n    }\n\n    return {\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      botDescription,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useDebounce from '../../../hooks/useDebounce';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useDebounce(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import React, {\n  FC, useCallback, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../modules/selectors';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ScrollDownButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  messageListType?: MessageListType;\n  unreadCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst ScrollDownButton: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  unreadCount,\n  withExtraShift,\n}) => {\n  const { focusNextReply } = getDispatch();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    'ScrollDownButton',\n    isShown && 'revealed',\n    !canPost && 'no-composer',\n    withExtraShift && 'with-extra-shift',\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <div className=\"ScrollDownButton-inner\">\n        <Button\n          color=\"secondary\"\n          round\n          onClick={handleClick}\n          ariaLabel={lang('AccDescrPageDown')}\n        >\n          <i className=\"icon-arrow-down\" />\n        </Button>\n        {Boolean(unreadCount) && (\n          <div className=\"unread-count\">{formatIntegerCompact(unreadCount!)}</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    return {\n      messageListType,\n      unreadCount: chat && threadId === MAIN_THREAD_ID && messageListType === 'thread' ? chat.unreadCount : undefined,\n    };\n  },\n)(ScrollDownButton));\n","import { ApiAttachment } from '../../../../api/types';\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../../config';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n\n      if (width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(blobUrl, MAX_QUICK_IMG_SIZE / Math.max(width, height), 'image/jpeg');\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","export default __webpack_public_path__ + \"c0155344d336103c2b6a0b28cc510750.js\";","// @ts-ignore\nimport encoderPath from 'file-loader!opus-recorder/dist/encoderWorker.min';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\ninterface IOpusRecorder extends Omit<MediaRecorder, 'start' | 'ondataavailable'> {\n  new(options: AnyLiteral): IOpusRecorder;\n\n  start(stream?: MediaStreamAudioSourceNode): void;\n\n  sourceNode: MediaStreamAudioSourceNode;\n\n  ondataavailable: (typedArray: Uint8Array) => void;\n}\n\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    // @ts-ignore\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nexport default () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n","import { StateHookSetter, useEffect } from '../../../../lib/teact/teact';\nimport { ApiAttachment, ApiMessage } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nexport default (\n  insertTextAndUpdateCursor: (text: string, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n) => {\n  useEffect(() => {\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const { items } = e.clipboardData;\n      const media = Array.from(items)\n        .find((item) => CLIPBOARD_ACCEPTED_TYPES.includes(item.type) && item.kind === 'file');\n      const file = media && media.getAsFile();\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n\n      e.preventDefault();\n\n      if (!file && !pastedText) {\n        return;\n      }\n\n      if (file && !editedMessage) {\n        const attachment = await buildAttachment(file.name, file, true);\n        setAttachments((attachments) => [\n          ...attachments,\n          attachment,\n        ]);\n      }\n\n      if (pastedText) {\n        insertTextAndUpdateCursor(pastedText, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [insertTextAndUpdateCursor, editedMessage, setAttachments]);\n};\n","import { ApiFormattedText } from '../../../../api/types';\nimport { renderTextWithEntities } from '../../../common/helpers/renderMessageText';\n\nexport default function getMessageTextAsHtml(formattedText?: ApiFormattedText) {\n  const { text, entities } = formattedText || {};\n  if (!text) {\n    return '';\n  }\n\n  const result = renderTextWithEntities(\n    text,\n    entities,\n    undefined,\n    undefined,\n    true,\n  );\n\n  if (Array.isArray(result)) {\n    return result.join('');\n  }\n\n  return result;\n}\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiFormattedText, ApiMessage } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_ID } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nexport default (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  html: string,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft } = getDispatch();\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    if (htmlRef.current.length && !editedMessage) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(htmlRef.current!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      return;\n    }\n\n    if (!draft) {\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(draft));\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId]);\n\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n","import { useState } from '../lib/teact/teact';\n\nimport useDebounce from './useDebounce';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck from './useHeavyAnimationCheck';\nimport useFlag from './useFlag';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const runDebounced = useDebounce(ms, true);\n  const [value, setValue] = useState<R>();\n  const [isFrozen, freeze, unfreeze] = useFlag();\n\n  useHeavyAnimationCheck(freeze, unfreeze);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\nimport { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getDispatch();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [offset, chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return {\n      username: '',\n      query: '',\n      canShowHelp: false,\n      usernameLowered: '',\n    };\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      unmarkIsOpen();\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      unmarkIsOpen();\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import React, {\n  FC, useRef, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport Button, { OwnProps as ButtonProps } from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={IS_TOUCH_ENV ? onActivate : undefined}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AttachMenu = useModuleLoader(Bundles.Extra, 'AttachMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachMenu ? <AttachMenu {...props} /> : undefined;\n};\n\nexport default memo(AttachMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './CustomSendMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CustomSendMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const CustomSend = useModuleLoader(Bundles.Extra, 'CustomSendMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomSend ? <CustomSend {...props} /> : undefined;\n};\n\nexport default memo(CustomSendMenuAsync);\n","import React, { FC } from '../../../lib/teact/teact';\nimport { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../modules/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickInlineButton } = getDispatch();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n  const [forceOpen, markForceOpen, unmarkForceOpen] = useFlag(true);\n\n  const handleClose = () => {\n    unmarkForceOpen();\n    onClose();\n  };\n\n  useEffect(() => {\n    markForceOpen();\n  }, [markForceOpen, message?.keyboardButtons]);\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen || forceOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={handleClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={handleClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'NOT_SUPPORTED'}\n                onClick={() => clickInlineButton({ button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n} from '../../../modules/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../modules/helpers';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    exitForwardMode,\n  } = getDispatch();\n\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n  }, [replyingToId, editingId, forwardedMessagesCount, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, message]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? `${forwardedMessagesCount} forwarded messages`\n    : undefined;\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Cancel replying\" onClick={clearEmbedded}>\n          <i className=\"icon-close\" />\n        </Button>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={message}\n          sender={sender}\n          customText={customText}\n          title={editingId ? 'Edit Message' : undefined}\n          onClick={handleMessageClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      currentUserId,\n      forwardMessages: { fromChatId, toChatId, messageIds: forwardMessageIds },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n\n    let message;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = selectChatMessage(global, fromChatId!, forwardMessageIds![0]);\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = chatId === currentUserId;\n\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n    }\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage, ApiMessageEntityTypes, ApiWebPage } from '../../../api/types';\nimport { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../modules/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getDispatch();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities && entities.find(({ type }) => type === ApiMessageEntityTypes.TextUrl);\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  const handleClearWebpagePreview = () => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  };\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <Button round faded color=\"translucent\" ariaLabel=\"Clear Webpage Preview\" onClick={handleClearWebpagePreview}>\n          <i className=\"icon-close\" />\n        </Button>\n        <WebPage message={messageStub} inPreview theme={theme} />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState, MessageListType } from '../../../global/types';\nimport {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  MAIN_THREAD_ID,\n  ApiBotCommand,\n} from '../../../api/types';\nimport { InlineBotSettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, EDITABLE_INPUT_ID, REPLIES_USER_ID, SCHEDULED_WHEN_ONLINE, SEND_MESSAGE_ACTION_INTERVAL,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatUser,\n  selectChatMessage,\n  selectUserStatus,\n} from '../../../modules/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isUserId,\n  isChatAdmin,\n  isChatSuperGroup,\n} from '../../../modules/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration, getDayStartAt } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport insertHtmlInSelection from '../../../util/insertHtmlInSelection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu.async';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport Portal from '../../ui/Portal';\nimport CalendarModal from '../../common/CalendarModal.async';\nimport SendAsMenu from './SendAsMenu.async';\nimport Avatar from '../../common/Avatar';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    isPollModalOpen?: boolean;\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    usersById?: Record<string, ApiUser>;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    serverTimeOffset: number;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst CAPTION_MAX_LENGTH = 1024;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  isPollModalOpen,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  usersById,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  baseEmojiKeywords,\n  emojiKeywords,\n  serverTimeOffset,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n  } = getDispatch();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setHtml] = useState<string>('');\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n  const [\n    scheduledMessageArgs, setScheduledMessageArgs,\n  ] = useState<GlobalState['messages']['contentToBeScheduled'] | undefined>();\n  const { width: windowWidth } = windowSize.get();\n  const sendAsIds = chat?.sendAsIds;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  // Cache for frequently updated state\n  const htmlRef = useRef<string>(html);\n  useEffect(() => {\n    htmlRef.current = html;\n  }, [html]);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsIds]) => {\n    // We only animate send-as button if `sendAsIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsIds && !prevSendAsIds);\n  }, [chatId, sendAsIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      setScheduledMessageArgs(contentToBeScheduled);\n      openCalendar();\n    }\n  }, [contentToBeScheduled, openCalendar]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    html,\n    setHtml,\n    undefined,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const allowedAttachmentOptions = useMemo(() => {\n    return getAllowedAttachmentOptions(chat, isChatWithBot);\n  }, [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && allowedAttachmentOptions.canSendStickers && !attachments.length),\n    html,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    const messageInput = document.getElementById(inputId)!;\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, []);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, []);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments([]);\n    closeStickerTooltip();\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCalendar, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const handleEditComplete = useEditing(htmlRef, setHtml, editingMessage, resetComposer, openDeleteModal);\n  useDraft(draft, chatId, threadId, html, htmlRef, setHtml, editingMessage);\n  useClipboardPaste(insertTextAndUpdateCursor, setAttachments, editingMessage);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, []);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    setAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments([]);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    const maxLength = currentAttachments.length ? CAPTION_MAX_LENGTH : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, serverTimeOffset,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang,\n  ]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, shouldPreserveInput = false) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ sticker });\n      openCalendar();\n    } else {\n      sendMessage({ sticker });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ gif });\n      openCalendar();\n    } else {\n      sendMessage({ gif });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [shouldSchedule, openCalendar, sendMessage, resetComposer]);\n\n  const handleInlineBotSelect = useCallback((inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    sendInlineBotResult({\n      id: inlineResult.id,\n      queryId: inlineResult.queryId,\n    });\n\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n    if (IS_IOS && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, connectionState, resetComposer, sendInlineBotResult]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ poll });\n      closePollModal();\n      openCalendar();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, openCalendar, sendMessage, shouldSchedule]);\n\n  const handleSilentSend = useCallback(() => {\n    if (shouldSchedule) {\n      setScheduledMessageArgs({ isSilent: true });\n      openCalendar();\n    } else {\n      void handleSend(true);\n    }\n  }, [handleSend, openCalendar, shouldSchedule]);\n\n  const handleMessageSchedule = useCallback((date: Date, isWhenOnline = false) => {\n    const { isSilent, ...restArgs } = scheduledMessageArgs || {};\n\n    // Scheduled time can not be less than 10 seconds in future\n    const scheduledAt = Math.round(Math.max(date.getTime(), Date.now() + 60 * 1000) / 1000)\n      + (isWhenOnline ? 0 : serverTimeOffset);\n\n    if (!scheduledMessageArgs || Object.keys(restArgs).length === 0) {\n      void handleSend(!!isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...scheduledMessageArgs,\n        scheduledAt,\n      });\n      requestAnimationFrame(() => {\n        resetComposer();\n      });\n    }\n    closeCalendar();\n  }, [closeCalendar, handleSend, resetComposer, scheduledMessageArgs, sendMessage, serverTimeOffset]);\n\n  const handleMessageScheduleUntilOnline = useCallback(() => {\n    handleMessageSchedule(new Date(SCHEDULED_WHEN_ONLINE * 1000), true);\n  }, [handleMessageSchedule]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    setScheduledMessageArgs(undefined);\n  }, [closeCalendar]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record:\n        void startRecordingVoice();\n        break;\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        openCalendar();\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, startRecordingVoice, handleEditComplete,\n    activeVoiceRecording, openCalendar, pauseRecordingVoice,\n  ]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && !allowedAttachmentOptions.canAttachMedia;\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = areVoiceMessagesNotAllowed\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? openCalendar\n      : handleSend;\n\n  return (\n    <div className={className}>\n      {allowedAttachmentOptions.canAttachMedia && isReady && (\n        <Portal containerId=\"#middle-column-portals\">\n          <DropArea\n            isOpen={dropAreaState !== DropAreaState.None}\n            withQuick={[dropAreaState, prevDropAreaState].includes(DropAreaState.QuickFile)}\n            onHide={onDropHide}\n            onFileSelect={handleFileSelect}\n          />\n        </Portal>\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        usersById={usersById}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        addRecentEmoji={addRecentEmoji}\n        onSend={shouldSchedule ? openCalendar : handleSend}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n      />\n      <PollModal\n        isOpen={Boolean(isPollModalOpen)}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsIds={sendAsIds}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n        usersById={usersById}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        allowedAttachmentOptions={allowedAttachmentOptions}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!allowedAttachmentOptions.canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botCommands !== false && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {!!sendAsIds?.length && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={isSymbolMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {!activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isAttachMenuOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openAttachMenu}\n              ariaLabel=\"Add an attachment\"\n            >\n              <i className=\"icon-attach\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <AttachMenu\n            isOpen={isAttachMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onClose={closeAttachMenu}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen}\n            allowedAttachmentOptions={allowedAttachmentOptions}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSilentSend={!isChatWithSelf ? handleSilentSend : undefined}\n          onScheduleSend={!shouldSchedule ? openCalendar : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={scheduledDefaultDate.getTime()}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        secondButtonLabel={canScheduleUntilOnline ? lang('Schedule.SendWhenOnline') : undefined}\n        onClose={handleCloseCalendar}\n        onSubmit={handleMessageSchedule}\n        onSecondButtonClick={canScheduleUntilOnline ? handleMessageScheduleUntilOnline : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatUser = chat && selectChatUser(global, chat);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const { currentUserId } = global;\n    const sendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsUser = sendAsId ? usersById?.[sendAsId] : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? chatsById?.[sendAsId] : undefined;\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      canScheduleUntilOnline: Boolean(\n        !isChatWithSelf && !isChatWithBot && chat && chatUser\n        && isUserId(chatId) && selectUserStatus(global, chatId)?.wasOnline,\n      ),\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      isPollModalOpen: global.isPollModalOpen,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      usersById,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      serverTimeOffset: global.serverTimeOffset,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat && chat.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot && chatBot.fullInfo ? (chatBot.fullInfo.botCommands || false) : undefined,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n    };\n  },\n)(Composer));\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\n\nimport parseEmojiOnlyString from '../../../common/helpers/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getDispatch();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(/^<img.[^>]*?>$/g)))\n  );\n  const hasStickers = Boolean(stickers) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1],\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","export default function insertHtmlInSelection(html: string) {\n  const selection = window.getSelection();\n\n  if (selection?.getRangeAt && selection.rangeCount) {\n    const range = selection.getRangeAt(0);\n    range.deleteContents();\n\n    const fragment = range.createContextualFragment(html);\n    const lastInsertedNode = fragment.lastChild;\n    range.insertNode(fragment);\n    if (lastInsertedNode) {\n      range.setStartAfter(lastInsertedNode);\n      range.setEndAfter(lastInsertedNode);\n    } else {\n      range.collapse(false);\n    }\n    selection.removeAllRanges();\n    selection.addRange(range);\n  }\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getDispatch } from '../../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport getMessageTextAsHtml from '../helpers/getMessageTextAsHtml';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../modules/helpers';\n\nexport default (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: () => void,\n  openDeleteModal: () => void,\n) => {\n  const { editMessage } = getDispatch();\n\n  // TODO useOnChange\n  // Handle editing message\n  useEffect(() => {\n    if (!editedMessage) {\n      setHtml('');\n      return;\n    }\n\n    setHtml(getMessageTextAsHtml(editedMessage.content.text));\n\n    requestAnimationFrame(() => {\n      const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n      focusEditableElement(messageInput, true);\n    });\n  }, [editedMessage, setHtml]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer]);\n\n  return handleEditComplete;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { emojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(Bundles.Extra, 'EmojiInteractionAnimation', !emojiInteraction);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import React, {\n  FC, useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChatBannedRights, MAIN_THREAD_ID } from '../../api/types';\nimport {\n  MessageListType,\n  MessageList as GlobalMessageList,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport { ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../modules/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../modules/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport { createMessageHash } from '../../util/routing';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport ScrollDownButton from './ScrollDownButton';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  animationLevel?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  messageLists?: GlobalMessageList[];\n  isChannel?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  activeEmojiInteraction?: ActiveEmojiInteraction;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  messageLists,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteraction,\n}) => {\n  const {\n    openChat,\n    unpinAllMessages,\n    loadUser,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    closePaymentModal,\n    clearReceipt,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    animationLevel, currentTransitionKey, prevTransitionKey, chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (window.visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openChat({ id: chatId });\n  }, [unpinAllMessages, openChat, closeUnpinModal, chatId]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n  }, [joinChannel, chatId]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    customBackground && 'custom-bg-image',\n    backgroundColor && 'custom-bg-color',\n    customBackground && isBackgroundBlurred && 'blurred',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  useHistoryBack(\n    renderingChatId && renderingThreadId,\n    closeChat, undefined, undefined, undefined,\n    messageLists?.map(createMessageHash) || [],\n  );\n\n  useHistoryBack(isMobileSearchActive, closeLocalTextSearch);\n  useHistoryBack(isSelectModeActive, exitMessageSelectMode);\n\n  const isMessagingDisabled = Boolean(!isPinnedMessageList && !renderingCanPost && messageSendingRestrictionReason);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      // @ts-ignore teact-feature\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        id=\"middle-column-bg\"\n        // @ts-ignore\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              {() => (\n                <>\n                  <MessageList\n                    key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    type={renderingMessageListType}\n                    canPost={renderingCanPost}\n                    hasTools={renderingHasTools}\n                    onFabToggle={setIsFabShown}\n                    onNotchToggle={setIsNotchShown}\n                    isReady={isReady}\n                    withBottomShift={withMessageListBottomShift}\n                  />\n                  <div className={footerClassName}>\n                    {renderingCanPost && (\n                      <Composer\n                        chatId={renderingChatId}\n                        threadId={renderingThreadId}\n                        messageListType={renderingMessageListType}\n                        dropAreaState={dropAreaState}\n                        onDropHide={handleHideDropArea}\n                        isReady={isReady}\n                      />\n                    )}\n                    {isPinnedMessageList && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"unpin-all-button\"\n                          onClick={handleOpenUnpinModal}\n                        >\n                          <i className=\"icon-unpin\" />\n                          <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                        </Button>\n                      </div>\n                    )}\n                    {isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {messageSendingRestrictionReason}\n                          </span>\n                        </div>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanSubscribe && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {lang('BotStart')}\n                        </Button>\n                      </div>\n                    )}\n                    {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {lang('BotRestart')}\n                        </Button>\n                      </div>\n                    )}\n                    <MessageSelectToolbar\n                      messageListType={renderingMessageListType}\n                      isActive={isSelectModeActive}\n                      canPost={renderingCanPost}\n                    />\n                    <PaymentModal\n                      isOpen={Boolean(isPaymentModalOpen)}\n                      onClose={closePaymentModal}\n                    />\n                    <ReceiptModal\n                      isOpen={Boolean(isReceiptModalOpen)}\n                      onClose={clearReceipt}\n                    />\n                    <SeenByModal isOpen={isSeenByModalOpen} />\n                    <ReactorListModal isOpen={isReactorListModalOpen} />\n                  </div>\n                </>\n              )}\n            </Transition>\n\n            <ScrollDownButton\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      {activeEmojiInteraction && (\n        <EmojiInteractionAnimation emojiInteraction={activeEmojiInteraction} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const { isLeftColumnShown, chats: { listIds }, activeEmojiInteraction } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      activeEmojiInteraction,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate: isUserId(chatId),\n      canPost: !isPinnedMessageList && (!chat || canPost) && !isBotNotStarted,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      messageLists,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  animationLevel?: number,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (animationLevel !== ANIMATION_LEVEL_MIN) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (animationLevel === ANIMATION_LEVEL_MIN) {\n      setIsReady(true);\n    }\n  }, [animationLevel]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: animationLevel !== ANIMATION_LEVEL_MIN ? handleOpenEnd : undefined,\n    handleSlideStop: animationLevel !== ANIMATION_LEVEL_MIN ? handleSlideStop : undefined,\n  };\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../modules/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport './RightHeader.scss';\nimport { getDayStartAt } from '../../util/dateFormat';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  shouldSkipAnimation?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  shouldSkipAnimation,\n  isEditingInvite,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar, addContact,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const backButtonRef = useRef<HTMLDivElement>(null);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    addContact({ userId });\n  }, [addContact, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : undefined // Never reached\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>Profile</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipAnimation) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div ref={backButtonRef} className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipAnimation) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n\n    return {\n      canManage,\n      canAddContact,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../modules/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      ).reverse();\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import React, {\n  FC, useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  MAIN_THREAD_ID,\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport {\n  NewChatMembersProgress, ISettings, MediaViewerOrigin, ProfileState, ProfileTabType, SharedMediaType, AudioOrigin,\n} from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId,\n} from '../../modules/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../modules/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  userId?: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    openUserInfo,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getDispatch();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown, loadMoreMembers, loadCommonChats, searchMediaMessagesLocal, tabType, mediaSearchType, members,\n    commonChatIds, usersById, userStatusesById, chatsById, chatMessages, foundIds, chatId, lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContents = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSharedMedia() {\n    if (!viewportIds || !canRenderContents || !chatMessages) {\n      // This is just a single-frame delay, so we do not show spinner\n      const noSpinner = isFirstTab && viewportIds && !canRenderContents;\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContents ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContents ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderSharedMedia}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId?: string) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, userId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const chatMessages = selectChatMessages(global, userId || chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const areMembersHidden = hasMembersTab && chat && chat.fullInfo && !chat.fullInfo.canViewMembers;\n    const canAddMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (userId) {\n      resolvedUserId = userId;\n    } else if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n    }\n    if (resolvedUserId) {\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nexport default () => {\n  const [cacheBuster, setCacheBuster] = useState<boolean>(false);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => !current);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import React, {\n  FC, useCallback, useMemo, memo, useState, useEffect,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat, ApiChatMember, ApiUpdateConnectionStateType,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../modules/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  connectionState?: ApiUpdateConnectionStateType;\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  connectionState,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery, loadContactList } = getDispatch();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useEffect(() => {\n    if (isActive && connectionState === 'connectionStateReady') {\n      loadContactList();\n    }\n  }, [connectionState, isActive, loadContactList]);\n\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress, connectionState } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n      connectionState,\n    };\n  },\n)(AddChatMembers));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../modules/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  currentProfileUserId?: string;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_CLOSE_DELAY_MS = 300;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  currentProfileUserId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    openUserInfo,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n  } = getDispatch();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo || contentKey === RightColumnContent.UserInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        openUserInfo({ id: undefined }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n            setManagementScreen(ManagementScreens.Invites);\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, openUserInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, COLUMN_CLOSE_DELAY_MS);\n  }, [isOpen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevContentKey, prevChatId]) => {\n    if (\n      (prevContentKey === RightColumnContent.ChatInfo && contentKey === RightColumnContent.UserInfo)\n      || (prevContentKey === RightColumnContent.UserInfo && contentKey === RightColumnContent.ChatInfo)\n      || (prevChatId !== chatId)\n    ) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [contentKey, chatId]);\n\n  useHistoryBack(isChatSelected && (contentKey === RightColumnContent.ChatInfo\n    || contentKey === RightColumnContent.UserInfo || contentKey === RightColumnContent.Management\n    || contentKey === RightColumnContent.AddingMembers),\n  () => close(false), toggleChatInfo);\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            chatId={chatId!}\n            onNextStep={handleAppendingChatMembers}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n      case RightColumnContent.UserInfo:\n        return (\n          <Profile\n            key={currentProfileUserId || chatId!}\n            chatId={chatId!}\n            userId={currentProfileUserId}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            isActive={isOpen && isActive}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          shouldSkipAnimation={shouldSkipTransition || shouldSkipHistoryAnimations}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={RightColumnContent.ChatInfo}\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      currentProfileUserId: global.users.selectedId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightColumn));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","export default function download(url: string, filename: string) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { getDispatch, withGlobal } from '../../lib/teact/teactn';\n\nimport { Thread } from '../../global/types';\nimport { ApiMediaFormat, ApiMessage } from '../../api/types';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaHash,\n} from '../../modules/helpers';\n\ntype StateProps = {\n  activeDownloads: Record<number, number[]>;\n  messages: Record<number, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst startedDownloads = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessageMediaDownload } = getDispatch();\n\n  useEffect(() => {\n    Object.entries(activeDownloads).forEach(([chatId, messageIds]) => {\n      const activeMessages = messageIds.map((id) => messages[Number(chatId)].byId[id]);\n      activeMessages.forEach((message) => {\n        const downloadHash = getMessageMediaHash(message, 'download');\n        if (!downloadHash) {\n          cancelMessageMediaDownload({ message });\n          return;\n        }\n\n        if (!startedDownloads.has(downloadHash)) {\n          const mediaData = mediaLoader.getFromMemory<ApiMediaFormat.BlobUrl>(downloadHash);\n          if (mediaData) {\n            startedDownloads.delete(downloadHash);\n            download(mediaData, getMessageContentFilename(message));\n            cancelMessageMediaDownload({ message });\n            return;\n          }\n\n          mediaLoader.fetch(downloadHash, ApiMediaFormat.BlobUrl, true).then((result) => {\n            startedDownloads.delete(downloadHash);\n            if (result) {\n              download(result, getMessageContentFilename(message));\n            }\n            cancelMessageMediaDownload({ message });\n          });\n\n          startedDownloads.add(downloadHash);\n        }\n      });\n    });\n  }, [\n    cancelMessageMediaDownload,\n    messages,\n    activeDownloads,\n  ]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport { OwnProps } from './ForwardPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardPicker = useModuleLoader(Bundles.Extra, 'ForwardPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardPicker ? <ForwardPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardPickerAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  groupCallId?: string;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !groupCallId);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst CallFallbackConfirmAsync: FC<OwnProps> = ({ isOpen }) => {\n  const CallFallbackConfirm = useModuleLoader(Bundles.Calls, 'CallFallbackConfirm', !isOpen);\n\n  return CallFallbackConfirm ? <CallFallbackConfirm isOpen={isOpen} /> : undefined;\n};\n\nexport default memo(CallFallbackConfirmAsync);\n","import React, {\n  FC, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\nimport { getDispatch, getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { LangCode } from '../../types';\nimport { ApiMessage } from '../../api/types';\n\nimport '../../modules/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport {\n  selectChatMessage,\n  selectCountNotMutedUnread,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n} from '../../modules/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport buildClassName from '../../util/buildClassName';\nimport { fastRaf } from '../../util/schedulers';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport stopEvent from '../../util/stopEvent';\nimport windowSize from '../../util/windowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport { LOCATION_HASH } from '../../hooks/useHistoryBack';\n\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardPicker from './ForwardPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport CallFallbackConfirm from '../calls/CallFallbackConfirm.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  lastSyncTime?: number;\n  isLeftColumnShown: boolean;\n  isRightColumnShown: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: number;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isCallFallbackConfirmOpen: boolean;\n  addedSetIds?: string[];\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  openedStickerSetShortName,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  isCallFallbackConfirmOpen,\n  addedSetIds,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    openStickerSetShortName,\n    checkVersionNotification,\n    loadAppConfig,\n  } = getDispatch();\n  const isSynced = Boolean(lastSyncTime);\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isSynced) {\n      if (!addedSetIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      } else {\n        loadAddedStickers();\n      }\n    }\n  }, [isSynced, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (lastSyncTime && LOCATION_HASH.startsWith('#?tgaddr=')) {\n      processDeepLink(decodeURIComponent(LOCATION_HASH.substr('#?tgaddr='.length)));\n    }\n  }, [lastSyncTime]);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId]);\n\n  const {\n    transitionClassNames: middleColumnTransitionClassNames,\n  } = useShowTransition(!isLeftColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const {\n    transitionClassNames: rightColumnTransitionClassNames,\n  } = useShowTransition(isRightColumnShown, undefined, true, undefined, shouldSkipHistoryAnimations);\n\n  const className = buildClassName(\n    middleColumnTransitionClassNames.replace(/([\\w-]+)/g, 'middle-column-$1'),\n    rightColumnTransitionClassNames.replace(/([\\w-]+)/g, 'right-column-$1'),\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  // Dispatch heavy transition event when opening middle column\n  useOnChange(([prevIsLeftColumnShown]) => {\n    if (prevIsLeftColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, dispatchHeavyAnimationEnd);\n  }, [isLeftColumnShown]);\n\n  // Dispatch heavy transition event and add body class when opening right column\n  useOnChange(([prevIsRightColumnShown]) => {\n    if (prevIsRightColumnShown === undefined || animationLevel === 0) {\n      return;\n    }\n\n    fastRaf(() => {\n      document.body.classList.add('animating-right-column');\n    });\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n\n      fastRaf(() => {\n        document.body.classList.remove('animating-right-column');\n      });\n    });\n  }, [isRightColumnShown]);\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = selectCountNotMutedUnread(getGlobal());\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = selectCountNotMutedUnread(getGlobal()) - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    openStickerSetShortName({ stickerSetShortName: undefined });\n  }, [openStickerSetShortName]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className} onDrop={stopEvent} onDragOver={stopEvent}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardPicker isOpen={isForwardModalOpen} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      {activeGroupCallId && (\n        <>\n          <GroupCall groupCallId={activeGroupCallId} />\n          <ActiveCallHeader groupCallId={activeGroupCallId} />\n        </>\n      )}\n      <DownloadManager />\n      <CallFallbackConfirm isOpen={isCallFallbackConfirmOpen} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { settings: { byKey: { animationLevel, language, wasTimeFormatSetManually } } } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      lastSyncTime: global.lastSyncTime,\n      isLeftColumnShown: global.isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl: global.safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      openedStickerSetShortName: global.openedStickerSetShortName,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isCallFallbackConfirmOpen: Boolean(global.groupCalls.isFallbackConfirmOpen),\n      addedSetIds: global.stickers.added.setIds,\n    };\n  },\n)(Main));\n","import { getDispatch, getGlobal } from '../lib/teact/teactn';\n\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nif (!getGlobal().connectionState) {\n  getDispatch().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addReducer","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","type","shouldReplaceHistory","currentMessageList","replaceThreadParam","exitMessageSelectMode","messages","contentToBeScheduled","forwardMessages","toChatId","setGlobal","updateCurrentMessageList","isChatInfoShown","openChat","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","scrollOffset","messageId","paramName","chatMessages","selectChatMessages","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","selectAllowedMessageActions","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","MAIN_THREAD_ID","chat","selectChat","lastMessage","threadInfo","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","avatarOwnerId","profilePhotoIndex","origin","mediaViewer","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","newGlobal","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","messageListType","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","messageIds","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","closeMediaViewer","selectedMessages","openForwardMenu","message","byChatId","activeDownloads","filter","map","canDownload","forEach","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isPollModalOpen","currentVersion","APP_VERSION","slice","join","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","serverTimeOffset","content","text","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateSelectedUserId","updateUserSearch","globalUserIds","localUserIds","leftColumnWidth","management","isActive","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","action","emoji","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","push","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","payment","isPaymentModalOpen","clearPayment","closeInvoice","error","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","result","callApi","selectThreadOriginChat","limit","users","threadInfos","localMessages","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","delete","isRestricted","Promise","resolve","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","Date","now","selectEditingMessage","setEditingId","get","previousLocalId","cancelApiProgress","draft","replyToMsgId","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","currentUserId","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","option","offset","shouldResetVoters","unique","user","offsets","nextOffset","loadPollOptionResults","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","poll","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","selectUser","fullInfo","sendAsIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","searchThrottled","throttle","searchGifs","updateGifSearch","added","addedStickers","updateStickerSets","sets","loadStickerSets","setIds","addedSetIds","loadStickers","stickerSetId","pause","recentStickers","loadRecentStickers","favorite","favoriteStickers","loadFavoriteStickers","greeting","featured","featuredStickers","loadFeaturedStickers","stickerSetShortName","stickerSetAccessHash","stickerSet","selectStickerSet","accessHash","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","replaceAnimatedEmojis","loadAnimatedEmojis","animatedEmojiEffects","loadAnimatedEmojiEffects","saved","savedGifs","loadSavedGifs","unfave","unfaveSticker","installedDate","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","keywords","searchStickers","setsById","title","searchWords","updateStickersForEmoji","loadStickersForEmoji","openedStickerSetShortName","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","chatOrUser","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","currentSearch","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","newFoundIds","updateLocalTextSearchResults","searchTextMessages","peerId","selectCurrentMediaSearchPeerId","selectCurrentMediaSearch","currentType","currentResults","SHARED_MEDIA_SLICE","updateLocalMediaSearchResults","searchSharedMedia","timestamp","getDispatch","searchMessagesByDate","ManagementProgress","username","updateManagementProgress","updateManagement","isUsernameAvailable","isChatBasicGroup","invite","editingInvite","loadAndReplaceArchivedChats","CHAT_LIST_LOAD_SLICE","archived","withPinned","updateUsers","addUserStatuses","userStatusesById","updateChats","replaceChatListIds","updateChatListSecondaryInfo","loadAndUpdateUsers","contactIds","contactList","updatedUsers","loadTopMessages","afterSyncCallback","DEBUG","console","log","savedUsers","lastLocalServiceMessage","selectLastServiceNotification","savedPrivateChatIds","savedChats","currentChatId","selectedChat","isUserId","selectedChatUser","replaceUserStatuses","replaceChats","draftsById","replyingToById","loadAndReplaceChats","areMessagesLoaded","currentThreadId","draftsByChatId","reduce","acc","newCurrentChatId","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","Array","prototype","replaceUsers","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","sync","afterSync","all","updateAppBadge","selectCountNotMutedUnread","runDebouncedForFetchFullUser","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userId","statusesById","topPeers","lastRequestedAt","loadTopUsers","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","isUserBot","commonChats","isFullyLoaded","updateUser","updateChatMutedState","phoneNumber","phone","updateContact","deleteContact","profileId","isPrivate","photos","userSearch","updateUserSearchFetchingStatus","searchUsers","pick","runDebouncedForSearch","sendBotCommand","command","button","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","toggleSafeLinkModal","showDialog","alert","isError","answerCallbackButton","openPollModal","getReceipt","receiptMessageId","getPaymentForm","setInvoiceMessageInfo","openPaymentModal","bot","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","queryId","resultId","botId","param","startParam","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","requestInfo","saveInfo","selectPaymentChatId","selectPaymentMessageId","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","validateRequestedInfo","setPaymentForm","step","invoice","shippingAddressRequested","nameRequested","phoneRequested","emailRequested","setReceipt","receipt","publishableKey","selectProviderPublishableKey","credentials","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","shippingOptionId","saveCredentials","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","stripeCredentials","selectStripeCredentials","requestedInfoId","sendPaymentForm","save","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","interactions","startX","startY","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","endX","endY","reaction","selectDefaultReaction","sendReaction","reactions","some","isChosen","animationLevel","settings","byKey","ANIMATION_LEVEL_MAX","activeReactions","omit","recentReactions","canSeeList","addMessageReaction","appConfig","defaultReaction","reactors","runThrottledForUpdateAppBadge","update","noTopChatsRequest","selectIsChatListed","loadTopChats","newProfilePhoto","closeMessageNotifications","listType","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","senderId","isFromScheduled","hasUnreadMention","unreadMentionsCount","notifyAboutNewMessage","messageUpdate","channelId","selectCommonBoxChatId","targetChat","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","active","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","photo","formattedText","ANIMATION_DELAY","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","isMessageLocal","addViewportId","messagesCount","firstUnreadId","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","newMessage","isMessageInCurrentMessageList","delayedGlobal","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","selectScheduledMessages","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","updatedPoll","updatedResults","chosenAnswers","chosenAnswer","chosenAnswerIndex","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOption","targetOptionIndex","updatedOption","votersCount","selectIsServiceChatReady","flushStatusUpdatesThrottled","pendingStatusUpdates","statusUpdate","status","targetUser","isBlocked","addBlockedContact","privacy","key","rules","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","connectionState","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","useBeforeUnload","callback","useEffect","onBeforeUnload","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","useBrowserOnline","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","ANIMATION_LEVEL_OPTIONS","memo","withGlobal","searchQuery","chatsById","globalSearchChatId","searchDate","theme","selectTheme","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","openTipsChat","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","lang","useLang","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","withOtherVersions","location","hostname","MainButton","onTrigger","isOpen","Button","ripple","size","color","className","onClick","ariaLabel","buildClassName","handleSearchFocus","useCallback","handleSelectSaved","handleDarkModeToggle","stopPropagation","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","body","classList","toggle","isSearchFocused","searchInputPlaceholder","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","toLowerCase","langCode","href","FEEDBACK_URL","setPermanentWebVersion","clearWebsync","disableHistoryBack","SearchInput","inputId","parentContainerClassName","focused","placeholder","autoComplete","canClose","onChange","onFocus","PickerSelectedItem","isMinimized","clickArg","chatOrUserId","dir","isRtl","Spinner","allListIds","usersById","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","notifySettings","selectNotifySettings","notifyExceptions","selectNotifyExceptions","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","displayedFolders","folderCountersById","resolverFn","ms","dependencies","runThrottled","useThrottle","setValue","isFrozen","freeze","unfreeze","useFlag","useHeavyAnimationCheck","useOnChange","counters","unreadDialogsCount","hasActiveDialogs","getFolderUnreadDialogs","badgeCount","isBadgeActive","useThrottledMemo","folderTabs","ALL_FOLDER_ID","handleSwitchTab","forceOnHeavyAnimation","current","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInAllTabRef","captureEscKeyListener","useHistoryBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","TabList","tabs","activeTab","onSwitchTab","Transition","ref","name","activeKey","renderCount","props","LeftSearch","useModuleLoader","Bundles","Loading","ContactList","closeTimeout","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","handleMouseEnter","handleMouseLeave","onMouseEnter","onMouseLeave","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","isConnecting","isMouseInside","handleSelectSettings","handleSelectContacts","handleSelectNewChannel","handleSelectNewGroup","handleSelectArchived","autoCloseTimeout","shouldRenderUpdateButton","updateButtonClassNames","handleUpdateClick","isAppOutdated","markIsAppOutdated","timeout","reload","useAppOutdatedCheck","ShowTransition","isCustom","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","SettingsScreens","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","pickerSearchInput","getElementById","blur","handleSearchQuery","IS_MAC_OS","metaKey","getKeyFromEvent","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","style","remove","handleMouseMove","event","newWidth","ceil","clientX","stopDrag","offsetWidth","add","useResize","handleSettingsScreenSelect","screen","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","setSize","handleResize","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","ARE_CALLS_SUPPORTED","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canExpandActions","joinChannel","openLocalTextSearch","restartBot","openCallFallbackConfirm","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleSearchClick","focus","searchInput","IS_PWA","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","useWebpThumbnail","thumbDataUri","getMessageMediaThumbDataUri","shouldDecodeThumbnail","isWebpSupported","thumbnailDecoded","setThumbnailDecoded","EMPTY_IMAGE_DATA_URI","useLayoutEffect","webpToPngBase64","then","catch","drawRect","height","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","mediaThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","getMessageSummaryText","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","ConfirmDialog","confirmLabel","confirmHandler","getPictogramDimensions","src","alt","renderPictogram","renderText","RippleEffect","scaleImage","image","ratio","outputType","Blob","URL","createObjectURL","img","Image","onload","scale","blob","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","Error","res","canvas","createElement","ctx","getContext","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","LOGO_DIMENSIONS","MINIMAL_SIZE","sender","audio","voice","fileName","artist","performer","getSenderTitle","getTranslation","album","getChatTitle","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","media","thumbnailSizes","AVATAR_FULL_DIMENSIONS","getCoverSize","fn","deps","defaultValue","setIsLoading","setError","setResult","wasCancelled","telegramLogoPath","resizeImage","makeGoodArtwork","useAsync","buildMediaMetadata","artwork","selectSender","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","isVoice","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","handleClick","handleClose","clearMediaSession","handleVolumeChange","handleVolumeClick","handlePlaybackClick","volumeIcon","renderAudio","subtitle","renderVoice","withClickPropagation","RangeSlider","groupCall","selectChatGroupCall","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","audioMessage","pinnedIds","state","isSelectModeActive","isChatWithBot","currentTransitionKey","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openChatWithInfo","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","messageInput","EDITABLE_INPUT_ID","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","useCurrentOrPrev","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","canRevealTools","componentEl","renderInfo","renderBackButton","PrivateChatInfo","withFullInfo","withMediaViewer","withUpdatingStatus","noRtl","GroupChatInfo","asClose","withUnreadCount","formatIntegerCompact","isAudioPlayerRendered","Infinity","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStart","senderGroups","dateGroups","isInAlbum","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","INTERSECTION_MARGIN_FOR_MEDIA","isEmojiOnlyMessage","customShape","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","noAvatars","isOwn","isOwnMessage","isForwarded","isForwardedMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","getMessageText","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","clamp","num","low","high","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","REM","minWidth","maxHeight","spacing","originalRatios","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","calculateAuthorWidth","font","whiteSpace","left","opacity","appendChild","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","onContextMenu","handleBeforeContextMenu","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","pageX","pageY","handleDoubleTap","target","contains","handleTap","handleContextMenu","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","currentTarget","lastGroupElement","getLastElementInDocumentGroup","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","observeIntersection","isEmbedded","appearanceOrder","isLastInList","useOnIntersect","noAppearanceAnimation","markShown","targetUsers","renderActionMessageText","asPlain","isContextMenuOpen","contextMenuPosition","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","customText","isIntersecting","useIsIntersecting","pictogramId","isRoundVideo","getMessageRoundVideo","senderTitle","draggable","activeReaction","isInMeta","stopActiveReaction","r","centerIconId","effectId","mediaDataCenterIcon","mediaDataEffect","shouldPlay","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","AnimatedSticker","animationData","play","noLoop","onLoad","onEnded","outgoingStatus","signature","withReactions","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","replace","views","formatTime","MessageOutgoingStatus","observeIntersectionForPlaying","shouldLoop","isModalOpen","openModal","closeModal","isAnimated","isMemojiSticker","MEMOJI_STICKER_ID","shouldLoad","mediaHash","getMessageMediaFormat","isMediaLoaded","isMediaReady","useMediaTransition","getStickerDimensions","thumbClassName","stickerClassName","fromSticker","useBlurredMediaThumbRef","fullMediaData","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","canAutoLoad","isSelected","uploadProgress","nonInteractive","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","loadProgress","useMediaWithLoadProgress","thumbRef","downloadProgress","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","usePrevious","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","contentEl","inSelectMode","getImageData","getAppendixColorFromImage","getCustomAppendixBg","appendixBg","setProperty","ProgressSpinner","useVideoAutoPause","playerRef","canPlay","wasPlaying","paused","canPlayRef","freezePlaying","unfreezePlaying","safePlay","unfreezePlayingOnRaf","fastRaf","useBackgroundMode","canAutoPlay","videoRef","getMessageWebPageVideo","isPlayAllowed","setIsPlayAllowed","previewClassNames","isInline","isBuffered","bufferingHandlers","useBuffering","shouldRenderPlayButton","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","duration","useVideoCleanup","cancelMessageMediaDownload","autoPlay","muted","loop","playsInline","onTimeUpdate","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","openUserInfo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","isQuiz","getReadableVotersCount","isText","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","isSquarePhoto","handleMediaClick","siteName","displayUrl","isMediaInteractive","truncatedDescription","trimText","SafeLink","getMessageInvoice","amount","currency","isTest","photoUrl","formatCurrency","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","selectCanAutoLoadMedia","selectCanAutoPlayMedia","currentOnRelease","playingProgressRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","stopPlaying","capturePlaying","stopCurrentAudio","videoClassName","recentReplierIds","recentRepliers","hasUnread","recentReactors","recentReaction","isOutside","metaChildren","localSticker","soundId","playKey","useAnimatedEmoji","localStickerAnimationData","setLocalStickerAnimationData","getAnimationData","quality","APPENDIX_OWN","__html","APPENDIX_NOT_OWN","withSenderName","withAvatar","isLastInDocumentGroup","viaBotId","replyToChatId","isRepliesChat","isChatWithRepliesBot","chatUsername","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","botSender","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectUploadProgress","isForwarding","highlight","singleEmoji","getMessageSingleEmoji","every","selectIsDownloading","actualThreadInfo","isInDocumentGroup","documentGroupFirstMessageId","reactionMessage","selectIsMessageProtected","isSingleEmoji","animatedEmoji","selectAnimatedEmoji","animatedEmojiEffect","selectAnimatedEmojiEffect","animatedEmojiSoundId","selectAnimatedEmojiSound","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoLoadMedia","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","observeIntersectionForBottom","observeIntersectionForMedia","observeIntersectionForAnimatedStickers","areReactionsInMeta","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","clickInlineButton","bottomMarkerRef","isLocal","hasReply","isReplyMessage","hasThread","getMessageCustomShape","hasAnimatedEmoji","asForwarded","isLinkedChannelPost","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","canFocus","isChannelPost","fromMessageId","withCommentButton","withQuickReactionButton","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","markMessagesRead","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","contentClassName","hasComments","hasActionButton","classNames","isMedia","isMediaWithNoText","isViaBot","isRound","buildContentClassName","withAppendix","textParts","renderMessageText","metaPosition","reactionsPosition","areReactionsEmpty","calculatedWidth","noMediaCorners","extraPadding","adminTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","onMouseMove","isAvatarPeerUser","avatarUser","avatarChat","hiddenName","renderAvatar","textContentClass","senderColor","getUserColorKey","renderSenderName","AnimatedEmoji","effect","forceLoadPreview","Audio","AudioOrigin","isSelectable","onPlay","onReadMedia","Document","renderContent","dangerouslySetInnerHTML","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","getUserFullName","chatInviteTitle","chatInviteHash","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","observeIntersectionForReading","throttleMs","margin","freezeForReading","unfreezeForReading","entries","mentionIds","entry","dataset","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_ID_BASE","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flatten","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","getMessageOriginalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","botDescription","isChatLoaded","isChannelChat","isGroupChat","isChatGroup","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","setScrollOffset","loadSponsoredMessages","loadMessageReactions","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","onTickEnd","listedMessages","orderBy","useInterval","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useDebounce","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","el","offsetTop","top","findStuckDate","useStickyDates","handleScroll","parentElement","observer","ResizeObserver","offsetParent","contentRect","disconnect","windowHeight","normalHeight","String","clientHeight","preservedItemElements","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","withExtraShift","focusNextReply","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","resetInput","applyIosAutoCapitalizationFix","inputEl","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","getMessageTextAsHtml","useDebouncedMemo","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","tempEl","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","AttachMenu","SymbolMenu","InlineBotTooltip","MentionTooltip","CustomSend","StickerTooltip","BotCommandTooltip","useMouseInside","isKeyboardSingleUse","forceOpen","markForceOpen","unmarkForceOpen","keyboardButtons","forwardMessageIds","forwardedMessagesCount","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","faded","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RegExp","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","link","linkEntity","ApiMessageEntityTypes","textMatch","renderingWebPage","webPageWithoutPhoto","messageStub","SendAsMenu","MainButtonState","chatUser","selectChatUser","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","sendAsUser","editingMessage","canScheduleUntilOnline","selectUserStatus","wasOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","appendixRef","html","setHtml","lastMessageSendTimeSeconds","prevDropAreaState","isCalendarOpen","openCalendar","closeCalendar","scheduledMessageArgs","setScheduledMessageArgs","sendMessageAction","useSendMessageAction","htmlRef","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isAttachMenuOpen","openAttachMenu","closeAttachMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","canShowHelp","usernameLowered","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","close","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","allowedAttachmentOptions","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","isDisabled","cleanHtml","trim","clearStickersForEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","canSendStickers","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","insertTextAndUpdateCursor","selection","getSelection","newHtml","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","range","deleteContents","fragment","createContextualFragment","lastInsertedNode","lastChild","insertNode","setStartAfter","setEndAfter","collapse","removeAllRanges","addRange","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","removeSymbol","execCommand","tempInput","contentEditable","textLength","createRange","setStart","setEnd","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","handleEditComplete","editedMessage","editMessage","hasMessageMedia","useEditing","saveDraft","updateDraft","draftChatId","draftThreadId","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevHtml","handleBlur","useDraft","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","items","kind","file","getAsFile","pastedText","getData","substring","useClipboardPaste","handleFileSelect","files","handleAppendFiles","handleClearAttachment","handleSend","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleGifSelect","gif","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleSilentSend","handleMessageSchedule","isWhenOnline","restArgs","getTime","handleMessageScheduleUntilOnline","handleCloseCalendar","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","mainButtonHandler","areVoiceMessagesNotAllowed","canAttachMedia","prevEditedMessage","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","onSend","Portal","DropAreaState","withQuick","onHide","onFileSelect","caption","onCaptionUpdate","onFileAppend","onClear","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","withUsername","canAttachEmbedLinks","MessageInput","forcedPlaceholder","canAutoFocus","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onStickerSelect","emojis","onEmojiSelect","onPollCreate","onGifSelect","onRemoveSymbol","onSearchOpen","onSilentSend","onScheduleSend","withTimePicker","maxAt","getDayStartAt","isFutureMode","secondButtonLabel","onSubmit","onSecondButtonClick","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","PaymentModal","ReceiptModal","SeenByModal","emojiInteraction","EmojiInteractionAnimation","ReactorListModal","CLOSE_ANIMATION_DURATION","isImage","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","patternColor","themes","isMobileSearchActive","isReceiptModalOpen","isSeenByModalOpen","isReactorListModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","closePaymentModal","clearReceipt","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","prevTransitionKey","handleOpenEnd","handleSlideStop","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","ANIMATION_LEVEL_MIN","propertyName","useIsReady","visualViewport","documentElement","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","forceSyncOnIOs","createMessageHash","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canAddContact","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","shouldSkipAnimation","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","addContact","backButtonRef","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","handleAddContact","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManagementScreens","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","renderingContentKey","renderHeaderContent","autoFocusSearch","isBackButton","buttonClassName","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","reverse","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","isGroup","hasMembersTab","areMembersHidden","canViewMembers","canAddMembers","getHasAdminRight","canDeleteMembers","hasCommonChatsTab","resolvedUserId","isChatProtected","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","cacheBuster","resetCacheBuster","setCacheBuster","useCacheBuster","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContents","renderSharedMedia","noSpinner","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","teactOrderKey","contextActions","memberId","handler","forceShowSelf","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","currentProfileUserId","selectedId","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","setEditingExportedInvite","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevContentKey","MediaViewer","download","click","startedDownloads","downloadHash","getMessageContentFilename","Notifications","Dialogs","ForwardPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","CallFallbackConfirm","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isCallFallbackConfirmOpen","isFallbackConfirmOpen","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadAddedStickers","ensureTimeFormat","openStickerSetShortName","checkVersionNotification","loadAppConfig","isSynced","LOCATION_HASH","processDeepLink","decodeURIComponent","middleColumnTransitionClassNames","rightColumnTransitionClassNames","prevIsLeftColumnShown","dispatchHeavyAnimationEnd","waitForTransitionEnd","prevIsRightColumnShown","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","usePreventPinchZoomGesture","onDrop","onDragOver","initApi"],"sourceRoot":""}