{"version":3,"file":"9970.964e193d8151fd02d513.js","mappings":"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","sources":["webpack://telegram-t/./src/components/right/DeleteMemberModal.tsx","webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts","webpack://telegram-t/./src/global/selectors/calls.ts","webpack://telegram-t/./src/util/deeplink.ts"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { selectCurrentChat, selectUser } from '../../global/selectors';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  contactName?: string;\n};\n\nconst DeleteMemberModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  userId,\n  contactName,\n  onClose,\n}) => {\n  const { deleteChatMember } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteChatMember = useCallback(() => {\n    deleteChatMember({ chatId: chat!.id, userId });\n    onClose();\n  }, [chat, deleteChatMember, onClose, userId]);\n\n  if (!chat || !userId) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeleteChatMember}\n      className=\"delete\"\n      title={lang('GroupRemoved.Remove')}\n    >\n      <p>{renderText(lang('PeerInfo.Confirm.RemovePeer', contactName))}</p>\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteChatMember}>\n        {lang('lng_box_remove')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const chat = selectCurrentChat(global);\n    const user = userId && selectUser(global, userId);\n    const contactName = user ? getUserFirstOrLastName(user) : undefined;\n\n    return {\n      chat,\n      contactName,\n    };\n  },\n)(DeleteMemberModal));\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiChatFolder, ApiError,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type { GlobalActions } from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID, ALL_FOLDER_ID, DEBUG, SERVICE_NOTIFICATIONS_NUMBER,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats, addUsers, addUserStatuses, replaceThreadParam,\n  updateChatListIds, updateChats, updateChat, updateChatListSecondaryInfo,\n  updateManagementProgress, leaveChat, replaceUsers, replaceUserStatuses,\n  replaceChats, replaceChatListIds, addChatMembers,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername, selectThreadTopMessageId,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly, isChatArchived, isChatBasicGroup, isUserBot, isChatChannel, isChatSuperGroup,\n} from '../../helpers';\nimport { processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions) => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => id !== currentChatId && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const { id, threadId = MAIN_THREAD_ID } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.threadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.threadInfo.chatId,\n      threadId: chat.lastMessage.threadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload) => {\n  const { chatId, threadId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  actions.focusMessage({ chatId, threadId, messageId });\n});\n\naddActionHandler('openSupportChat', async (global, actions) => {\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload) => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  while (shouldReplace || !getGlobal().chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => Boolean(chat?.lastMessage) && !selectIsChatPinned(global, chat.id))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => (chat1.lastMessage!.date - chat2.lastMessage!.date))[0]\n      : undefined;\n\n    await loadChats(listType, oldestChat?.id, oldestChat?.lastMessage!.date, shouldReplace);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload) => {\n  const { chatId, force } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(chat);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(chat));\n  }\n});\n\naddActionHandler('loadTopChats', () => {\n  runThrottledForLoadTopChats(() => loadChats('active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    serverTimeOffset,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { chatId, isMuted } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateChat(global, chatId, { isMuted }));\n  void callApi('updateChatMutedState', { chat, isMuted, serverTimeOffset });\n});\n\naddActionHandler('createChannel', (global, actions, payload) => {\n  const {\n    title, about, photo, memberIds,\n  } = payload!;\n\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createChannel(title, members, about, photo);\n});\n\naddActionHandler('joinChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  void joinChannel(channelId, accessHash);\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload) => {\n  const { chatId, userId }: { chatId: string; userId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload) => {\n  const { chatId }: { chatId: string } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global)?.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', (global, actions, payload) => {\n  const { title, memberIds, photo } = payload!;\n  const members = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter<ApiUser>(Boolean as any);\n\n  void createGroupChat(title, members, photo);\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload) => {\n  const { id, folderId } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload) => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', () => {\n  void loadChatFolders();\n});\n\naddActionHandler('loadRecommendedChatFolders', () => {\n  void loadRecommendedChatFolders();\n});\n\naddActionHandler('editChatFolders', (global, actions, payload) => {\n  const { chatId, idsToRemove, idsToAdd } = payload!;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = (idsToAdd as number[])\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats' });\n    return;\n  }\n\n  (idsToRemove as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  (idsToAdd as number[]).forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload) => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', (global, actions, payload) => {\n  const { folder } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  void createChatFolder(folder, maxId);\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload) => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    });\n  }\n});\n\naddActionHandler('deleteChatFolder', (global, actions, payload) => {\n  const { id } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void deleteChatFolder(id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload) => {\n  const { id } = payload!;\n  const { serverTimeOffset } = global;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { serverTimeOffset, chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload) => {\n  const { phoneNumber, startAttach, attach } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByPhoneNumber(phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat();\n    actions.showNotification({\n      message: langProvider.getTranslation('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id });\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload) => {\n  const { url } = payload!;\n\n  const tgLinkMatch = url.match(RE_TG_LINK);\n  if (tgLinkMatch) {\n    processDeepLink(tgLinkMatch[0]);\n    return;\n  }\n\n  const uri = new URL(url.startsWith('http') ? url : `https://${url}`);\n  const [part1, part2, part3] = uri.pathname.split('/').filter(Boolean).map((l) => decodeURI(l));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    actions.openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    actions.openChatByInvite({ hash });\n    return;\n  }\n\n  if (part1 === 'addstickers') {\n    actions.openStickerSetShortName({\n      stickerSetShortName: part2,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    actions.joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist' });\n      return;\n    }\n\n    actions.focusMessage({\n      chatId,\n      messageId,\n    });\n  } else if (part1 === 'invoice') {\n    actions.openInvoice({\n      slug: part2,\n    });\n  } else {\n    actions.openChatByUsername({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload) => {\n  const { hash } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload) => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach,\n  } = payload!;\n\n  const chat = selectCurrentChat(global);\n\n  if (!commentId) {\n    if (chat && chat.username === username && !startAttach && !startParam) {\n      actions.focusMessage({ chatId: chat.id, messageId });\n      return;\n    }\n    await openChatByUsername(actions, username, messageId, startParam, startAttach, attach);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  void openCommentsByUsername(actions, username, messageId, commentId);\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload) => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload) => {\n  const { chatId, userId, bannedRights } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload) => {\n  const {\n    chatId, userId, adminRights, customTitle,\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembers } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n\n  global = getGlobal();\n\n  setGlobal(updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(adminMembers && isDismissed && {\n        adminMembers: adminMembers.filter((m) => m.userId !== userId),\n      }),\n      ...(adminMembers && !isDismissed && {\n        adminMembers: adminMembers.map((m) => (\n          m.userId === userId\n            ? { ...m, adminRights, customTitle }\n            : m\n        )),\n      }),\n    },\n  }));\n});\n\naddActionHandler('updateChat', async (global, actions, payload) => {\n  const {\n    chatId, title, about, photo,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.Complete));\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload) => {\n  const { chatId, isEnabled } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global) => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  setGlobal({\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  });\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId, chatId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload) => {\n  const { channelId } = payload!;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    loadFullChat(chat);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload) => {\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = payload + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n    });\n    return undefined;\n  }\n\n  return {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      activeChatFolder: payload,\n    },\n  };\n});\n\naddActionHandler('resetOpenChatWithText', (global) => {\n  return {\n    ...global,\n    openChatWithText: undefined,\n  };\n});\n\naddActionHandler('loadMoreMembers', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload) => {\n  const { chatId, memberIds } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter<ApiUser>(Boolean as any);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Loading);\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n  loadFullChat(chat);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload) => {\n  const { chatId, userId } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  loadFullChat(chat);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload) => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload) => {\n  const { chatId, enabledReactions } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  void loadFullChat(chat);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const settings = await callApi('fetchChatSettings', chat);\n  if (!settings) return;\n\n  setGlobal(updateChat(getGlobal(), chat.id, { settings }));\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload) => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived', offsetId?: string, offsetDate?: number, shouldReplace = false,\n) {\n  let global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    serverTimeOffset: global.serverTimeOffset,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const chat = await callApi('getChatByPhoneNumber', SERVICE_NOTIFICATIONS_NUMBER);\n      global = getGlobal();\n      if (chat) {\n        chatIds.unshift(chat.id);\n        result.chats.unshift(chat);\n        if (lastLocalServiceMessage) {\n          chat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n    const currentChat = selectCurrentChat(global);\n    const visibleChats = currentChat ? [currentChat] : [];\n\n    const visibleUsers = selectVisibleUsers(global) || [];\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  Object.keys(result.draftsById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'draft', result.draftsById[chatId],\n    );\n  });\n\n  Object.keys(result.replyingToById).forEach((chatId) => {\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', result.replyingToById[chatId],\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat(chat: ApiChat) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  let global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    getActions().loadStickers({\n      stickerSetId: stickerSet.id,\n      stickerSetAccessHash: stickerSet.accessHash,\n      stickerSetShortName: stickerSet.shortName,\n    });\n  }\n\n  return result;\n}\n\nasync function createChannel(title: string, users: ApiUser[], about?: string, photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    });\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  let global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = {\n    ...global,\n    chatCreation: {\n      ...global.chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  };\n  setGlobal(global);\n  getActions().openChat({ id: channelId, shouldReplaceHistory: true });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n}\n\nasync function joinChannel(channelId: string, accessHash: string) {\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n  }\n}\n\nasync function createGroupChat(title: string, users: ApiUser[], photo?: File) {\n  setGlobal({\n    ...getGlobal(),\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  });\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    let global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = {\n      ...global,\n      chatCreation: {\n        ...global.chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    };\n    setGlobal(global);\n    getActions()\n      .openChat({\n        id: chatId,\n        shouldReplaceHistory: true,\n      });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      const global = getGlobal();\n      setGlobal({\n        ...global,\n        chatCreation: {\n          ...global.chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      });\n    }\n  }\n}\n\nexport async function migrateChat(chat: ApiChat): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      getActions().openLimitReachedModal({ limit: 'channels' });\n    } else {\n      getActions().showDialog({ data: { ...(error as ApiError), hasErrorKey: true } });\n    }\n\n    return undefined;\n  }\n}\n\nasync function loadChatFolders() {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    });\n  }\n}\n\nasync function loadRecommendedChatFolders() {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    });\n  }\n}\n\nasync function createChatFolder(folder: ApiChatFolder, maxId: number) {\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    setGlobal({\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    });\n  }\n}\n\nasync function deleteChatFolder(id: number) {\n  await callApi('deleteChatFolder', id);\n}\n\nexport async function fetchChatByUsername(\n  username: string,\n) {\n  const global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const chat = await callApi('getChatByUsername', username);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber(phoneNumber: string) {\n  const global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const chat = await callApi('getChatByPhoneNumber', phoneNumber);\n  if (!chat) {\n    return undefined;\n  }\n\n  setGlobal(updateChat(getGlobal(), chat.id, chat));\n\n  return chat;\n}\n\nasync function openChatByUsername(\n  actions: GlobalActions,\n  username: string,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n) {\n  let global = getGlobal();\n  const currentChat = selectCurrentChat(global);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const chat = await fetchChatByUsername(username);\n    if (!chat) return;\n\n    global = getGlobal();\n\n    const user = selectUser(global, chat.id);\n    if (!user) return;\n\n    const isBot = isUserBot(user);\n    if (!isBot || !user.isAttachMenuBot) {\n      actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n\n      return;\n    }\n\n    if (!currentChat) return;\n\n    actions.callAttachMenuBot({\n      botId: user.id,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.username === username;\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID });\n  }\n\n  const chat = await fetchChatByUsername(username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat();\n      actions.showNotification({ message: 'User does not exist' });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({ chatId: chat.id, messageId: channelPostId });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    openAttachMenuFromLink(actions, chat.id, attach, startAttach);\n  }\n}\n\nasync function openAttachMenuFromLink(\n  actions: GlobalActions,\n  chatId: string, attach: string, startAttach?: string | boolean,\n) {\n  const botChat = await fetchChatByUsername(attach);\n  if (!botChat) return;\n  const botUser = selectUser(getGlobal(), botChat.id);\n  if (!botUser || !botUser.isAttachMenuBot) {\n    actions.showNotification({ message: langProvider.getTranslation('WebApp.AddToAttachmentUnavailableError') });\n    return;\n  }\n\n  actions.callAttachMenuBot({\n    botId: botUser.id,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n  });\n}\n\nasync function openCommentsByUsername(\n  actions: GlobalActions,\n  username: string,\n  messageId: number,\n  commentId: number,\n) {\n  actions.openChat({ id: TMP_CHAT_ID });\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) return;\n\n  const global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chat.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat, threadId: messageId });\n    if (!result) return;\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectUser } from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport type { ApiGroupCall } from '../../../api/types';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { addChats, addUsers } from '../../reducers';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport type { CallSound } from '../../types';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((l) => {\n    l.muted = true;\n    l.volume = 0.0001;\n    return l.play().then(() => {\n      l.pause();\n      l.volume = 1;\n      l.currentTime = 0;\n      l.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall(groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  let global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants(groupCall: Partial<ApiGroupCall>, nextOffset?: string) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global) => {\n  return {\n    ...global,\n    isCallPanelVisible: !global.isCallPanelVisible,\n  };\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload) => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(groupCall);\n    await fetchGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload) => {\n  const { chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal(updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  }));\n\n  actions.joinGroupCall({ id: result.id, accessHash: result.accessHash });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions) => {\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const canInvite = Boolean(chat.username);\n\n  let { inviteLink } = chat.fullInfo!;\n  if (canInvite) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload) => {\n  const { username, inviteHash } = payload!;\n\n  const chat = await fetchChatByUsername(username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.getTranslation('NoUsernameFound') });\n    return;\n  }\n\n  const full = await loadFullChat(chat);\n\n  if (full?.groupCall) {\n    actions.joinGroupCall({ id: full.groupCall.id, accessHash: full.groupCall.accessHash, inviteHash });\n  }\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload) => {\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const {\n    chatId, id, accessHash, inviteHash,\n  } = payload;\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (activeGroupCallId) {\n    actions.leaveGroupCall({\n      rejoin: payload,\n    });\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall({\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n    isCallPanelVisible: false,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload) => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global) => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestCall', async (global, actions, payload) => {\n  const { userId, isVideo } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel();\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n\n  setGlobal({\n    ...getGlobal(),\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n    isCallPanelVisible: false,\n  });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): GlobalState {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter((l) => !l.isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall(\n  global: GlobalState,\n  groupCallId: string,\n): GlobalState {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall(\n  global: GlobalState,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): GlobalState {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant(\n  global: GlobalState,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n) {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n","import type { GlobalState } from '../types';\nimport { selectChat } from './chats';\nimport { isChatBasicGroup } from '../helpers';\nimport { selectUser } from './users';\n\nexport function selectChatGroupCall(global: GlobalState, chatId: string) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.fullInfo || !chat.fullInfo.groupCallId) return undefined;\n\n  return selectGroupCall(global, chat.fullInfo.groupCallId);\n}\n\nexport function selectGroupCall(global: GlobalState, groupCallId: string) {\n  return global.groupCalls.byId[groupCallId];\n}\n\nexport function selectGroupCallParticipant(global: GlobalState, groupCallId: string, participantId: string) {\n  return selectGroupCall(global, groupCallId)?.participants[participantId];\n}\n\nexport function selectIsAdminInActiveGroupCall(global: GlobalState): boolean {\n  const chatId = selectActiveGroupCall(global)?.chatId;\n\n  if (!chatId) return false;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return false;\n\n  return (isChatBasicGroup(chat) && chat.isCreator) || Boolean(chat.adminRights?.manageCall);\n}\n\nexport function selectActiveGroupCall(global: GlobalState) {\n  const { groupCalls: { activeGroupCallId } } = global;\n  if (!activeGroupCallId) {\n    return undefined;\n  }\n\n  return selectGroupCall(global, activeGroupCallId);\n}\n\nexport function selectPhoneCallUser(global: GlobalState) {\n  const { phoneCall, currentUserId } = global;\n  if (!phoneCall || !phoneCall.participantId || !phoneCall.adminId) {\n    return undefined;\n  }\n\n  const id = phoneCall.adminId === currentUserId ? phoneCall.participantId : phoneCall.adminId;\n  return selectUser(global, id);\n}\n","import { getActions } from '../global';\nimport { IS_SAFARI } from './environment';\n\ntype DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'setlanguage' |\n'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url' | 'invoice';\n\nexport const processDeepLink = (url: string) => {\n  const {\n    protocol, searchParams, pathname, hostname,\n  } = new URL(url);\n\n  if (protocol !== 'tg:') return;\n\n  const {\n    openChatByInvite,\n    openChatByUsername,\n    openChatByPhoneNumber,\n    openStickerSetShortName,\n    focusMessage,\n    joinVoiceChatByLink,\n    openInvoice,\n  } = getActions();\n\n  // Safari thinks the path in tg://path links is hostname for some reason\n  const method = (IS_SAFARI ? hostname : pathname).replace(/^\\/\\//, '') as DeepLinkMethod;\n  const params: Record<string, string> = {};\n  searchParams.forEach((value, key) => {\n    params[key] = value;\n  });\n\n  switch (method) {\n    case 'resolve': {\n      const {\n        domain, phone, post, comment, voicechat, livestream, start, startattach, attach,\n      } = params;\n\n      const startAttach = params.hasOwnProperty('startattach') && !startattach ? true : startattach;\n\n      if (domain !== 'telegrampassport') {\n        if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n          joinVoiceChatByLink({\n            username: domain,\n            inviteHash: voicechat || livestream,\n          });\n        } else if (phone) {\n          openChatByPhoneNumber({ phone, startAttach, attach });\n        } else {\n          openChatByUsername({\n            username: domain,\n            messageId: Number(post),\n            commentId: Number(comment),\n            startParam: start,\n            startAttach,\n            attach,\n          });\n        }\n      }\n      break;\n    }\n    case 'privatepost': {\n      const {\n        post, channel,\n      } = params;\n\n      focusMessage({\n        chatId: `-${channel}`,\n        id: post,\n      });\n      break;\n    }\n    case 'bg': {\n      // const {\n      //   slug, color, rotation, mode, intensity, bg_color: bgColor, gradient,\n      // } = params;\n      break;\n    }\n    case 'join': {\n      const { invite } = params;\n\n      openChatByInvite({ hash: invite });\n      break;\n    }\n    case 'addstickers': {\n      const { set } = params;\n\n      openStickerSetShortName({\n        stickerSetShortName: set,\n      });\n      break;\n    }\n    case 'share':\n    case 'msg': {\n      // const { url, text } = params;\n      break;\n    }\n    case 'login': {\n      // const { code, token } = params;\n      break;\n    }\n\n    case 'invoice': {\n      const { slug } = params;\n      openInvoice({ slug });\n      break;\n    }\n    default:\n      // Unsupported deeplink\n\n      break;\n  }\n};\n"],"names":["memo","withGlobal","global","userId","chat","selectCurrentChat","user","selectUser","contactName","getUserFirstOrLastName","undefined","isOpen","onClose","deleteChatMember","getActions","lang","useLang","handleDeleteChatMember","useCallback","chatId","id","onEnter","className","title","renderText","color","isText","onClick","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","serverTimeOffset","chatIds","length","shift","includes","SERVICE_NOTIFICATIONS_USER_ID","SERVICE_NOTIFICATIONS_NUMBER","unshift","chats","lastMessage","currentChat","visibleChats","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","Object","keys","draftsById","forEach","replaceThreadParam","MAIN_THREAD_ID","replyingToById","isFullyLoaded","setGlobal","loadFullChat","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","stickerSet","loadStickers","stickerSetId","stickerSetAccessHash","accessHash","stickerSetShortName","shortName","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","isMin","openAttachMenuFromLink","actions","attach","startAttach","botChat","botUser","isAttachMenuBot","callAttachMenuBot","botId","startParam","showNotification","langProvider","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatId","selectCurrentMessageList","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","selectChat","hasUnreadMark","toggleChatUnread","threadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","type","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","DEBUG","console","connectionState","authState","listIds","oldestChat","map","filter","Boolean","selectIsChatPinned","sort","chat1","chat2","date","force","lastLocalMessage","isMuted","about","photo","memberIds","createdChannel","chatCreation","progress","ChatCreationProgress","channelId","createChannel","joinChannel","leaveChat","createdChat","e","createGroupChat","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","loadChatFolders","recommendedChatFolders","recommended","loadRecommendedChatFolders","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","recommendedId","description","newFolder","createChatFolder","Math","max","folderIds","deleteChatFolder","unreadCount","hash","phoneNumber","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","tgLinkMatch","match","RE_TG_LINK","processDeepLink","uri","URL","startsWith","part1","part2","part3","pathname","split","l","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","openChatByPhoneNumber","substr","openChatByInvite","openStickerSetShortName","chatOrChannelPostId","Number","commentId","comment","joinVoiceChatByLink","inviteHash","voicechat","livestream","openInvoice","slug","openChatByUsername","start","channelPostId","isUserBot","isCurrentChat","startBot","param","usernameChat","selectThreadInfo","discussionChatId","openCommentsByUsername","isEnabled","isChatBasicGroup","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembers","isDismissed","updateManagementProgress","ManagementProgress","Promise","all","groups","addedById","reduce","group","addChats","forDiscussionIds","channel","fullChat","isPreHistoryHidden","activeChatFolder","openChatWithText","offset","addChatMembers","setNewChatMembersDialogState","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","values","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","isCallPanelVisible","subscribed","peer","joinGroupCall","selectActiveGroupCall","canInvite","inviteLink","canSelfUnmute","copyTextToClipboard","full","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","sound","doPlay","isVideo","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","acc","el","removeGroupCall","toString","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount","selectGroupCallParticipant","selectIsAdminInActiveGroupCall","isCreator","manageCall","selectPhoneCallUser","protocol","hostname","method","IS_SAFARI","value","key","domain","phone","post","invite","set"],"sourceRoot":""}